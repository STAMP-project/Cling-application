import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 53, 0);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.getParameterType();
        boolean boolean88 = parameterizedType78.isAllType();
        boolean boolean89 = parameterizedType78.matchesNumberContext();
        boolean boolean91 = parameterizedType78.removeProperty("(InputId: OR )");
        boolean boolean92 = parameterizedType78.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(44, 8, 39);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        boolean boolean18 = node17.isDec();
        node17.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node21 = node17.cloneTree();
        com.google.javascript.rhino.Node node22 = node17.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        int int40 = node39.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType23, node33, node39);
        com.google.javascript.rhino.Node node42 = node22.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node43 = node3.copyInformationFrom(node42);
        boolean boolean44 = node42.hasOneChild();
        boolean boolean45 = node42.isVoid();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.Node node96 = enumType88.getPropertyNode("(OR  [directives: [, Not declared as a constructor]])");
        com.google.javascript.rhino.jstype.JSType jSType97 = enumType88.unboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType99 = jSType97.getRestrictedTypeGivenToBooleanOutcome(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertNull(jSType97);
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean89 = jSDocInfo88.isExpose();
        boolean boolean90 = jSDocInfo88.isExpose();
        boolean boolean91 = jSDocInfo88.hasEnumParameterType();
        java.lang.String str92 = jSDocInfo88.getMeaning();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n", jSDocInfo88);
        java.lang.String str94 = jSDocInfo88.getDeprecationReason();
        boolean boolean95 = jSDocInfo88.hasModifies();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility96 = jSDocInfo88.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression97 = jSDocInfo88.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(visibility96);
        org.junit.Assert.assertNull(jSTypeExpression97);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node39 = node28.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node40 = node39.getParent();
        com.google.javascript.rhino.InputId inputId42 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        node39.setInputId(inputId42);
        boolean boolean44 = node39.isNE();
        boolean boolean45 = node39.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        boolean boolean18 = node17.isTry();
        boolean boolean19 = node17.isThis();
        boolean boolean20 = node17.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        boolean boolean37 = node28.hasChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean40 = node39.isTrue();
        node39.setQuotedString();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, node58, node61, node64, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = node64.getLastSibling();
        boolean boolean69 = node68.isDec();
        com.google.javascript.rhino.Node node70 = node45.copyInformationFrom(node68);
        node70.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node73 = node39.useSourceInfoFrom(node70);
        int int75 = node70.getIntProp(0);
        boolean boolean76 = node70.isArrayLit();
        com.google.javascript.rhino.Node node77 = node70.getFirstChild();
        com.google.javascript.rhino.Node node78 = node28.srcref(node70);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node28.children();
        com.google.javascript.rhino.Node node80 = node28.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a type name");
        int int65 = functionType62.getPropertiesCount();
        com.google.javascript.rhino.Node node67 = functionType62.getPropertyNode("InputId: OR ");
        boolean boolean68 = functionType62.isVoidType();
        boolean boolean69 = functionType62.isObject();
        boolean boolean71 = functionType62.isPropertyInExterns("Node tree inequality:\nTree1:\nOR \n\n\nTree2:\nOR {1029918095}\n\n\nSubtree1: OR \n\n\nSubtree2: OR {1029918095}\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNull(objectType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean8 = node2.hasMoreThanOneChild();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1);
        boolean boolean13 = node2.isEquivalentToTyped(node12);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        int int31 = node30.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship32 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node24, node30);
        boolean boolean33 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node24);
        boolean boolean34 = node24.isDo();
        int int35 = node24.getType();
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node24);
        boolean boolean37 = node2.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor59 = subclassRelationshipList38.iterator();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream60 = subclassRelationshipList38.parallelStream();
        java.lang.String str61 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream62 = subclassRelationshipList38.parallelStream();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor59);
        org.junit.Assert.assertNotNull(subclassRelationshipStream60);
        org.junit.Assert.assertNotNull(subclassRelationshipStream62);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec6 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType7 = null;
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship25 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType7, node17, node23);
        int int27 = node17.getIntProp((int) (byte) 0);
        boolean boolean28 = node17.isWhile();
        boolean boolean29 = node17.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = null;
        com.google.javascript.rhino.jstype.JSType jSType31 = assertionFunctionSpec6.getAssertedType(node17, jSTypeRegistry30);
        boolean boolean32 = node17.isParamList();
        com.google.javascript.rhino.Node node33 = node2.clonePropsFrom(node17);
        java.lang.String str34 = node33.toStringTree();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        java.lang.String str48 = node38.getString();
        boolean boolean49 = node38.isContinue();
        boolean boolean50 = node38.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType51 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType51, node61, node67);
        com.google.javascript.rhino.Node node70 = node38.copyInformationFromForTree(node67);
        java.lang.String str71 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node70);
        boolean boolean72 = node70.isWith();
        com.google.javascript.rhino.Node node73 = node70.getParent();
        com.google.javascript.rhino.Node node74 = node33.copyInformationFromForTree(node70);
        node74.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR \n" + "'", str34, "OR \n");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean89 = jSDocInfo88.isExpose();
        boolean boolean90 = jSDocInfo88.isExpose();
        boolean boolean91 = jSDocInfo88.hasEnumParameterType();
        java.lang.String str92 = jSDocInfo88.getMeaning();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n", jSDocInfo88);
        java.lang.String str94 = jSDocInfo88.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList95 = jSDocInfo88.getTemplateTypeNames();
        boolean boolean96 = jSDocInfo88.hasBaseType();
        java.lang.String str97 = jSDocInfo88.getFileOverview();
        boolean boolean98 = jSDocInfo88.isDefine();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.getImplicitPrototype();
        com.google.javascript.rhino.Node node73 = functionType62.getPropertyNode("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType(30);
        boolean boolean76 = functionType62.hasAnyTemplateInternal();
        com.google.javascript.rhino.jstype.JSType[][] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[][] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType[]> jSTypeArrayList78 = com.google.common.collect.ImmutableList.of(jSTypeArray77);
        boolean boolean79 = functionType62.equals((java.lang.Object) jSTypeArray77);
        boolean boolean81 = functionType62.removeProperty("OR  [synthetic: 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(jSTypeArrayList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isFor();
        boolean boolean4 = node2.isQuotedString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        node3.setOptionalArg(false);
        boolean boolean16 = node3.isHook();
        java.util.Set<java.lang.String> strSet17 = node3.getDirectives();
        boolean boolean18 = node3.isNull();
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node3);
        com.google.javascript.rhino.Node node20 = node3.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean90 = enumType88.isPropertyInExterns("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        boolean boolean92 = enumType88.isPropertyTypeDeclared("InputId: OR ");
        com.google.javascript.rhino.jstype.EnumType enumType93 = enumType88.toMaybeEnumType();
        boolean boolean95 = enumType88.hasProperty("STRING (Function)");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumType88.getElementsType();
        boolean boolean97 = enumType88.isNullType();
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(enumType93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.UnionType unionType80 = parameterizedType78.toMaybeUnionType();
        java.lang.String str81 = parameterizedType78.getReferenceName();
        com.google.javascript.rhino.jstype.EnumType enumType82 = parameterizedType78.toMaybeEnumType();
        boolean boolean83 = parameterizedType78.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(enumType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry2.getTypesWithProperty("OR  0");
        jSTypeRegistry2.identifyNonNullableName("((Not declared as a constructor))");
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.isNoCompile();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isGetterDef();
        boolean boolean30 = node28.isSyntheticBlock();
        jSDocInfo13.setAssociatedNode(node28);
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = jSDocInfo13.getTemplateTypeNames();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList32);
        boolean boolean35 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        boolean boolean37 = jSTypeRegistry2.hasNamespace("(OR  0)");
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry2.createNamedType("ERROR 52", "(STRING OR \n)", 39, 2);
        jSTypeRegistry2.incrementGeneration();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSType42);
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        boolean boolean13 = node6.isThrow();
        boolean boolean14 = node6.isExprResult();
        boolean boolean15 = node6.isComma();
        boolean boolean16 = node6.isTrue();
        boolean boolean17 = node6.isFunction();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        int int35 = node34.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship36 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType18, node28, node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node28.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean51 = node50.isThis();
        boolean boolean52 = node50.isVarArgs();
        boolean boolean53 = node50.isQualifiedName();
        boolean boolean54 = node50.isReturn();
        boolean boolean55 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node50);
        com.google.javascript.rhino.Node node56 = node6.srcrefTree(node50);
        boolean boolean57 = node6.isIn();
        boolean boolean58 = node6.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        int int22 = node12.getIntProp((int) (byte) 0);
        boolean boolean23 = node12.isWhile();
        boolean boolean24 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node12, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        boolean boolean40 = node33.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node44 = node33.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node45 = assertionFunctionSpec1.getAssertedParam(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        int int49 = node48.getCharno();
        boolean boolean50 = node48.isAssignAdd();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec52 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType53 = null;
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        int int70 = node69.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship71 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType53, node63, node69);
        int int73 = node63.getIntProp((int) (byte) 0);
        boolean boolean74 = node63.isWhile();
        boolean boolean75 = node63.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = null;
        com.google.javascript.rhino.jstype.JSType jSType77 = assertionFunctionSpec52.getAssertedType(node63, jSTypeRegistry76);
        boolean boolean78 = node63.isParamList();
        com.google.javascript.rhino.Node node79 = node48.clonePropsFrom(node63);
        boolean boolean80 = node48.hasMoreThanOneChild();
        node48.setSourceEncodedPosition(46);
        boolean boolean83 = node48.isEmpty();
        com.google.javascript.rhino.Node node84 = assertionFunctionSpec1.getAssertedParam(node48);
        java.lang.String str85 = assertionFunctionSpec1.getFunctionName();
        java.lang.String str86 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(Not declared as a constructor)" + "'", str85, "(Not declared as a constructor)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(Not declared as a constructor)" + "'", str86, "(Not declared as a constructor)");
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getParameterType();
        boolean boolean89 = parameterizedType78.hasReferenceName();
        boolean boolean91 = parameterizedType78.isPropertyTypeInferred("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        java.util.Set set92 = parameterizedType78.getOwnPropertyNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(set92);
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesUint32Context();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = functionType62.getParameters();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType72 = functionType62.toMaybeEnumElementType();
        com.google.javascript.rhino.Node node74 = functionType62.getPropertyNode("InputId: OR ");
        com.google.javascript.rhino.jstype.ObjectType.Property property76 = functionType62.getSlot("GETELEM false");
        boolean boolean77 = functionType62.hasCachedValues();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertNull(enumElementType72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        java.lang.String str96 = enumType88.getDisplayName();
        boolean boolean97 = enumType88.matchesObjectContext();
        com.google.javascript.rhino.jstype.UnionType unionType98 = enumType88.toMaybeUnionType();
        boolean boolean99 = enumType88.isInstanceType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNull(unionType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.Node node81 = parameterizedType78.getPropertyNode("JSDocInfo");
        boolean boolean82 = parameterizedType78.isFunctionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry2.createUnionType(jSTypeArray15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        boolean boolean22 = jSTypeRegistry20.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        boolean boolean73 = jSTypeRegistry71.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry71.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType82.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] { jSType53, jSType68, jSType83 };
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry25.createFunctionType(jSType39, jSTypeArray84);
        boolean boolean86 = functionType85.matchesNumberContext();
        boolean boolean88 = functionType85.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry20.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType85);
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType85.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType16.resolve(errorReporter17, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = functionType85.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType94 = functionType85.autoboxesTo();
        boolean boolean96 = functionType85.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean98 = functionType85.hasProperty("(InputId: OR )");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertNull(jSType94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.wasEmptyNode();
        boolean boolean21 = node10.isAdd();
        boolean boolean22 = node10.isWith();
        node10.putBooleanProp(0, true);
        boolean boolean26 = node10.isFor();
        node10.setSourceEncodedPosition((int) '4');
        boolean boolean29 = node10.isObjectLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean32 = node31.isVarArgs();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, node36, node39, node42, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = node42.getLastSibling();
        boolean boolean47 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoIfMissingFrom(node46);
        int int49 = node31.getLineno();
        boolean boolean50 = node31.isNE();
        // The following exception was thrown during execution in test generation
        try {
            node10.removeChild(node31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = null;
        enumType88.matchConstraint(objectType93);
        com.google.javascript.rhino.Node node95 = enumType88.getSource();
        boolean boolean96 = enumType88.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType97 = enumType88.getIndexType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNull(jSType97);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        java.lang.String str94 = enumType88.getDisplayName();
        boolean boolean95 = enumType88.matchesStringContext();
        boolean boolean96 = enumType88.isNativeObjectType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getJSDocInfo();
        boolean boolean82 = parameterizedType78.isInterface();
        boolean boolean83 = parameterizedType78.isNominalType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot85 = parameterizedType78.getSlot("(Function)");
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.EnumType enumType89 = parameterizedType78.toMaybeEnumType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope90 = parameterizedType78.getParentScope();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = parameterizedType78.hasAnyTemplateInternal();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(jSType88);
        org.junit.Assert.assertNull(enumType89);
        org.junit.Assert.assertNotNull(jSTypeStaticScope90);
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node10.isOptionalArg();
        com.google.javascript.rhino.Node node34 = node10.cloneTree();
        boolean boolean35 = node34.isFromExterns();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str60 = ternaryValue59.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str62 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue59.or(ternaryValue61);
        boolean boolean64 = subclassRelationshipList38.contains((java.lang.Object) ternaryValue59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.union(booleanLiteralSet66);
        boolean boolean68 = subclassRelationshipList38.contains((java.lang.Object) booleanLiteralSet65);
        boolean boolean69 = subclassRelationshipList38.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "false" + "'", str60, "false");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "false" + "'", str62, "false");
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        int int22 = node12.getIntProp((int) (byte) 0);
        boolean boolean23 = node12.isWhile();
        boolean boolean24 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node12, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean31 = node30.isFromExterns();
        boolean boolean32 = node30.isSyntheticBlock();
        boolean boolean33 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = assertionFunctionSpec1.getAssertedParam(node30);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node48 = node44.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType49 = null;
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        int int53 = node52.getCharno();
        java.lang.String str54 = node52.getSourceFileName();
        boolean boolean55 = node52.isLabel();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 10, node59, node62, node65, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = node65.getLastSibling();
        boolean boolean70 = node69.isDec();
        boolean boolean71 = node69.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship72 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType49, node52, node69);
        boolean boolean73 = node52.isParamList();
        com.google.javascript.rhino.Node node74 = node44.clonePropsFrom(node52);
        com.google.javascript.rhino.Node node75 = assertionFunctionSpec1.getAssertedParam(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.isNoShadow();
        java.lang.String str79 = jSDocInfo76.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean80 = jSDocInfo76.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo76.getParameterType("false");
        boolean boolean83 = jSDocInfo76.shouldPreserveTry();
        boolean boolean84 = jSDocInfo76.isInterface();
        java.util.Collection<java.lang.String> strCollection85 = jSDocInfo76.getReferences();
        java.util.Collection<java.lang.String> strCollection86 = jSDocInfo76.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo76.getParameterType("Not declared as a constructor");
        node44.setJSDocInfo(jSDocInfo76);
        java.util.Collection<java.lang.String> strCollection90 = jSDocInfo76.getAuthors();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(strCollection85);
        org.junit.Assert.assertNull(strCollection86);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNull(strCollection90);
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("enum{");
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker8.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = marker8.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker11.getDescription();
        com.google.javascript.rhino.InputId inputId17 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        java.lang.String str18 = inputId17.toString();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition20 = marker19.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = marker19.getType();
        boolean boolean22 = inputId17.equals((java.lang.Object) marker19);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker5, marker8, marker11, marker19);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition24 = marker19.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker26 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker26.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker26.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker29 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition30 = marker29.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = marker29.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = marker29.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = marker29.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = marker29.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker35 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition36 = marker35.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = marker35.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = marker35.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker39 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition40 = marker39.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = marker39.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = marker39.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = marker39.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList44 = com.google.common.collect.ImmutableList.of(marker0, marker19, marker26, marker29, marker35, marker39);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = marker0.getType();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(typePosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "InputId: Not declared as a constructor" + "'", str18, "InputId: Not declared as a constructor");
        org.junit.Assert.assertNull(nodeSourcePosition20);
        org.junit.Assert.assertNull(typePosition21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(nodeSourcePosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNull(nodeSourcePosition30);
        org.junit.Assert.assertNull(typePosition31);
        org.junit.Assert.assertNull(stringPosition32);
        org.junit.Assert.assertNull(typePosition33);
        org.junit.Assert.assertNull(stringPosition34);
        org.junit.Assert.assertNull(stringPosition36);
        org.junit.Assert.assertNull(typePosition37);
        org.junit.Assert.assertNull(typePosition38);
        org.junit.Assert.assertNull(nodeSourcePosition40);
        org.junit.Assert.assertNull(stringPosition41);
        org.junit.Assert.assertNull(typePosition42);
        org.junit.Assert.assertNull(typePosition43);
        org.junit.Assert.assertNotNull(markerList44);
        org.junit.Assert.assertNull(typePosition45);
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.hasParameter("OR  0");
        boolean boolean5 = jSDocInfo0.isConstructor();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("((Not declared as a constructor))");
        boolean boolean9 = jSDocInfo0.isDefine();
        java.lang.String str10 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Not declared as a constructor");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry17.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = jSTypeRegistry17.getErrorReporter();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable25 = jSTypeRegistry17.getTypesWithProperty("Function");
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node5, jSTypeRegistry17);
        node5.removeProp(1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        boolean boolean43 = node42.isDec();
        boolean boolean44 = node42.isQualifiedName();
        boolean boolean45 = node42.isQuotedString();
        node42.setCharno(44);
        boolean boolean48 = node42.isFunction();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node42);
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildToBack(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNull(errorReporter23);
        org.junit.Assert.assertNotNull(jSTypeIterable25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        boolean boolean71 = functionType62.hasAnyTemplate();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.getOwnerFunction();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = functionType72.isPropertyInExterns("STRING OR  [quoted: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(functionType72);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node75 = functionType62.getPropertyNode("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean78 = jSDocInfo77.isNoShadow();
        java.lang.String str80 = jSDocInfo77.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean81 = jSDocInfo77.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo77.getParameterType("false");
        boolean boolean84 = jSDocInfo77.shouldPreserveTry();
        functionType62.setPropertyJSDocInfo("Not declared as a type name", jSDocInfo77);
        boolean boolean86 = functionType62.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = functionType62.getJSDocInfo();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable89 = functionType62.getImplementedInterfaces();
        int int90 = functionType62.getMaxArguments();
        boolean boolean91 = functionType62.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.FunctionType functionType92 = functionType62.toMaybeFunctionType();
        boolean boolean93 = functionType62.isReturnTypeInferred();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertNotNull(objectTypeIterable89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(functionType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesGlobalState();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.isHidden();
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean5 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        com.google.javascript.rhino.jstype.FunctionType functionType94 = enumType88.getOwnerFunction();
        com.google.javascript.rhino.Node node96 = enumType88.getPropertyNode("java.io.IOException: java.io.IOException");
        boolean boolean97 = enumType88.matchesStringContext();
        com.google.javascript.rhino.Node node98 = enumType88.getSource();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType99 = enumType88.getElementsType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(functionType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNull(node98);
        org.junit.Assert.assertNotNull(enumElementType99);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean24 = node23.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node23, jSTypeRegistry25);
        boolean boolean27 = node23.isVarArgs();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        int int31 = node30.getCharno();
        boolean boolean32 = node30.isAssignAdd();
        boolean boolean33 = node30.isNot();
        java.lang.String str34 = node30.toString();
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFromForTree(node30);
        java.lang.String str37 = node23.getSourceFileName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR " + "'", str34, "OR ");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        java.lang.String str90 = enumType88.getDisplayName();
        boolean boolean92 = enumType88.isPropertyInExterns("(Not declared as a constructor)");
        boolean boolean93 = enumType88.hasCachedValues();
        boolean boolean94 = enumType88.isNativeObjectType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 31);
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isRegExp();
        node1.removeProp((int) (short) 1);
        node1.setSourceEncodedPosition(17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        namePosition0.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList7 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition0);
        namePosition0.setPositionInformation(52, (int) '4', (int) (byte) 100, 4);
        int int13 = namePosition0.getEndLine();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNotNull(nodeSourcePositionList7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec6 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType7 = null;
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship25 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType7, node17, node23);
        int int27 = node17.getIntProp((int) (byte) 0);
        boolean boolean28 = node17.isWhile();
        boolean boolean29 = node17.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = null;
        com.google.javascript.rhino.jstype.JSType jSType31 = assertionFunctionSpec6.getAssertedType(node17, jSTypeRegistry30);
        boolean boolean32 = node17.isParamList();
        com.google.javascript.rhino.Node node33 = node2.clonePropsFrom(node17);
        int int35 = node33.getIntProp(53);
        int int36 = node33.getLineno();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        com.google.javascript.rhino.Node node53 = node52.removeFirstChild();
        boolean boolean54 = node52.isNE();
        node52.setWasEmptyNode(false);
        // The following exception was thrown during execution in test generation
        try {
            node33.replaceChild(node38, node52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The new child node already has a parent.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        int int6 = node5.getCharno();
        java.lang.String str7 = node5.getSourceFileName();
        boolean boolean8 = node5.isLabel();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = node18.getLastSibling();
        boolean boolean23 = node22.isDec();
        boolean boolean24 = node22.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship25 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node5, node22);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node22);
        java.lang.String[] strArray31 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet32);
        strSet32.clear();
        node1.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean37 = node1.isBlock();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        node1.addChildToFront(node39);
        int int41 = node39.getSourceOffset();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean82 = parameterizedType78.hasOwnProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType83 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) parameterizedType78);
        com.google.javascript.rhino.jstype.TemplateType templateType84 = parameterizedType78.toMaybeTemplateType();
        boolean boolean85 = parameterizedType78.matchesStringContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNull(templateType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesNumberContext();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType96 = enumElementType93.toMaybeParameterizedType();
        boolean boolean97 = enumElementType93.isObject();
        int int98 = enumElementType93.getPropertiesCount();
        boolean boolean99 = enumElementType93.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(parameterizedType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = enumType88.getOwnerFunction();
        java.lang.Iterable iterable91 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType93 = enumType88.getPropertyType("");
        com.google.javascript.rhino.jstype.FunctionType functionType94 = enumType88.getOwnerFunction();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String> strSet95 = functionType94.getOwnPropertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(iterable91);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertNull(functionType94);
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(32);
        sideEffectFlags1.clearSideEffectFlags();
        int int3 = sideEffectFlags1.valueOf();
        int int4 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 47 + "'", int3 == 47);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        java.lang.Object[] objArray41 = subclassRelationshipList39.toArray();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList43 = subclassRelationshipList39.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.isNoCompile();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = node55.getLastSibling();
        boolean boolean60 = node59.isGetterDef();
        boolean boolean61 = node59.isSyntheticBlock();
        jSDocInfo44.setAssociatedNode(node59);
        java.util.Set<java.lang.String> strSet63 = jSDocInfo44.getModifies();
        strSet63.clear();
        boolean boolean65 = subclassRelationshipList39.contains((java.lang.Object) strSet63);
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor66 = subclassRelationshipList39.listIterator();
        com.google.common.collect.UnmodifiableIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor67 = subclassRelationshipList39.iterator();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator68 = subclassRelationshipList39.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(subclassRelationshipList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor66);
        org.junit.Assert.assertNotNull(subclassRelationshipItor67);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator68);
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType94 = enumType88.getOwnerFunction();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNull(functionType94);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("(Named type with empty name component)");
        java.lang.String str7 = jSDocInfo0.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("InputId: OR ");
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry24.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry39.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry39.createUnionType(jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry24.createUnionType(jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry10.createOptionalParameters(jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry2.createUnionType(jSTypeArray52);
        boolean boolean58 = jSTypeRegistry2.isForwardDeclaredType("(Node tree inequality:\nTree1:\nTYPEOF Not declared as a constructor 32\n\n\nTree2:\nOR \n\n\nSubtree1: TYPEOF Not declared as a constructor 32\n\n\nSubtree2: OR \n)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.shouldPreserveTry();
        jSDocInfo0.setLicense("false");
        java.lang.String str5 = jSDocInfo0.getDescription();
        boolean boolean6 = jSDocInfo0.hasType();
        java.lang.String str7 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getImplementedInterfaces();
        boolean boolean72 = functionType62.hasAnyTemplateInternal();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType73 = functionType62.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType(44);
        boolean boolean76 = functionType62.matchesNumberContext();
        boolean boolean77 = functionType62.isOrdinaryFunction();
        boolean boolean79 = functionType62.isPropertyTypeInferred("Function");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(parameterizedType73);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList15);
        jSTypeRegistry2.identifyNonNullableName("Not declared as a constructor");
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67, false);
        boolean boolean71 = jSTypeRegistry69.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry69.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry69.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] { jSType51, jSType66, jSType81 };
        com.google.javascript.rhino.jstype.FunctionType functionType83 = jSTypeRegistry23.createFunctionType(jSType37, jSTypeArray82);
        boolean boolean84 = functionType83.matchesNumberContext();
        java.lang.String str85 = functionType83.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.ObjectType objectType86 = functionType83.toObjectType();
        boolean boolean87 = functionType83.isResolved();
        boolean boolean88 = functionType83.isStringValueType();
        com.google.javascript.rhino.jstype.EnumType enumType89 = jSTypeRegistry2.createEnumType("STRING OR  [quoted: 1]", node20, (com.google.javascript.rhino.jstype.JSType) functionType83);
        boolean boolean91 = enumType89.isPropertyTypeDeclared("Not declared as a type name");
        boolean boolean92 = enumType89.isVoidType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(enumType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        boolean boolean40 = node17.isInstanceOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        boolean boolean68 = node67.isDec();
        com.google.javascript.rhino.Node node69 = node44.copyInformationFrom(node67);
        com.google.javascript.rhino.Node node70 = node17.useSourceInfoIfMissingFromForTree(node69);
        boolean boolean71 = node17.isReturn();
        node17.putIntProp((int) (short) -1, (int) (byte) 100);
        com.google.javascript.rhino.Node node75 = node17.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, node8, node11, node14, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node14.getLastSibling();
        boolean boolean19 = node18.isGetterDef();
        boolean boolean20 = node18.isSyntheticBlock();
        boolean boolean21 = strSet3.remove((java.lang.Object) boolean20);
        int int22 = strSet3.size();
        java.util.Iterator<java.lang.String> strItor23 = strSet3.iterator();
        strSet3.clear();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        boolean boolean39 = node38.isGetterDef();
        boolean boolean40 = node38.isSyntheticBlock();
        boolean boolean41 = node38.isOptionalArg();
        boolean boolean42 = node38.isGetterDef();
        boolean boolean43 = strSet3.remove((java.lang.Object) node38);
        boolean boolean44 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node38);
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec46 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 10, node50, node53, node56, 0, (int) (byte) 1);
        java.lang.String str60 = node50.getString();
        boolean boolean61 = node50.isReturn();
        com.google.javascript.rhino.Node node62 = assertionFunctionSpec46.getAssertedParam(node50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        int int66 = node65.getCharno();
        java.lang.String str67 = node65.getSourceFileName();
        com.google.javascript.rhino.Node node68 = com.google.javascript.jscomp.NodeUtil.newExpr(node65);
        boolean boolean69 = node68.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = null;
        com.google.javascript.rhino.jstype.JSType jSType71 = assertionFunctionSpec46.getAssertedType(node68, jSTypeRegistry70);
        boolean boolean72 = node68.isVarArgs();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        int int76 = node75.getCharno();
        boolean boolean77 = node75.isAssignAdd();
        boolean boolean78 = node75.isNot();
        java.lang.String str79 = node75.toString();
        com.google.javascript.rhino.Node node80 = com.google.javascript.jscomp.NodeUtil.newExpr(node75);
        com.google.javascript.rhino.Node node81 = node68.useSourceInfoIfMissingFromForTree(node75);
        boolean boolean82 = node68.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node38.removeChild(node68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "OR " + "'", str79, "OR ");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        boolean boolean95 = parameterizedType78.isNoResolvedType();
        boolean boolean96 = parameterizedType78.isConstructor();
        com.google.javascript.rhino.jstype.ObjectType.Property property98 = parameterizedType78.getSlot("STRING STRING hi! 100\n\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(property98);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isLabel();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = node17.getLastSibling();
        boolean boolean22 = node21.isDec();
        boolean boolean23 = node21.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node4, node21);
        boolean boolean25 = node4.isParamList();
        boolean boolean26 = node4.isGetterDef();
        boolean boolean27 = node4.isTry();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, 52, 0);
        node4.putIntProp((int) (short) 100, 16);
        boolean boolean34 = node4.isCase();
        boolean boolean35 = node4.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("hi!");
        boolean boolean84 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.getParameterType();
        boolean boolean86 = parameterizedType78.isOrdinaryFunction();
        boolean boolean87 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = parameterizedType78.getOwnPropertyJSDocInfo("InputId: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope90 = parameterizedType78.getParentScope();
        boolean boolean91 = parameterizedType78.isVoidType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSDocInfo89);
        org.junit.Assert.assertNotNull(jSTypeStaticScope90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.FunctionType functionType89 = functionType75.toMaybeFunctionType();
        boolean boolean90 = functionType75.hasReferenceName();
        boolean boolean91 = functionType75.hasImplementedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.union(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet1.union(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet5.union(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet8.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet7.intersection(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet3.union(booleanLiteralSet11);
        boolean boolean14 = booleanLiteralSet12.contains(true);
        boolean boolean16 = booleanLiteralSet12.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.dereference();
        boolean boolean72 = functionType62.isGlobalThisType();
        boolean boolean73 = functionType62.hasImplementedInterfaces();
        boolean boolean74 = functionType62.isObject();
        boolean boolean75 = functionType62.hasReferenceName();
        boolean boolean76 = functionType62.isInterface();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        boolean boolean72 = functionType62.hasImplementedInterfaces();
        boolean boolean73 = functionType62.isNativeObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType((int) '4');
        java.lang.String str76 = functionType75.getReferenceName();
        boolean boolean78 = functionType75.hasOwnProperty("STRING STRING hi! 100\n\n");
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType75.getBindReturnType(36);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(functionType80);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean30 = node29.isVarArgs();
        com.google.javascript.rhino.Node node31 = node2.useSourceInfoIfMissingFrom(node29);
        boolean boolean32 = node29.isSyntheticBlock();
        boolean boolean33 = node29.isParamList();
        com.google.javascript.rhino.Node node34 = node29.removeFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        boolean boolean71 = functionType62.isPropertyTypeDeclared("OR \n");
        int int72 = functionType62.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType.Property property75 = functionType62.getOwnSlot("(())");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNull(property75);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        boolean boolean71 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.jstype.TemplateType templateType72 = functionType62.toMaybeTemplateType();
        com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.getBindReturnType(39);
        boolean boolean76 = functionType62.isPropertyTypeDeclared("STRING hi!");
        boolean boolean77 = functionType62.isBooleanObjectType();
        functionType62.clearCachedValues();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection85 = jSDocInfo80.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = jSDocInfo80.getVisibility();
        java.lang.String str87 = jSDocInfo80.getDescription();
        boolean boolean88 = jSDocInfo80.isConstant();
        functionType62.setPropertyJSDocInfo("(())", jSDocInfo80);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo80.getThisType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(templateType72);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNotNull(nodeCollection85);
        org.junit.Assert.assertNull(visibility86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeExpression90);
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        boolean boolean11 = strSet10.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.isObject();
        boolean boolean97 = enumElementType93.isPropertyTypeDeclared("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        java.lang.String str98 = null; // flaky: enumElementType93.toAnnotationString();
        boolean boolean99 = enumElementType93.isNominalType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Function" + "'", str98, "Function");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = jSTypeExpression23.isOptionalArg();
        boolean boolean25 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.Node node26 = jSTypeExpression23.getRoot();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        boolean boolean32 = node31.isOptionalArg();
        boolean boolean33 = jSTypeExpression23.equals((java.lang.Object) node31);
        boolean boolean34 = node31.isReturn();
        boolean boolean36 = node31.getBooleanProp(36);
        boolean boolean37 = node31.isOr();
        boolean boolean38 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node31);
        int int39 = node31.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        boolean boolean71 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.getParameterType();
        boolean boolean73 = functionType62.isDateType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getAllExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("OR  [is_optional_param: 100]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "(Named type with empty name component)");
        node2.putIntProp(41, 0);
        boolean boolean6 = node2.isVar();
        boolean boolean8 = node2.getBooleanProp((int) (byte) 0);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.setAllFlags();
        sideEffectFlags9.setMutatesThis();
        sideEffectFlags9.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(sideEffectFlags9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        functionType62.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo71);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType74 = functionType62.toMaybeParameterizedType();
        boolean boolean75 = functionType62.isCheckedUnknownType();
        boolean boolean76 = functionType62.matchesUint32Context();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(parameterizedType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.isExpose();
        boolean boolean87 = jSDocInfo85.isExpose();
        boolean boolean88 = jSDocInfo85.hasEnumParameterType();
        java.lang.String str89 = jSDocInfo85.getMeaning();
        boolean boolean90 = jSDocInfo85.isNoShadow();
        boolean boolean91 = jSDocInfo85.isNoShadow();
        java.lang.String str92 = jSDocInfo85.toString();
        parameterizedType78.setJSDocInfo(jSDocInfo85);
        com.google.javascript.rhino.jstype.JSType jSType94 = parameterizedType78.collapseUnion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "JSDocInfo" + "'", str92, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSType94);
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        com.google.javascript.rhino.Node node18 = node17.removeFirstChild();
        boolean boolean19 = node17.isNE();
        node17.setWasEmptyNode(false);
        boolean boolean22 = strSet3.equals((java.lang.Object) node17);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        int int40 = node39.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType23, node33, node39);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType42 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 10, node46, node49, node52, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        int int59 = node58.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship60 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType42, node52, node58);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList61 = com.google.common.collect.ImmutableList.of(subclassRelationship41, subclassRelationship60);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList62 = subclassRelationshipList61.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator63 = subclassRelationshipList62.spliterator();
        java.lang.Object[] objArray64 = subclassRelationshipList62.toArray();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor65 = subclassRelationshipList62.listIterator();
        boolean boolean66 = strSet3.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList62);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship68 = subclassRelationshipList62.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList61);
        org.junit.Assert.assertNotNull(subclassRelationshipList62);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(subclassRelationshipItor65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isNoObjectType();
        boolean boolean69 = functionType62.hasDisplayName();
        boolean boolean70 = functionType62.isUnionType();
        int int71 = functionType62.getMinArguments();
        com.google.javascript.rhino.Node node72 = functionType62.getSource();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        boolean boolean24 = node3.isParamList();
        int int25 = node3.getSourcePosition();
        boolean boolean26 = node3.isFalse();
        boolean boolean27 = node3.isVar();
        java.lang.String str28 = node3.getSourceFileName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node3.getAncestors();
        boolean boolean30 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(ancestorIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        boolean boolean92 = enumType88.hasCachedValues();
        boolean boolean93 = enumType88.isFunctionPrototypeType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        java.lang.String str16 = node6.getString();
        boolean boolean17 = node6.isContinue();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        boolean boolean22 = node20.isAssignAdd();
        node20.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node6, node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isNoCompile();
        boolean boolean30 = jSDocInfo28.containsDeclaration();
        node27.setJSDocInfo(jSDocInfo28);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(24, node27, 15, 4095);
        boolean boolean35 = node27.isFromExterns();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 10, node27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList2 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", (java.lang.CharSequence) "function (this:{1606645486}, {809471043}): {803322743}");
        org.junit.Assert.assertNotNull(charSequenceList2);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.unboxesTo();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable73 = functionType62.getAllExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType(54);
        boolean boolean76 = functionType62.hasImplementedInterfaces();
        boolean boolean78 = functionType62.isPropertyInExterns("{1029918095}");
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot80 = functionType62.getOwnSlot("(((Not declared as a constructor)))");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertNotNull(objectTypeIterable73);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot80);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        node6.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node6.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        java.lang.String str30 = node20.getString();
        boolean boolean31 = node20.isReturn();
        com.google.javascript.rhino.Node node32 = node20.detachFromParent();
        boolean boolean33 = node32.isString();
        com.google.javascript.rhino.Node node34 = node6.clonePropsFrom(node32);
        boolean boolean35 = node6.isInstanceOf();
        int int36 = node6.getChildCount();
        boolean boolean37 = node6.hasOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        int int41 = subclassRelationshipList39.lastIndexOf((java.lang.Object) (byte) 10);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.iterator();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor43 = subclassRelationshipList39.listIterator();
        boolean boolean44 = subclassRelationshipItor43.hasNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(subclassRelationshipItor43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node10.hasOneChild();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType35 = null;
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 10, node39, node42, node45, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        int int52 = node51.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship53 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType35, node45, node51);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType54 = null;
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, node58, node61, node64, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        int int71 = node70.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship72 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType54, node64, node70);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList73 = com.google.common.collect.ImmutableList.of(subclassRelationship53, subclassRelationship72);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList74 = subclassRelationshipList73.asList();
        int int76 = subclassRelationshipList74.lastIndexOf((java.lang.Object) (byte) 10);
        node10.putProp(53, (java.lang.Object) (byte) 10);
        com.google.javascript.rhino.Node node78 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = node10.isEquivalentTo(node78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList73);
        org.junit.Assert.assertNotNull(subclassRelationshipList74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.isDefine();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str11 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean22 = jSDocInfo0.hasParameter("?");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.matchesNumberContext();
        com.google.javascript.rhino.Node node91 = enumType88.getSource();
        boolean boolean92 = enumType88.isNativeObjectType();
        boolean boolean93 = enumType88.isVoidType();
        com.google.javascript.rhino.jstype.EnumType enumType94 = enumType88.toMaybeEnumType();
        boolean boolean96 = enumType88.isPropertyTypeInferred("(OR \n)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(enumType94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType95 = enumType88.getElementsType();
        boolean boolean96 = enumElementType95.matchesObjectContext();
        com.google.javascript.rhino.jstype.FunctionType functionType97 = enumElementType95.getConstructor();
        boolean boolean98 = enumElementType95.hasReferenceName();
        boolean boolean99 = enumElementType95.matchesStringContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNotNull(enumElementType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNull(functionType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getImplicitPrototype();
        boolean boolean70 = objectType69.isUnknownType();
        java.lang.String str71 = objectType69.toString();
        java.lang.String str72 = objectType69.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = objectType69.getConstructor();
        boolean boolean74 = functionType73.hasInstanceType();
        boolean boolean75 = functionType73.isDateType();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) functionType73);
        boolean boolean77 = functionType73.matchesObjectContext();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = functionType73.getTemplateTypeNames();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType79 = functionType73.toMaybeParameterizedType();
        java.lang.String str80 = functionType73.toDebugHashCodeString();
        boolean boolean81 = functionType73.isReturnTypeInferred();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Function" + "'", str71, "Function");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Function" + "'", str72, "Function");
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNull(parameterizedType79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "function (this:{-553454062}, {710870397}): {1870756617}" + "'", str80, "function (this:{-553454062}, {710870397}): {1870756617}");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable72 = functionType62.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.collapseUnion();
        boolean boolean74 = functionType62.isVoidType();
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = functionType62.getTemplateTypeNames();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable76 = functionType62.getAllImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList77 = functionType62.getSubTypes();
        boolean boolean79 = functionType62.hasOwnProperty("STRING OR  [quoted: 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNotNull(objectTypeIterable72);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(objectTypeIterable76);
        org.junit.Assert.assertNull(functionTypeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean87 = functionType75.isBooleanObjectType();
        boolean boolean88 = functionType75.isBooleanValueType();
        boolean boolean89 = functionType75.isConstructor();
        java.util.Set<java.lang.String> strSet90 = functionType75.getPropertyNames();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        int int87 = functionType75.getPropertiesCount();
        boolean boolean88 = functionType75.hasDisplayName();
        boolean boolean90 = functionType75.isPropertyInExterns("Function");
        boolean boolean91 = functionType75.isTemplateType();
        boolean boolean93 = functionType75.hasProperty("OR  [slash_v: 1]");
        com.google.javascript.rhino.jstype.JSType jSType95 = functionType75.findPropertyType("{1696980091}");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(jSType95);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream58 = subclassRelationshipList38.stream();
        java.lang.Object[] objArray59 = subclassRelationshipList38.toArray();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor60 = subclassRelationshipList38.iterator();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = subclassRelationshipItor60.next();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(subclassRelationshipItor60);
        org.junit.Assert.assertNotNull(subclassRelationship61);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableCollection.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>[]> iterableBuilderArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(iterableBuilderArrayBuilder0);
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isTrue();
        boolean boolean3 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node4 = node1.getLastSibling();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getJSDocInfo();
        boolean boolean82 = parameterizedType78.isInterface();
        boolean boolean83 = parameterizedType78.isNominalType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot85 = parameterizedType78.getSlot("(Function)");
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.restrictByNotNullOrUndefined();
        boolean boolean87 = parameterizedType78.hasCachedValues();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot89 = parameterizedType78.getOwnSlot("Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot89);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesStringContext();
        boolean boolean96 = enumElementType93.hasReferenceName();
        boolean boolean97 = enumElementType93.isEnumElementType();
        boolean boolean98 = enumElementType93.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        boolean boolean81 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean84 = parameterizedType78.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable85 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean87 = parameterizedType78.isPropertyInExterns("STRING \n");
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getIndexType();
        boolean boolean90 = parameterizedType78.hasOwnProperty("ERROR 52");
        com.google.javascript.rhino.jstype.ObjectType objectType91 = parameterizedType78.dereference();
        com.google.javascript.rhino.jstype.JSType jSType93 = parameterizedType78.getPropertyType("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        java.lang.Iterable iterable94 = parameterizedType78.getCtorImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertNotNull(iterable94);
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean96 = enumType88.isPropertyInExterns("OR ");
        java.util.Set set97 = enumType88.getOwnPropertyNames();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(set97);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(50, "Not declared as a type name");
        boolean boolean3 = node2.isFalse();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        boolean boolean8 = jSTypeRegistry6.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry6.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        com.google.javascript.rhino.jstype.JSType jSType17 = jSTypeRegistry6.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70, false);
        boolean boolean74 = jSTypeRegistry72.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList76 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList76, jSTypeArray75);
        com.google.javascript.rhino.Node node78 = jSTypeRegistry72.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList76);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry72.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType83.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray85 = new com.google.javascript.rhino.jstype.JSType[] { jSType54, jSType69, jSType84 };
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry26.createFunctionType(jSType40, jSTypeArray85);
        boolean boolean87 = functionType86.matchesNumberContext();
        boolean boolean89 = functionType86.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType90 = jSTypeRegistry21.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType86);
        jSTypeRegistry6.registerPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType90);
        com.google.javascript.rhino.jstype.JSType jSType93 = jSTypeRegistry6.getType("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType98 = jSTypeRegistry6.createNamedType("Node tree inequality:\nTree1:\nTYPEOF Not declared as a constructor 32\n\n\nTree2:\nOR \n\n\nSubtree1: TYPEOF Not declared as a constructor 32\n\n\nSubtree2: OR \n", "{1825430164}", (int) (byte) -1, 8);
        node2.setJSType(jSType98);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSType17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNotNull(jSTypeArray85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectType90);
        org.junit.Assert.assertNull(jSType93);
        org.junit.Assert.assertNotNull(jSType98);
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        boolean boolean16 = node3.isGetterDef();
        boolean boolean17 = node3.isGetProp();
        node3.setSourceEncodedPositionForTree(45);
        boolean boolean20 = node3.isCase();
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToBack(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        int int42 = subclassRelationshipList39.indexOf((java.lang.Object) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.isNoShadow();
        java.lang.String str46 = jSDocInfo43.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean47 = jSDocInfo43.isHidden();
        java.lang.String str48 = jSDocInfo43.toString();
        boolean boolean49 = subclassRelationshipList39.contains((java.lang.Object) str48);
        int int50 = subclassRelationshipList39.size();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor51 = subclassRelationshipList39.iterator();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipItor51.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSDocInfo" + "'", str48, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(subclassRelationshipItor51);
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        boolean boolean15 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = functionType78.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType78.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable85 = functionType78.getCtorExtendedInterfaces();
        boolean boolean86 = functionType78.isInterface();
        java.lang.Iterable iterable87 = functionType78.getCtorExtendedInterfaces();
        boolean boolean89 = functionType78.isPropertyTypeInferred("false");
        com.google.javascript.rhino.jstype.JSType jSType90 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType91 = jSTypeRegistry2.createFunctionTypeWithNewReturnType(functionType78, jSType90);
        com.google.javascript.rhino.jstype.StaticSlot staticSlot93 = functionType78.getSlot("");
        boolean boolean94 = functionType78.isStringObjectType();
        int int95 = functionType78.getMaxArguments();
        com.google.javascript.rhino.jstype.JSType jSType97 = functionType78.getPropertyType("(OR  [is_optional_param: 100])");
        com.google.javascript.rhino.jstype.FunctionType functionType98 = functionType78.getOwnerFunction();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable99 = functionType98.getImplementedInterfaces();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectTypeIterable85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(iterable87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(functionType91);
        org.junit.Assert.assertNull(staticSlot93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertNotNull(jSType97);
        org.junit.Assert.assertNull(functionType98);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("((OR  [directives: [, Not declared as a constructor]]))", jSTypeNative1);
        java.lang.String str3 = assertionFunctionSpec2.getFunctionName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "((OR  [directives: [, Not declared as a constructor]]))" + "'", str3, "((OR  [directives: [, Not declared as a constructor]]))");
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isReturn();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, node16);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node16, "(Not declared as a constructor)");
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = node16.useSourceInfoFrom(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = parameterizedType78.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nBITXOR 0\n    OR \n    OR \n\n\nTree2:\nSTRING hi! 100 [empty_block: 1]\n\n\nSubtree1: BITXOR 0\n    OR \n    OR \n\n\nSubtree2: STRING hi! 100 [empty_block: 1]\n");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType88 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean89 = parameterizedType78.canBeCalled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertNotNull(parameterizedType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream59 = subclassRelationshipList38.parallelStream();
        java.lang.Object[] objArray60 = subclassRelationshipList38.toArray();
        int int61 = subclassRelationshipList38.size();
        java.lang.Object[] objArray62 = subclassRelationshipList38.toArray();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList63 = subclassRelationshipList38.asList();
        java.lang.Object obj64 = null;
        int int65 = subclassRelationshipList63.lastIndexOf(obj64);
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList63.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(subclassRelationshipList63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean24 = node23.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node23, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = node36.getLastSibling();
        com.google.javascript.rhino.Node node41 = node40.removeFirstChild();
        boolean boolean42 = node40.isNE();
        node40.putIntProp(50, 40);
        boolean boolean46 = node40.isAdd();
        com.google.javascript.rhino.InputId inputId47 = node40.getInputId();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.rhino.jstype.JSType jSType49 = assertionFunctionSpec1.getAssertedType(node40, jSTypeRegistry48);
        boolean boolean50 = node40.isFalse();
        boolean boolean51 = node40.isNot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isTrue();
        node1.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node30 = node26.getLastSibling();
        boolean boolean31 = node30.isDec();
        com.google.javascript.rhino.Node node32 = node7.copyInformationFrom(node30);
        node32.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node35 = node1.useSourceInfoFrom(node32);
        int int37 = node32.getIntProp(0);
        boolean boolean38 = node32.isArrayLit();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node32.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder39);
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        boolean boolean60 = subclassRelationshipList38.contains((java.lang.Object) 40);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream61 = subclassRelationshipList38.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str63 = jSDocInfo62.getVersion();
        java.lang.String str64 = jSDocInfo62.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection67 = jSDocInfo62.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = jSDocInfo62.getVisibility();
        boolean boolean69 = jSDocInfo62.isDeprecated();
        int int70 = subclassRelationshipList38.indexOf((java.lang.Object) jSDocInfo62);
        boolean boolean71 = subclassRelationshipList38.isEmpty();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream72 = subclassRelationshipList38.stream();
        int int73 = subclassRelationshipList38.size();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator74 = subclassRelationshipList38.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipStream61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertNotNull(nodeCollection67);
        org.junit.Assert.assertNull(visibility68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator74);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getEnumParameterType();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("(OR  0)");
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isInstanceOf();
        boolean boolean37 = node28.isInstanceOf();
        boolean boolean38 = node28.isTypeOf();
        int int39 = node28.getSourcePosition();
        boolean boolean40 = node28.isString();
        com.google.javascript.rhino.Node node41 = node28.getFirstChild();
        boolean boolean42 = node28.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        boolean boolean73 = functionType72.isReturnTypeInferred();
        boolean boolean74 = functionType72.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType72.toMaybeFunctionType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(functionType75);
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        java.lang.String str69 = null; // flaky: functionType62.toAnnotationString();
        boolean boolean70 = functionType62.isNominalType();
        int int71 = functionType62.getMinArguments();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.StaticSlot staticSlot74 = functionType62.getSlot("unknown");
        java.util.Set<java.lang.String> strSet75 = functionType62.getOwnPropertyNames();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Function" + "'", str69, "Function");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNull(staticSlot74);
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node6 = namePosition5.getItem();
        namePosition5.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList12 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition5);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        boolean boolean17 = node15.isAssignAdd();
        boolean boolean18 = node15.isNot();
        java.lang.String str19 = node15.toString();
        namePosition5.setItem(node15);
        node15.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node23 = node3.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node36.getStaticSourceFile();
        node23.addChildrenToBack(node36);
        boolean boolean39 = node23.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(nodeSourcePositionList12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR " + "'", str19, "OR ");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("");
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(markerCollection9);
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        boolean boolean49 = jSTypeRegistry47.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry47.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry47.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSType58.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60, false);
        boolean boolean64 = jSTypeRegistry62.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry62.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry62.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSType73.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] { jSType44, jSType59, jSType74 };
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry16.createFunctionType(jSType30, jSTypeArray75);
        boolean boolean77 = functionType76.matchesNumberContext();
        boolean boolean79 = functionType76.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable80 = functionType76.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType81 = functionType76.dereference();
        boolean boolean82 = functionType76.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType76.getReturnType();
        boolean boolean84 = functionType76.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType85 = functionType76.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType86 = functionType76.toMaybeFunctionType();
        java.lang.Iterable iterable87 = functionType76.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node89 = functionType76.getPropertyNode("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        node3.setJSType((com.google.javascript.rhino.jstype.JSType) functionType76);
        java.util.Set<java.lang.String> strSet91 = functionType76.getOwnPropertyNames();
        java.util.Iterator<java.lang.String> strItor92 = strSet91.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable80);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertNotNull(iterable87);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strItor92);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.isStringValueType();
        java.lang.String str72 = functionType62.getDisplayName();
        boolean boolean73 = functionType62.isStringObjectType();
        boolean boolean74 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType75 = functionType62.unboxesTo();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSType75);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        boolean boolean3 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isObjectLit();
        boolean boolean21 = node10.isBreak();
        boolean boolean22 = node10.isLabel();
        boolean boolean23 = node10.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.hasAnyTemplateInternal();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.unboxesTo();
        boolean boolean72 = functionType62.isInstanceType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType74 = functionType62.getImplicitPrototype();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertNotNull(objectType74);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a type name");
        int int65 = functionType62.getPropertiesCount();
        boolean boolean66 = functionType62.matchesObjectContext();
        boolean boolean67 = functionType62.isTemplateType();
        com.google.javascript.rhino.jstype.ObjectType.Property property69 = functionType62.getSlot("GETELEM false");
        com.google.javascript.rhino.jstype.ObjectType.Property property71 = functionType62.getSlot("Unknown");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNull(objectType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(property69);
        org.junit.Assert.assertNull(property71);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        boolean boolean97 = enumType88.hasProperty("OR  [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        int int19 = node1.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 1, "InputId: hi!");
        com.google.javascript.rhino.Node node23 = node1.srcrefTree(node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node1.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(jSDocInfo24);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getParametersNode();
        java.util.Set<java.lang.String> strSet72 = functionType62.getOwnPropertyNames();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable73 = functionType62.getAllImplementedInterfaces();
        boolean boolean74 = functionType62.hasCachedValues();
        boolean boolean75 = functionType62.isParameterizedType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(objectTypeIterable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNativeObjectType();
        int int81 = parameterizedType78.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean83 = parameterizedType78.isAllType();
        boolean boolean84 = parameterizedType78.isAllType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        boolean boolean33 = node31.isOr();
        node31.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node37 = node31.getAncestor(2);
        java.lang.String str38 = node16.checkTreeEquals(node31);
        boolean boolean39 = node31.isInstanceOf();
        com.google.javascript.rhino.Node node40 = node31.detachFromParent();
        com.google.javascript.rhino.Node node41 = assertionFunctionSpec1.getAssertedParam(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node55 = node51.getLastSibling();
        boolean boolean56 = node55.isDec();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 10, node60, node63, node66, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node70 = node66.getLastSibling();
        boolean boolean71 = node70.isDec();
        boolean boolean72 = node70.isOr();
        node70.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node76 = node70.getAncestor(2);
        java.lang.String str77 = node55.checkTreeEquals(node70);
        boolean boolean78 = node70.isAssign();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node81 = node70.clonePropsFrom(node80);
        boolean boolean82 = node81.isLocalResultCall();
        node81.setIsSyntheticBlock(false);
        node81.setQuotedString();
        boolean boolean86 = node81.isNew();
        com.google.javascript.rhino.Node node87 = node40.srcrefTree(node81);
        node87.setQuotedString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection89 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node87);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(Not declared as a constructor)" + "'", str2, "(Not declared as a constructor)");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(nodeCollection89);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        boolean boolean16 = node3.isGetterDef();
        boolean boolean17 = node3.isDelProp();
        int int18 = node3.getSideEffectFlags();
        boolean boolean19 = node3.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream58 = subclassRelationshipList38.stream();
        java.lang.Object[] objArray59 = subclassRelationshipList38.toArray();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor60 = subclassRelationshipList38.iterator();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList38.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(subclassRelationshipItor60);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isAllType();
        com.google.javascript.rhino.jstype.ObjectType objectType82 = parameterizedType78.getImplicitPrototype();
        boolean boolean84 = parameterizedType78.hasProperty("OR ");
        com.google.javascript.rhino.jstype.ObjectType.Property property86 = parameterizedType78.getSlot("OR  [quoted: 1]");
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.getParameterType();
        boolean boolean88 = parameterizedType78.matchesObjectContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(property86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isNoShadow();
        boolean boolean38 = jSDocInfo36.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo36.getReturnType();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo36.getModifies();
        node35.setDirectives(strSet40);
        strSet40.clear();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(50, "Not declared as a type name");
        boolean boolean3 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node2);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        boolean boolean5 = node2.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType7 = jSTypeRegistry2.getType("hi!");
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = functionType71.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType71.getAllImplementedInterfaces();
        int int78 = functionType71.getExtendedInterfacesCount();
        boolean boolean79 = functionType71.isFunctionType();
        boolean boolean80 = functionType71.matchesObjectContext();
        com.google.javascript.rhino.jstype.TemplateType templateType81 = functionType71.toMaybeTemplateType();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = functionType71.getBindReturnType(39);
        boolean boolean85 = functionType83.isPropertyTypeInferred("OR  [directives: [, Not declared as a constructor]]");
        com.google.javascript.rhino.jstype.FunctionType functionType86 = functionType83.toMaybeFunctionType();
        boolean boolean87 = functionType86.isNativeObjectType();
        boolean boolean88 = functionType86.isInstanceType();
        boolean boolean90 = jSTypeRegistry2.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType86, "OR 10");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(templateType81);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        boolean boolean75 = functionType62.removeProperty("hi!");
        boolean boolean77 = functionType62.isPropertyTypeInferred("Unknown class name");
        com.google.javascript.rhino.jstype.JSType jSType78 = functionType62.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.FunctionType functionType79 = functionType62.getOwnerFunction();
        com.google.javascript.rhino.Node node81 = functionType62.getPropertyNode("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean82 = functionType62.matchesStringContext();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList83 = com.google.common.collect.ImmutableList.of();
        // The following exception was thrown during execution in test generation
        try {
            functionType62.setExtendedInterfaces((java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList83);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectTypeList83);
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) ' ', nodeArray15, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(37, node18, 35, (int) ' ');
        com.google.javascript.rhino.InputId inputId22 = com.google.javascript.jscomp.NodeUtil.getInputId(node21);
        java.lang.Object obj24 = node21.getProp((int) (byte) 10);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.dereference();
        boolean boolean72 = functionType62.isNominalType();
        boolean boolean74 = functionType62.isPropertyTypeDeclared("Function");
        boolean boolean75 = functionType62.isObject();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType77 = functionType62.getTopMostDefiningType("Unknown class name");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("OR \n", throwable2);
        java.io.IOException iOException4 = new java.io.IOException(throwable2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("OR \n", throwable8);
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException("OR \n", throwable11);
        java.lang.Throwable throwable14 = null;
        java.io.IOException iOException15 = new java.io.IOException("OR \n", throwable14);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList16 = com.google.common.collect.ImmutableList.of(iOException9, iOException12, iOException15);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException19 = new java.io.IOException("(Not declared as a constructor)");
        java.lang.Throwable throwable21 = null;
        java.io.IOException iOException22 = new java.io.IOException("OR \n", throwable21);
        java.io.IOException iOException23 = new java.io.IOException(throwable21);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.lang.Throwable throwable27 = null;
        java.io.IOException iOException28 = new java.io.IOException("OR \n", throwable27);
        java.io.IOException iOException29 = new java.io.IOException(throwable27);
        java.lang.Throwable[] throwableArray30 = iOException29.getSuppressed();
        java.io.IOException iOException32 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.lang.Exception> exceptionList33 = com.google.common.collect.ImmutableList.of((java.lang.Exception) iOException32);
        java.lang.Throwable[] throwableArray34 = iOException32.getSuppressed();
        java.io.IOException iOException35 = new java.io.IOException("", (java.lang.Throwable) iOException32);
        java.lang.Throwable throwable37 = null;
        java.io.IOException iOException38 = new java.io.IOException("OR \n", throwable37);
        java.lang.Throwable throwable40 = null;
        java.io.IOException iOException41 = new java.io.IOException("OR \n", throwable40);
        java.lang.Throwable throwable43 = null;
        java.io.IOException iOException44 = new java.io.IOException("OR \n", throwable43);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList45 = com.google.common.collect.ImmutableList.of(iOException38, iOException41, iOException44);
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException44);
        java.lang.Throwable throwable48 = null;
        java.io.IOException iOException49 = new java.io.IOException("OR \n", throwable48);
        java.io.IOException iOException50 = new java.io.IOException(throwable48);
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.lang.Throwable throwable54 = null;
        java.io.IOException iOException55 = new java.io.IOException("OR \n", throwable54);
        java.lang.Throwable throwable57 = null;
        java.io.IOException iOException58 = new java.io.IOException("OR \n", throwable57);
        java.lang.Throwable throwable60 = null;
        java.io.IOException iOException61 = new java.io.IOException("OR \n", throwable60);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList62 = com.google.common.collect.ImmutableList.of(iOException55, iOException58, iOException61);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList63 = com.google.common.collect.ImmutableList.of(iOException6, iOException15, iOException19, iOException24, iOException29, iOException35, iOException46, iOException50, iOException55);
        java.io.IOException iOException64 = new java.io.IOException("", (java.lang.Throwable) iOException35);
        java.io.IOException iOException65 = new java.io.IOException((java.lang.Throwable) iOException64);
        org.junit.Assert.assertNotNull(iOExceptionList16);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(exceptionList33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(iOExceptionList45);
        org.junit.Assert.assertNotNull(iOExceptionList62);
        org.junit.Assert.assertNotNull(iOExceptionList63);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getParametersNode();
        functionType62.clearCachedValues();
        boolean boolean73 = functionType62.matchesNumberContext();
        boolean boolean74 = functionType62.isRecordType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        com.google.javascript.rhino.jstype.FunctionType functionType94 = enumType88.getOwnerFunction();
        com.google.javascript.rhino.Node node96 = enumType88.getPropertyNode("java.io.IOException: java.io.IOException");
        boolean boolean97 = enumType88.isNativeObjectType();
        boolean boolean99 = enumType88.hasProperty("(OR  0)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(functionType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType8, node18, node24);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType27, node37, node43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = com.google.common.collect.ImmutableList.of(subclassRelationship26, subclassRelationship45);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList47 = subclassRelationshipList46.asList();
        boolean boolean49 = subclassRelationshipList47.contains((java.lang.Object) 12);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator50 = subclassRelationshipList47.spliterator();
        boolean boolean51 = strSet7.removeAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList47);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType52 = null;
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, node56, node59, node62, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        int int69 = node68.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship70 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType52, node62, node68);
        boolean boolean71 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node62);
        boolean boolean72 = node62.isDo();
        boolean boolean73 = node62.isScript();
        boolean boolean74 = subclassRelationshipList47.equals((java.lang.Object) boolean73);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream75 = subclassRelationshipList47.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship77 = subclassRelationshipList47.get(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (54) must be less than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(subclassRelationshipList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipStream75);
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable95 = enumType88.getCtorExtendedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNotNull(objectTypeIterable95);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        jSDocInfo0.setLicense("(OR  [is_optional_param: 100])");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        jSTypeRegistry2.clearNamedTypes();
        jSTypeRegistry2.clearTemplateTypeNames();
        jSTypeRegistry2.identifyNonNullableName("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable14 = jSTypeRegistry12.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable16 = jSTypeRegistry12.getEachReferenceTypeWithProperty("Not declared as a type name");
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry12.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        int int29 = node27.getIntProp(49);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean32 = node31.isVarArgs();
        node31.setLineno(16);
        node31.setSourceEncodedPositionForTree(53);
        boolean boolean37 = node31.isSyntheticBlock();
        com.google.javascript.rhino.InputId inputId39 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str40 = inputId39.getIdName();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType42 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        int int46 = node45.getCharno();
        java.lang.String str47 = node45.getSourceFileName();
        boolean boolean48 = node45.isLabel();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node62 = node58.getLastSibling();
        boolean boolean63 = node62.isDec();
        boolean boolean64 = node62.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship65 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType42, node45, node62);
        boolean boolean66 = node45.isParamList();
        boolean boolean67 = node45.isGetterDef();
        boolean boolean68 = node45.isTry();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, 52, 0);
        boolean boolean72 = node71.isAnd();
        boolean boolean73 = inputId39.equals((java.lang.Object) boolean72);
        node31.setInputId(inputId39);
        node27.setInputId(inputId39);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable14);
        org.junit.Assert.assertNotNull(objectTypeIterable16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator10 = nodeCollection9.spliterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        node3.setOptionalArg(false);
        boolean boolean16 = node3.isHook();
        java.util.Set<java.lang.String> strSet17 = node3.getDirectives();
        boolean boolean18 = node3.isNull();
        boolean boolean19 = node3.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 1, (int) (short) 100, 31);
        boolean boolean4 = node3.isInstanceOf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("java.io.IOException: java.io.IOException: java.io.IOException: (Not declared as a constructor)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(java.io.IOException: java.io.IOException: java.io.IOException: (Not declared as a constructor))" + "'", str1, "(java.io.IOException: java.io.IOException: java.io.IOException: (Not declared as a constructor))");
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertNull(visibility4);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.hasReturnType();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean8 = jSDocInfo0.isHidden();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray10 = strSet9.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str60 = ternaryValue59.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str62 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue59.or(ternaryValue61);
        boolean boolean64 = subclassRelationshipList38.contains((java.lang.Object) ternaryValue59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.union(booleanLiteralSet66);
        boolean boolean68 = subclassRelationshipList38.contains((java.lang.Object) booleanLiteralSet65);
        boolean boolean69 = subclassRelationshipList38.isEmpty();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, node78, node81, node84, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node88 = node84.getLastSibling();
        boolean boolean89 = node88.isGetterDef();
        boolean boolean90 = node88.isSyntheticBlock();
        boolean boolean91 = strSet73.remove((java.lang.Object) boolean90);
        java.util.Iterator<java.lang.String> strItor92 = strSet73.iterator();
        int int93 = subclassRelationshipList38.indexOf((java.lang.Object) strSet73);
        java.lang.Object[] objArray94 = subclassRelationshipList38.toArray();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "false" + "'", str60, "false");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "false" + "'", str62, "false");
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(objArray94);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker3.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker3.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker6 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker6.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker6.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker6.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker6.getDescription();
        com.google.javascript.rhino.InputId inputId12 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        java.lang.String str13 = inputId12.toString();
        com.google.javascript.rhino.JSDocInfo.Marker marker14 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker14.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = marker14.getType();
        boolean boolean17 = inputId12.equals((java.lang.Object) marker14);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList18 = com.google.common.collect.ImmutableList.of(marker0, marker3, marker6, marker14);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker3.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition7);
        org.junit.Assert.assertNull(nodeSourcePosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "InputId: Not declared as a constructor" + "'", str13, "InputId: Not declared as a constructor");
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(typePosition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(markerList18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node12.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind37 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node34, node36);
        node34.setType((int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        java.lang.String str53 = node43.getString();
        boolean boolean54 = node43.isReturn();
        com.google.javascript.rhino.Node node55 = node43.detachFromParent();
        boolean boolean56 = node55.isString();
        node34.addChildrenToBack(node55);
        java.lang.String str58 = node55.getQualifiedName();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        int int62 = node61.getCharno();
        java.lang.String str63 = node61.getSourceFileName();
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean65 = node61.isComma();
        com.google.javascript.rhino.Node node66 = node55.useSourceInfoFrom(node61);
        node55.setLength(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        com.google.javascript.rhino.jstype.ObjectType.Property property96 = enumElementType93.getSlot("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType98 = enumElementType93.toMaybeEnumElementType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(property96);
        org.junit.Assert.assertNotNull(enumElementType97);
        org.junit.Assert.assertNotNull(enumElementType98);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.isEnumElementType();
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.getPropertyType("(Not declared as a constructor)");
        com.google.javascript.rhino.Node node73 = functionType62.getParametersNode();
        boolean boolean74 = functionType62.isInstanceType();
        boolean boolean75 = functionType62.isString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isExprResult();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        boolean boolean10 = node8.isAssignAdd();
        boolean boolean11 = node8.isNot();
        java.lang.String str12 = node8.toString();
        boolean boolean13 = node8.isVarArgs();
        boolean boolean14 = node2.isEquivalentToTyped(node8);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDebugger();
        boolean boolean30 = node28.isNull();
        com.google.javascript.rhino.Node node31 = node2.clonePropsFrom(node28);
        node28.setType(51);
        java.lang.String str34 = com.google.javascript.jscomp.NodeUtil.getSourceName(node28);
        boolean boolean35 = node28.isWith();
        boolean boolean36 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node28);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR " + "'", str12, "OR ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        boolean boolean69 = functionType62.isDateType();
        boolean boolean70 = functionType62.isNumberValueType();
        boolean boolean72 = functionType62.isPropertyTypeInferred("Unknown class name");
        com.google.javascript.rhino.jstype.FunctionType functionType73 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType(24);
        boolean boolean76 = functionType75.isRegexpType();
        boolean boolean77 = functionType75.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.hasAnyTemplateInternal();
        java.lang.String str72 = functionType62.getDisplayName();
        boolean boolean73 = functionType62.isBooleanObjectType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((-1));
        boolean boolean2 = node1.isTypeOf();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        boolean boolean33 = node31.isOr();
        node31.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node37 = node31.getAncestor(2);
        java.lang.String str38 = node16.checkTreeEquals(node31);
        boolean boolean39 = node31.isAssign();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node42 = node31.clonePropsFrom(node41);
        node42.setSourceEncodedPositionForTree(2);
        com.google.javascript.rhino.Node node45 = node1.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable46 = node42.getAncestors();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node61 };
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) ' ', nodeArray62, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(37, node65, 35, (int) ' ');
        boolean boolean69 = node65.isIf();
        boolean boolean70 = node65.isCatch();
        com.google.javascript.rhino.Node node71 = node42.copyInformationFromForTree(node65);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(ancestorIterable46);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.lang.String str5 = jSDocInfo0.getLendsName();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean9 = jSDocInfo0.hasParameterType("STRING hi! 100");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        boolean boolean16 = node14.isOr();
        node14.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node19 = node14.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node29.getLastSibling();
        boolean boolean34 = node33.isDec();
        boolean boolean35 = node33.isOr();
        node33.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node38 = node33.cloneTree();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(50, node19, node38);
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.hasChildren();
        node39.putProp(37, (java.lang.Object) boolean47);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node39);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        java.lang.String str63 = node53.getString();
        node53.setOptionalArg(false);
        boolean boolean66 = node53.isTypeOf();
        int int67 = node53.getSideEffectFlags();
        boolean boolean68 = node53.isWith();
        com.google.javascript.rhino.Node node69 = node39.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 10, node73, node76, node79, 0, (int) (byte) 1);
        java.lang.String str83 = node73.getString();
        boolean boolean84 = node73.isContinue();
        boolean boolean85 = node73.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = null;
        node73.setStaticSourceFile(staticSourceFile86);
        java.lang.Object obj89 = node73.getProp(37);
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean93 = node92.isFunction();
        node73.addChildToFront(node92);
        java.lang.String str95 = com.google.javascript.jscomp.NodeUtil.getSourceName(node92);
        com.google.javascript.rhino.jstype.JSType jSType96 = node92.getJSType();
        boolean boolean97 = node69.isEquivalentTo(node92);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 10, node17, node20, node23, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node27 = node23.getLastSibling();
        boolean boolean28 = node27.isGetterDef();
        boolean boolean29 = node27.isSyntheticBlock();
        boolean boolean30 = node27.isNE();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFromForTree(node27);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType32 = null;
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, node36, node39, node42, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        int int49 = node48.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship50 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType32, node42, node48);
        boolean boolean51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node42);
        boolean boolean52 = node42.isDo();
        boolean boolean53 = node42.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node42, "false");
        boolean boolean56 = node42.isIf();
        boolean boolean57 = node42.isLabelName();
        com.google.javascript.rhino.InputId inputId58 = node42.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = node42.getJSDocInfo();
        com.google.javascript.rhino.Node node60 = node13.srcref(node42);
        com.google.javascript.rhino.Node node62 = node42.getAncestor(23);
        node42.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(inputId58);
        org.junit.Assert.assertNull(jSDocInfo59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isObjectLit();
        boolean boolean21 = node10.isBreak();
        node10.setSourceEncodedPositionForTree(0);
        node10.setWasEmptyNode(true);
        boolean boolean26 = node10.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node3.setStaticSourceFile(staticSourceFile16);
        java.lang.Object obj19 = node3.getProp(37);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.isFunction();
        node3.addChildToFront(node22);
        boolean boolean25 = node3.hasOneChild();
        boolean boolean26 = node3.isVarArgs();
        boolean boolean27 = node3.isComma();
        boolean boolean28 = node3.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.hasAnyTemplateInternal();
        java.lang.String str72 = functionType62.getDisplayName();
        boolean boolean74 = functionType62.isPropertyInExterns("{1318687222}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean30 = node29.isVarArgs();
        com.google.javascript.rhino.Node node31 = node2.useSourceInfoIfMissingFrom(node29);
        boolean boolean32 = node29.isSyntheticBlock();
        int int33 = node29.getCharno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node29.getJSDocInfo();
        boolean boolean35 = node29.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType68.autobox();
        boolean boolean81 = functionType68.hasOwnProperty("({1029918095})");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.isStringValueType();
        java.lang.String str72 = functionType62.getDisplayName();
        com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.getBindReturnType((int) (short) 1);
        boolean boolean75 = functionType62.isParameterizedType();
        boolean boolean76 = functionType62.isConstructor();
        boolean boolean77 = functionType62.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType78 = functionType62.getTypeOfThis();
        boolean boolean79 = functionType62.isTemplateType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = functionType62.getOwnPropertyJSDocInfo("STRING hi! 100\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo81);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo0.getModifies();
        int int20 = jSDocInfo0.getParameterCount();
        boolean boolean21 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.isExpose();
        boolean boolean24 = jSDocInfo22.isExpose();
        java.lang.String str25 = jSDocInfo22.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo22.getType();
        boolean boolean27 = jSDocInfo22.isOverride();
        boolean boolean28 = jSDocInfo22.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.isExpose();
        boolean boolean31 = jSDocInfo29.isExpose();
        boolean boolean32 = jSDocInfo29.hasEnumParameterType();
        java.lang.String str33 = jSDocInfo29.getMeaning();
        boolean boolean34 = jSDocInfo29.isNoShadow();
        boolean boolean35 = jSDocInfo29.isNoShadow();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean39 = node38.isName();
        com.google.javascript.rhino.Node node41 = node38.getAncestor(31);
        java.util.Set<java.lang.String> strSet42 = node38.getDirectives();
        jSDocInfo29.setAssociatedNode(node38);
        boolean boolean44 = jSDocInfo29.isConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = jSDocInfo45.getTemplateTypeNames();
        boolean boolean47 = jSDocInfo45.isOverride();
        boolean boolean49 = jSDocInfo45.hasParameter("OR  0");
        boolean boolean50 = jSDocInfo45.isConstructor();
        java.lang.String str51 = jSDocInfo45.getMeaning();
        java.lang.String str52 = jSDocInfo45.getLicense();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str54 = jSDocInfo53.getVersion();
        boolean boolean55 = jSDocInfo53.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo53.setVisibility(visibility56);
        jSDocInfo45.setVisibility(visibility56);
        jSDocInfo29.setVisibility(visibility56);
        jSDocInfo22.setVisibility(visibility56);
        jSDocInfo0.setVisibility(visibility56);
        boolean boolean63 = jSDocInfo0.hasParameterType("STRING hi! 100\n");
        boolean boolean64 = jSDocInfo0.isOverride();
        java.lang.String str65 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + visibility56 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility56.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumType88.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nSTRING OR \n\n\nTree2:\nOR  0\n    OR  [synthetic: 1]\n\n\nSubtree1: STRING OR \n\n\nSubtree2: OR  0\n    OR  [synthetic: 1]\n");
        boolean boolean97 = enumType88.isNativeObjectType();
        java.lang.Iterable iterable98 = enumType88.getCtorExtendedInterfaces();
        boolean boolean99 = enumType88.matchesObjectContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(jSDocInfo96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(iterable98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.rhino.Node node58 = node56.cloneTree();
        boolean boolean59 = node58.isNull();
        boolean boolean60 = node58.isStringKey();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean63 = node62.isVarArgs();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 10, node67, node70, node73, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node77 = node73.getLastSibling();
        boolean boolean78 = node77.isLocalResultCall();
        com.google.javascript.rhino.Node node79 = node62.useSourceInfoIfMissingFrom(node77);
        int int80 = node62.getLineno();
        boolean boolean81 = node62.isNE();
        com.google.javascript.rhino.Node node82 = node58.srcrefTree(node62);
        boolean boolean83 = node82.isDelProp();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(32, 44, 0);
        node82.addChildrenToBack(node87);
        com.google.javascript.rhino.Node node89 = node82.getFirstChild();
        com.google.javascript.rhino.Node node90 = node82.getLastChild();
        boolean boolean91 = node90.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getReturnType();
        boolean boolean4 = jSDocInfo0.isInterface();
        int int5 = jSDocInfo0.getParameterCount();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isVarArgs();
        boolean boolean8 = node2.isSetterDef();
        boolean boolean9 = node2.isEmpty();
        boolean boolean10 = node2.isLabelName();
        java.lang.String str11 = com.google.javascript.jscomp.NodeUtil.getSourceName(node2);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.isConstructor();
        boolean boolean10 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.hasParameter("OR  0");
        boolean boolean5 = jSDocInfo0.isConstructor();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("((Not declared as a constructor))");
        boolean boolean9 = jSDocInfo0.isHidden();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        boolean boolean11 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType93.findPropertyType("(OR  0)");
        boolean boolean97 = enumElementType93.isObject();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        boolean boolean95 = enumElementType93.matchesObjectContext();
        boolean boolean97 = enumElementType93.isPropertyTypeInferred("(?)");
        com.google.javascript.rhino.jstype.ObjectType objectType98 = enumElementType93.dereference();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(objectType98);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.hasParameterType("");
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        boolean boolean12 = jSDocInfo0.hasParameterType("((OR  [directives: [, Not declared as a constructor]]))");
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node20 = node16.getAncestor((int) (short) 10);
        boolean boolean21 = node16.isQualifiedName();
        boolean boolean22 = node16.isNoSideEffectsCall();
        boolean boolean23 = node16.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node25 = node16.getAncestor((int) (short) 1);
        boolean boolean26 = node16.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumType88.isNativeObjectType();
        java.lang.String str95 = enumType88.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertNull(jSDocInfo90);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str95, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.common.collect.ImmutableList<java.lang.String> strList89 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList89);
        com.google.javascript.rhino.jstype.ObjectType objectType91 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType92 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = jSTypeRegistry2.createAnonymousObjectType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable95 = jSTypeRegistry2.getTypesWithProperty("(java.io.IOException)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(objectType92);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(jSTypeIterable95);
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = parameterizedType78.toMaybeFunctionType();
        boolean boolean82 = parameterizedType78.isNullable();
        java.lang.Iterable iterable83 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean84 = parameterizedType78.isVoidType();
        java.lang.String str85 = parameterizedType78.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = parameterizedType78.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(iterable83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        java.util.Set set80 = parameterizedType78.getOwnPropertyNames();
        boolean boolean81 = parameterizedType78.isNullable();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType84 = parameterizedType78.autoboxesTo();
        com.google.javascript.rhino.jstype.UnionType unionType85 = parameterizedType78.toMaybeUnionType();
        boolean boolean86 = parameterizedType78.isNativeObjectType();
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.getParameterType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertNotNull(set80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNull(unionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSType87);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.Node node70 = objectType69.getRootNode();
        boolean boolean71 = objectType69.isRegexpType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType72 = objectType69.toMaybeParameterizedType();
        boolean boolean73 = objectType69.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.TemplateType templateType74 = objectType69.toMaybeTemplateType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = templateType74.getPossibleToBooleanOutcomes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(parameterizedType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(templateType74);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        boolean boolean11 = jSDocInfo0.isNoTypeCheck();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        boolean boolean13 = jSDocInfo0.isExport();
        java.lang.String str14 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        node3.setIsSyntheticBlock(true);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        boolean boolean25 = jSTypeRegistry23.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry23.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry23.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        boolean boolean39 = jSTypeRegistry37.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry37.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry37.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49, false);
        boolean boolean53 = jSTypeRegistry51.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry51.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType63 = jSType62.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64, false);
        boolean boolean68 = jSTypeRegistry66.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList70 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList70, jSTypeArray69);
        com.google.javascript.rhino.Node node72 = jSTypeRegistry66.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList70);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry66.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSType77.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] { jSType48, jSType63, jSType78 };
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry20.createFunctionType(jSType34, jSTypeArray79);
        boolean boolean81 = functionType80.matchesNumberContext();
        boolean boolean83 = functionType80.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope84 = functionType80.getParentScope();
        boolean boolean85 = functionType80.isRegexpType();
        boolean boolean87 = functionType80.hasProperty("false");
        boolean boolean88 = functionType80.matchesObjectContext();
        boolean boolean89 = functionType80.isNativeObjectType();
        com.google.javascript.rhino.Node node91 = functionType80.getPropertyNode("(OR  [directives: [, Not declared as a constructor]])");
        node3.setJSType((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean93 = functionType80.isResolved();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node3.setStaticSourceFile(staticSourceFile16);
        java.lang.Object obj19 = node3.getProp(37);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.isFunction();
        node3.addChildToFront(node22);
        java.lang.String str25 = com.google.javascript.jscomp.NodeUtil.getSourceName(node22);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder26 = node22.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean29 = node28.isTrue();
        node28.setQuotedString();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDec();
        com.google.javascript.rhino.Node node59 = node34.copyInformationFrom(node57);
        node59.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node62 = node28.useSourceInfoFrom(node59);
        boolean boolean63 = node62.isCase();
        com.google.javascript.rhino.Node node64 = node22.useSourceInfoIfMissingFromForTree(node62);
        node64.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.InputId inputId14 = com.google.javascript.jscomp.NodeUtil.getInputId(node9);
        int int15 = node9.getLineno();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        java.lang.String str29 = node19.getString();
        node19.setLineno(4);
        java.lang.Object obj33 = node19.getProp((int) (short) 1);
        boolean boolean34 = node19.isAssign();
        com.google.javascript.rhino.Node node35 = node9.copyInformationFromForTree(node19);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean26 = jSTypeExpression23.equals((java.lang.Object) stringPosition25);
        int int27 = stringPosition25.getStartLine();
        int int28 = stringPosition25.getStartLine();
        int int29 = stringPosition25.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isDebugger();
        com.google.javascript.rhino.Node node55 = node39.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node57 = node53.getAncestor(45);
        boolean boolean58 = node53.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        int int6 = node5.getCharno();
        boolean boolean7 = node5.isExprResult();
        int int8 = node5.getChildCount();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        int int12 = node11.getCharno();
        boolean boolean13 = node11.isAssignAdd();
        boolean boolean14 = node11.isNot();
        java.lang.String str15 = node11.toString();
        boolean boolean16 = node11.isVarArgs();
        boolean boolean17 = node5.isEquivalentToTyped(node11);
        boolean boolean18 = node5.isReturn();
        com.google.javascript.rhino.Node node19 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node19);
        boolean boolean21 = node19.isNull();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(Not declared as a constructor)" + "'", str2, "(Not declared as a constructor)");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR " + "'", str15, "OR ");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        int int22 = node12.getIntProp((int) (byte) 0);
        boolean boolean23 = node12.isWhile();
        boolean boolean24 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node12, jSTypeRegistry25);
        boolean boolean27 = node12.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node12, "java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean30 = node12.isHook();
        java.lang.String str31 = node12.getQualifiedName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.hasBaseType();
        boolean boolean6 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        node3.setOptionalArg(false);
        boolean boolean16 = node3.isHook();
        boolean boolean17 = node3.isParamList();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        int int22 = node21.getCharno();
        java.lang.String str23 = node21.getSourceFileName();
        boolean boolean24 = node21.isLabel();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        boolean boolean39 = node38.isDec();
        boolean boolean40 = node38.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType18, node21, node38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        boolean boolean55 = node21.hasChild(node48);
        com.google.javascript.rhino.Node node56 = node48.getLastSibling();
        node48.setIsSyntheticBlock(false);
        boolean boolean59 = node48.isDelProp();
        int int60 = node3.getIndexOfChild(node48);
        node3.setQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node39 = node28.clonePropsFrom(node38);
        boolean boolean40 = node39.isLocalResultCall();
        node39.setSourceEncodedPositionForTree(0);
        boolean boolean43 = node39.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node39.getStaticSourceFile();
        boolean boolean45 = node39.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        com.google.javascript.jscomp.CodingConvention codingConvention0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(codingConvention0, "java.io.IOException: (Function)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.findPropertyType("Named type with empty name component");
        com.google.javascript.rhino.jstype.JSType jSType97 = parameterizedType78.getIndexType();
        com.google.javascript.rhino.jstype.TemplateType templateType98 = parameterizedType78.toMaybeTemplateType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertNull(templateType98);
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        java.lang.String str70 = functionType62.getDisplayName();
        com.google.javascript.rhino.Node node71 = functionType62.getParametersNode();
        node71.setIsSyntheticBlock(false);
        boolean boolean74 = node71.isComma();
        boolean boolean75 = node71.isFor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("((Not declared as a constructor))");
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNotNull(markerCollection11);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        boolean boolean9 = node8.isFunction();
        java.lang.String str10 = node8.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType65 = functionType62.getPropertyType("false");
        boolean boolean66 = functionType62.isResolved();
        boolean boolean67 = functionType62.hasReferenceName();
        java.lang.Iterable iterable68 = functionType62.getCtorExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(iterable68);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        boolean boolean82 = parameterizedType78.isNativeObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = parameterizedType78.getTypeOfThis();
        boolean boolean84 = parameterizedType78.isConstructor();
        boolean boolean86 = parameterizedType78.removeProperty("function (): (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType75.getAllExtendedInterfaces();
        int int88 = functionType75.getMaxArguments();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable89 = functionType75.getAllExtendedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(objectTypeIterable89);
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        boolean boolean37 = node3.hasChild(node30);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType38 = null;
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        java.lang.String str43 = node41.getSourceFileName();
        boolean boolean44 = node41.isLabel();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 10, node48, node51, node54, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node58 = node54.getLastSibling();
        boolean boolean59 = node58.isDec();
        boolean boolean60 = node58.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType38, node41, node58);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection62 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node58);
        java.lang.String[] strArray67 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet68);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType71 = null;
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        int int75 = node74.getCharno();
        java.lang.String str76 = node74.getSourceFileName();
        boolean boolean77 = node74.isLabel();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (byte) 10, node81, node84, node87, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node91 = node87.getLastSibling();
        boolean boolean92 = node91.isDec();
        boolean boolean93 = node91.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship94 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType71, node74, node91);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection95 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node91);
        com.google.javascript.rhino.InputId inputId96 = node91.getInputId();
        boolean boolean97 = strSet68.equals((java.lang.Object) node91);
        com.google.javascript.rhino.Node node98 = node3.clonePropsFrom(node91);
        com.google.javascript.rhino.Node node99 = node98.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeCollection62);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(nodeCollection95);
        org.junit.Assert.assertNull(inputId96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertNull(node99);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        boolean boolean81 = parameterizedType78.isInterface();
        boolean boolean82 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot84 = parameterizedType78.getOwnSlot("");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(jSTypeStaticSlot84);
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.isLabel();
        boolean boolean6 = node2.isEmpty();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType7 = null;
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship25 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType7, node17, node23);
        boolean boolean26 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node17);
        boolean boolean27 = node17.wasEmptyNode();
        java.lang.String str28 = node17.toString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        boolean boolean43 = node42.isDec();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDec();
        boolean boolean59 = node57.isOr();
        node57.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node63 = node57.getAncestor(2);
        java.lang.String str64 = node42.checkTreeEquals(node57);
        boolean boolean65 = node57.isAssign();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node68 = node57.clonePropsFrom(node67);
        node68.setSourceEncodedPositionForTree(2);
        java.util.Set<java.lang.String> strSet71 = node68.getDirectives();
        com.google.javascript.rhino.Node node72 = node68.cloneNode();
        node17.addChildToBack(node72);
        com.google.javascript.rhino.Node node74 = node2.copyInformationFrom(node17);
        boolean boolean75 = node2.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR " + "'", str28, "OR ");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.ObjectType objectType72 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "(OR  0)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(objectType72);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING OR \n\n\nTree2:\nOR  0\n    OR  [synthetic: 1]\n\n\nSubtree1: STRING OR \n\n\nSubtree2: OR  0\n    OR  [synthetic: 1]\n", (int) '#', 54);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        boolean boolean73 = functionType62.isPropertyTypeInferred("Unknown class name");
        java.lang.String str74 = functionType62.getReferenceName();
        boolean boolean75 = functionType62.isStringValueType();
        boolean boolean76 = functionType62.hasImplementedInterfaces();
        boolean boolean78 = functionType62.hasOwnProperty("{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(4);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        com.google.javascript.rhino.Node node15 = node3.getAncestor((int) (short) 10);
        int int16 = node3.getSourceOffset();
        int int17 = node3.getChildCount();
        boolean boolean18 = node3.isThrow();
        com.google.javascript.rhino.Node node19 = node3.getNext();
        boolean boolean20 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.isExpose();
        boolean boolean87 = jSDocInfo85.isExpose();
        boolean boolean88 = jSDocInfo85.hasEnumParameterType();
        java.lang.String str89 = jSDocInfo85.getMeaning();
        boolean boolean90 = jSDocInfo85.isNoShadow();
        boolean boolean91 = jSDocInfo85.isNoShadow();
        java.lang.String str92 = jSDocInfo85.toString();
        parameterizedType78.setJSDocInfo(jSDocInfo85);
        boolean boolean94 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType95 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair96 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) parameterizedType78, jSType95);
        com.google.javascript.rhino.jstype.JSType jSType97 = typePair96.typeA;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "JSDocInfo" + "'", str92, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSType97);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType72.getImplicitPrototype();
        boolean boolean78 = functionType72.isPropertyTypeDeclared("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean79 = functionType72.isNumberObjectType();
        boolean boolean80 = functionType72.isOrdinaryFunction();
        boolean boolean82 = functionType72.removeProperty("{-1473328952}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo0.getTypedefType();
        boolean boolean22 = jSDocInfo0.isConstructor();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo0.isNoTypeCheck();
        boolean boolean25 = jSDocInfo0.isDeprecated();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str27 = jSDocInfo0.getDescription();
        boolean boolean28 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.autobox();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType84 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean85 = parameterizedType78.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(functionType83);
        org.junit.Assert.assertNotNull(parameterizedType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        com.google.javascript.rhino.jstype.UnionType unionType71 = objectType70.toMaybeUnionType();
        java.lang.String str72 = objectType70.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType74 = objectType70.getRestrictedTypeGivenToBooleanOutcome(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNull(unionType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Function" + "'", str72, "Function");
        org.junit.Assert.assertNotNull(jSType74);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = enumType88.getImplicitPrototype();
        boolean boolean96 = enumType88.hasCachedValues();
        enumType88.clearResolved();
        boolean boolean99 = enumType88.isPropertyTypeInferred("Object");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isConstructor();
        com.google.javascript.rhino.jstype.ObjectType objectType81 = parameterizedType78.getImplicitPrototype();
        boolean boolean82 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.Node node84 = parameterizedType78.getPropertyNode("");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType85 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean87 = parameterizedType78.hasProperty("java.io.IOException: ");
        com.google.javascript.rhino.jstype.EnumType enumType88 = parameterizedType78.toMaybeEnumType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(enumElementType85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(enumType88);
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        node6.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node6.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        java.lang.String str30 = node20.getString();
        boolean boolean31 = node20.isReturn();
        com.google.javascript.rhino.Node node32 = node20.detachFromParent();
        boolean boolean33 = node32.isString();
        com.google.javascript.rhino.Node node34 = node6.clonePropsFrom(node32);
        boolean boolean35 = node6.isInstanceOf();
        com.google.javascript.rhino.Node node36 = node6.getFirstChild();
        node6.setOptionalArg(false);
        int int39 = node6.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.FunctionType functionType89 = functionType75.toMaybeFunctionType();
        boolean boolean90 = functionType75.hasReferenceName();
        com.google.javascript.rhino.jstype.ObjectType objectType91 = functionType75.toObjectType();
        int int92 = functionType75.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = functionType75.getParentScope();
        java.lang.String str94 = null; // flaky: functionType75.toAnnotationString();
        boolean boolean96 = functionType75.isPropertyTypeDeclared("Unknown class name");
        boolean boolean97 = functionType75.hasImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType98 = functionType75.getImplicitPrototype();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Function" + "'", str94, "Function");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(objectType98);
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = parameterizedType78.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType82 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.EnumType enumType83 = parameterizedType78.toMaybeEnumType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType84 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.collapseUnion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(parameterizedType82);
        org.junit.Assert.assertNull(enumType83);
        org.junit.Assert.assertNotNull(parameterizedType84);
        org.junit.Assert.assertNotNull(jSType85);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(44, 8, 39);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        org.junit.Assert.assertNotNull(ancestorIterable4);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean64 = jSTypeRegistry2.isForwardDeclaredType("");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        boolean boolean69 = jSTypeRegistry67.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList71 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList71, jSTypeArray70);
        com.google.javascript.rhino.Node node73 = jSTypeRegistry67.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList71);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry67.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry67.resetForTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry67.setTemplateTypeNames((java.util.List<java.lang.String>) strList80);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray82 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry67.createUnionType(jSTypeNativeArray82);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry2.createUnionType(jSTypeNativeArray82);
        jSTypeRegistry2.identifyNonNullableName("false");
        com.google.javascript.rhino.jstype.ObjectType objectType87 = jSTypeRegistry2.createAnonymousObjectType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(jSTypeNativeArray82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(objectType87);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDebugger();
        node13.setOptionalArg(true);
        boolean boolean17 = node13.isGetElem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean30 = node29.isVarArgs();
        com.google.javascript.rhino.Node node31 = node2.useSourceInfoIfMissingFrom(node29);
        node31.setQuotedString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isDec();
        boolean boolean17 = node15.isOr();
        node15.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node20 = node15.cloneTree();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isOr();
        node34.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node39 = node34.cloneTree();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(50, node20, node39);
        boolean boolean41 = node39.isString();
        com.google.javascript.rhino.Node node42 = node39.detachFromParent();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node39);
        node39.setLineno(39);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getReturnType();
        int int72 = functionType62.getPropertiesCount();
        boolean boolean73 = functionType62.isBooleanValueType();
        boolean boolean74 = functionType62.matchesStringContext();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        java.lang.Object[] objArray41 = subclassRelationshipList39.toArray();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList43 = subclassRelationshipList39.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.isNoCompile();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = node55.getLastSibling();
        boolean boolean60 = node59.isGetterDef();
        boolean boolean61 = node59.isSyntheticBlock();
        jSDocInfo44.setAssociatedNode(node59);
        java.util.Set<java.lang.String> strSet63 = jSDocInfo44.getModifies();
        strSet63.clear();
        boolean boolean65 = subclassRelationshipList39.contains((java.lang.Object) strSet63);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator66 = subclassRelationshipList39.spliterator();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry68.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter74 = jSTypeRegistry68.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        boolean boolean79 = jSTypeRegistry77.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray80 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList81 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81, jSTypeArray80);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry77.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList81);
        com.google.javascript.rhino.jstype.JSType jSType88 = jSTypeRegistry77.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry77.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray90 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry77.createUnionType(jSTypeArray90);
        com.google.javascript.rhino.Node node92 = jSTypeRegistry68.createParameters(jSTypeArray90);
        int int93 = subclassRelationshipList39.indexOf((java.lang.Object) jSTypeArray90);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(subclassRelationshipList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator66);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(errorReporter74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(jSType88);
        org.junit.Assert.assertNotNull(jSTypeArray90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}", jSTypeNative1);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        java.lang.String str20 = node16.getString();
        boolean boolean21 = node16.isWith();
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        boolean boolean23 = node22.isIn();
        boolean boolean24 = node22.isEmpty();
        com.google.javascript.rhino.Node node25 = node22.cloneTree();
        node22.setSourceEncodedPosition(100);
        java.lang.String str28 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node22);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean26 = jSTypeExpression23.equals((java.lang.Object) stringPosition25);
        stringPosition25.setItem("(STRING hi! 100)");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isQualifiedName();
        boolean boolean16 = node13.isQuotedString();
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node17, "java.io.IOException: ");
        com.google.javascript.rhino.Node node20 = jSTypeExpression19.getRoot();
        int int21 = node20.getSourcePosition();
        boolean boolean22 = node20.isWith();
        com.google.javascript.rhino.Node node23 = node20.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable iterable71 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72, false);
        boolean boolean76 = jSTypeRegistry74.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.Node node80 = jSTypeRegistry74.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry74.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        boolean boolean86 = functionType62.isSubtype(jSType85);
        boolean boolean87 = functionType62.isNoResolvedType();
        boolean boolean88 = functionType62.canBeCalled();
        boolean boolean89 = functionType62.isNullable();
        com.google.javascript.rhino.jstype.ObjectType.Property property91 = functionType62.getSlot("OR \n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterable71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(property91);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator58 = subclassRelationshipList38.spliterator();
        java.lang.Object[] objArray59 = subclassRelationshipList38.toArray();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator58);
        org.junit.Assert.assertNotNull(objArray59);
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(7, "(java.io.IOException: java.io.IOException)");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        java.lang.String str16 = node6.getString();
        boolean boolean17 = node6.isContinue();
        boolean boolean18 = node6.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node6.setStaticSourceFile(staticSourceFile19);
        java.lang.Object obj22 = node6.getProp(37);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.isFunction();
        node6.addChildToFront(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node41 = node37.getLastSibling();
        boolean boolean42 = node41.isDec();
        boolean boolean43 = node41.isOr();
        node41.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node46 = node25.srcref(node41);
        com.google.javascript.rhino.Node node47 = node2.clonePropsFrom(node46);
        node2.setSourceEncodedPosition((int) 'a');
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1, false);
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        boolean boolean8 = jSTypeRegistry6.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry6.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        com.google.javascript.rhino.jstype.JSType jSType17 = jSTypeRegistry6.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        boolean boolean22 = jSTypeRegistry20.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry20.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry20.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        boolean boolean36 = jSTypeRegistry34.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList38 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList38, jSTypeArray37);
        com.google.javascript.rhino.Node node40 = jSTypeRegistry34.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList38);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSTypeRegistry34.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSType45.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] { jSType31, jSType46, jSType61 };
        com.google.javascript.rhino.jstype.FunctionType functionType63 = jSTypeRegistry3.createFunctionType(jSType17, jSTypeArray62);
        boolean boolean64 = functionType63.matchesNumberContext();
        boolean boolean66 = functionType63.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable67 = functionType63.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType68 = functionType63.dereference();
        boolean boolean69 = functionType63.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType63.getReturnType();
        boolean boolean71 = functionType63.matchesUint32Context();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = functionType63.getParameters();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType73 = functionType63.toMaybeEnumElementType();
        java.lang.String str74 = functionType63.getDisplayName();
        boolean boolean75 = com.google.javascript.rhino.jstype.JSType.isEquivalent(jSType0, (com.google.javascript.rhino.jstype.JSType) functionType63);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(jSType17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertNotNull(functionType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable67);
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertNull(enumElementType73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isOverride();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        java.lang.String str9 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        boolean boolean11 = jSDocInfo0.containsDeclaration();
        boolean boolean12 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(STRING hi! 100\n)", 0, 30);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        com.google.javascript.rhino.Node node21 = node17.getAncestor((int) (short) 10);
        boolean boolean22 = node17.isQualifiedName();
        java.lang.String str23 = node17.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(24, node17, 41, 0);
        boolean boolean27 = node17.isName();
        com.google.javascript.rhino.Node node28 = node17.getFirstChild();
        boolean boolean29 = node17.isCase();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR " + "'", str23, "OR ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(31);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable70 = functionType62.getExtendedInterfaces();
        boolean boolean72 = functionType62.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot74 = functionType62.getOwnSlot("?");
        com.google.javascript.rhino.jstype.ObjectType objectType76 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "(((Not declared as a constructor)))");
        com.google.javascript.rhino.jstype.FunctionType functionType77 = functionType62.getConstructor();
        boolean boolean78 = functionType62.isFunctionPrototypeType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertNotNull(objectTypeIterable70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot74);
        org.junit.Assert.assertNull(objectType76);
        org.junit.Assert.assertNull(functionType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isOrdinaryFunction();
        boolean boolean83 = parameterizedType78.isPropertyInExterns("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = parameterizedType78.getOwnPropertyJSDocInfo("true");
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot87 = parameterizedType78.getSlot("{756548693}");
        com.google.javascript.rhino.jstype.JSType jSType89 = parameterizedType78.getPropertyType("java.io.IOException: (GETELEM false)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertNull(jSTypeStaticSlot87);
        org.junit.Assert.assertNotNull(jSType89);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        node16.setWasEmptyNode(true);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = null;
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship48 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node40, node46);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node62 = node40.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean63 = node40.hasOneChild();
        int int64 = node40.getType();
        node40.setCharno(2);
        boolean boolean68 = node40.getBooleanProp((int) '4');
        boolean boolean69 = node16.isEquivalentToTyped(node40);
        boolean boolean70 = node40.isLabelName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        boolean boolean10 = jSDocInfo0.hasParameterType("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        java.lang.String str11 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumType88.getElementsType();
        boolean boolean98 = enumElementType96.isPropertyTypeInferred("InputId: hi!");
        boolean boolean99 = enumElementType96.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType95 = null;
        boolean boolean96 = enumElementType93.isEquivalentTo(jSType95);
        boolean boolean97 = enumElementType93.matchesObjectContext();
        boolean boolean98 = enumElementType93.matchesStringContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType99 = enumElementType93.toMaybeEnumElementType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(enumElementType99);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.isStringValueType();
        java.lang.String str72 = functionType62.getDisplayName();
        com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.getBindReturnType((int) (short) 1);
        com.google.javascript.rhino.jstype.JSType jSType75 = functionType74.getReturnType();
        boolean boolean76 = functionType74.hasReferenceName();
        java.util.Set<java.lang.String> strSet77 = functionType74.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.JSType jSType78 = functionType74.getIndexType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(jSType78);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isOr();
        node13.setCharno((int) (byte) 0);
        node13.addSuppression("OR ");
        java.lang.String str20 = node13.getQualifiedName();
        int int21 = node13.getCharno();
        java.lang.String str22 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node13);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node8 = namePosition7.getItem();
        namePosition7.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList14 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node23 = namePosition22.getItem();
        int int24 = namePosition22.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node28 = namePosition27.getItem();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node31 = namePosition30.getItem();
        namePosition30.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int38 = namePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node40 = namePosition39.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition7, namePosition15, namePosition22, namePosition25, namePosition27, namePosition30, namePosition37, namePosition39);
        int int42 = namePosition39.getEndLine();
        com.google.javascript.rhino.Node node43 = namePosition39.getItem();
        int int44 = namePosition39.getPositionOnStartLine();
        int int45 = namePosition39.getEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(nodeSourcePositionList14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node8 = namePosition7.getItem();
        namePosition7.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList14 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node23 = namePosition22.getItem();
        int int24 = namePosition22.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node28 = namePosition27.getItem();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node31 = namePosition30.getItem();
        namePosition30.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int38 = namePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node40 = namePosition39.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition7, namePosition15, namePosition22, namePosition25, namePosition27, namePosition30, namePosition37, namePosition39);
        int int42 = namePosition39.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            namePosition39.setPositionInformation(16384, (int) (short) -1, (int) (byte) -1, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 16384?end-line: -1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(nodeSourcePositionList14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType7 = jSTypeRegistry2.getType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType70.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType77 = functionType70.getParentScope();
        boolean boolean79 = functionType70.isPropertyTypeDeclared("OR \n");
        com.google.javascript.rhino.jstype.JSType jSType80 = functionType70.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) functionType70);
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList82 = functionType70.getSubTypes();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNull(functionTypeList82);
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isLabel();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = node17.getLastSibling();
        boolean boolean22 = node21.isDec();
        boolean boolean23 = node21.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node4, node21);
        boolean boolean25 = node4.isParamList();
        boolean boolean26 = node4.isGetterDef();
        boolean boolean27 = node4.isTry();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, 52, 0);
        boolean boolean31 = node4.isReturn();
        boolean boolean32 = node4.isOr();
        node4.setVarArgs(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node15.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        java.lang.String str25 = node23.getSourceFileName();
        boolean boolean26 = node23.isLabel();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = node36.getLastSibling();
        boolean boolean41 = node40.isDec();
        boolean boolean42 = node40.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship43 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node23, node40);
        boolean boolean44 = node23.isParamList();
        com.google.javascript.rhino.Node node45 = node15.clonePropsFrom(node23);
        boolean boolean46 = node23.isInstanceOf();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 10, node50, node53, node56, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 10, node63, node66, node69, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node73 = node69.getLastSibling();
        boolean boolean74 = node73.isDec();
        com.google.javascript.rhino.Node node75 = node50.copyInformationFrom(node73);
        com.google.javascript.rhino.Node node76 = node23.useSourceInfoIfMissingFromForTree(node75);
        boolean boolean77 = node75.isGetElem();
        com.google.javascript.rhino.Node node78 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind79 = new com.google.javascript.jscomp.CodingConvention.Bind(node2, node75, node78);
        boolean boolean80 = node2.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            int int82 = node2.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        boolean boolean95 = enumType88.isBooleanObjectType();
        boolean boolean97 = enumType88.hasOwnProperty("EXPR_RESULT");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("(OR  0)");
        boolean boolean95 = enumType88.isPropertyInExterns("(((Not declared as a constructor)))");
        com.google.javascript.rhino.jstype.EnumType enumType96 = enumType88.toMaybeEnumType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumType96);
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        java.util.Set<java.lang.String> strSet89 = functionType75.getOwnPropertyNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = functionType75.getOwnPropertyJSDocInfo("OR  0");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNull(jSDocInfo91);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isOr();
        node13.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node18 = node13.cloneTree();
        boolean boolean19 = node13.isGetElem();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        boolean boolean33 = node26.isThrow();
        // The following exception was thrown during execution in test generation
        try {
            node13.addChildrenToBack(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesStringContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.ObjectType.Property property98 = enumElementType96.getSlot("Not declared as a type name");
        boolean boolean99 = enumElementType96.isNullable();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertNull(property98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isOverride();
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        int int8 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        int int11 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) ' ', nodeArray15, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(37, node18, 35, (int) ' ');
        com.google.javascript.rhino.InputId inputId22 = com.google.javascript.jscomp.NodeUtil.getInputId(node21);
        java.lang.String str23 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node21);
        boolean boolean24 = node21.isEmpty();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        int int29 = node28.getCharno();
        boolean boolean30 = node28.isAssignAdd();
        boolean boolean31 = node28.isNot();
        java.lang.String str32 = node28.toString();
        boolean boolean33 = node28.isVarArgs();
        boolean boolean34 = node28.isSetterDef();
        java.lang.String[] strArray37 = new java.lang.String[] { "", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isGetterDef();
        boolean boolean55 = node53.isSyntheticBlock();
        boolean boolean56 = strSet38.remove((java.lang.Object) boolean55);
        int int57 = strSet38.size();
        java.lang.Object[] objArray58 = strSet38.toArray();
        node28.setDirectives((java.util.Set<java.lang.String>) strSet38);
        boolean boolean60 = node28.isLabelName();
        node21.putProp((int) (short) 0, (java.lang.Object) node28);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR " + "'", str32, "OR ");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[, Not declared as a constructor]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[, Not declared as a constructor]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        boolean boolean72 = functionType62.removeProperty("Not declared as a type name");
        boolean boolean74 = functionType62.isPropertyInExterns("Function");
        com.google.javascript.rhino.jstype.JSType jSType75 = functionType62.getReturnType();
        com.google.javascript.rhino.jstype.ObjectType.Property property77 = functionType62.getSlot("STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(property77);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.InputId inputId14 = com.google.javascript.jscomp.NodeUtil.getInputId(node9);
        int int15 = node9.getLineno();
        boolean boolean16 = node9.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.isEnumElementType();
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.getBindReturnType(1);
        boolean boolean73 = functionType62.isReturnTypeInferred();
        boolean boolean75 = functionType62.removeProperty("Unknown class name");
        java.lang.String str76 = functionType62.getReferenceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean79 = jSDocInfo78.isNoShadow();
        java.lang.String str81 = jSDocInfo78.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean82 = jSDocInfo78.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo78.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection84 = jSDocInfo78.getMarkers();
        boolean boolean85 = jSDocInfo78.hasModifies();
        java.lang.String str87 = jSDocInfo78.getDescriptionForParameter("JSDocInfo");
        functionType62.setPropertyJSDocInfo("ERROR 0", jSDocInfo78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = functionType62.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertNotNull(markerCollection84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        java.util.Set set90 = enumType88.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType91 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.EnumType enumType92 = enumType88.toMaybeEnumType();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = enumType92.getConstructor();
        java.lang.String str94 = enumType92.getReferenceName();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = enumType92.getImplicitPrototype();
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = enumType92.getJSDocInfo();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(set90);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(enumType92);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str94, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertNull(jSDocInfo96);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isInstanceOf();
        boolean boolean37 = node28.isInstanceOf();
        boolean boolean38 = node28.isTypeOf();
        int int39 = node28.getSourcePosition();
        boolean boolean40 = node28.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        boolean boolean43 = node41.isExprResult();
        boolean boolean44 = subclassRelationshipList38.equals((java.lang.Object) node41);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType45 = null;
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        int int62 = node61.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship63 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType45, node55, node61);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType64 = null;
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        int int81 = node80.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType64, node74, node80);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList83 = com.google.common.collect.ImmutableList.of(subclassRelationship63, subclassRelationship82);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList84 = subclassRelationshipList83.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor85 = subclassRelationshipList84.iterator();
        int int86 = subclassRelationshipList38.lastIndexOf((java.lang.Object) subclassRelationshipList84);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList87 = subclassRelationshipList84.asList();
        boolean boolean88 = subclassRelationshipList84.isEmpty();
        java.lang.Object[] objArray89 = subclassRelationshipList84.toArray();
        java.lang.String str90 = subclassRelationshipList84.toString();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor91 = subclassRelationshipList84.listIterator();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream92 = subclassRelationshipList84.parallelStream();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList83);
        org.junit.Assert.assertNotNull(subclassRelationshipList84);
        org.junit.Assert.assertNotNull(subclassRelationshipItor85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertNotNull(subclassRelationshipItor91);
        org.junit.Assert.assertNotNull(subclassRelationshipStream92);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType40 = null;
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        int int57 = node56.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship58 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType40, node50, node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node72 = node50.useSourceInfoIfMissingFromForTree(node71);
        boolean boolean73 = node72.isThis();
        boolean boolean74 = node72.isVarArgs();
        com.google.javascript.rhino.InputId inputId75 = node72.getInputId();
        boolean boolean76 = node17.isEquivalentToTyped(node72);
        node72.setType(3);
        boolean boolean79 = node72.isInc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(inputId75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isVarArgs();
        com.google.javascript.rhino.Node node8 = node2.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node8.getAncestors();
        com.google.javascript.rhino.Node node10 = node8.getParent();
        boolean boolean11 = node8.isTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str13 = jSDocInfo12.getVersion();
        java.lang.String str14 = jSDocInfo12.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getParameterType("Not declared as a constructor");
        java.lang.String str17 = jSDocInfo12.getDeprecationReason();
        node8.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo12.getReturnType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(jSTypeExpression19);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        boolean boolean81 = parameterizedType78.isDateType();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate82 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = parameterizedType78.setValidator(jSTypePredicate82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo0.getModifies();
        int int20 = jSDocInfo0.getParameterCount();
        boolean boolean22 = jSDocInfo0.hasParameterType("(Not declared as a constructor)");
        boolean boolean23 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList38.listIterator();
        java.lang.Object[] objArray41 = subclassRelationshipList38.toArray();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList44 = subclassRelationshipList38.subList(44, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (44) must not be greater than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNotNull(objArray41);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getParametersNode();
        functionType62.clearCachedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable73 = functionType62.getImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getCtorExtendedInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(objectTypeIterable73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        jSTypeRegistry2.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        boolean boolean14 = jSTypeRegistry12.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry12.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSType51.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        boolean boolean57 = jSTypeRegistry55.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry55.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry55.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSType66.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] { jSType37, jSType52, jSType67 };
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry9.createFunctionType(jSType23, jSTypeArray68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.isNoCompile();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 10, node75, node78, node81, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node85 = node81.getLastSibling();
        boolean boolean86 = node85.isGetterDef();
        boolean boolean87 = node85.isSyntheticBlock();
        jSDocInfo70.setAssociatedNode(node85);
        java.util.Collection<java.lang.String> strCollection89 = jSDocInfo70.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList90 = jSDocInfo70.getExtendedInterfaces();
        functionType69.setJSDocInfo(jSDocInfo70);
        jSTypeRegistry2.unregisterPropertyOnType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) functionType69);
        jSTypeRegistry2.incrementGeneration();
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType96 = jSTypeRegistry2.getNativeObjectType(jSTypeNative95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strCollection89);
        org.junit.Assert.assertNotNull(jSTypeExpressionList90);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        com.google.javascript.rhino.jstype.FunctionType functionType94 = enumType88.getOwnerFunction();
        com.google.javascript.rhino.Node node96 = enumType88.getPropertyNode("java.io.IOException: java.io.IOException");
        java.lang.String str97 = enumType88.getDisplayName();
        boolean boolean98 = enumType88.matchesNumberContext();
        com.google.javascript.rhino.jstype.FunctionType functionType99 = enumType88.getOwnerFunction();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(functionType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(functionType99);
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasReturnType();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        boolean boolean72 = functionType62.removeProperty("Not declared as a type name");
        boolean boolean73 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isNoShadow();
        java.lang.String str78 = jSDocInfo75.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean79 = jSDocInfo75.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo75.getParameterType("false");
        boolean boolean82 = jSDocInfo75.shouldPreserveTry();
        boolean boolean83 = jSDocInfo75.isInterface();
        boolean boolean84 = jSDocInfo75.isDefine();
        functionType62.setPropertyJSDocInfo("STRING OR  [quoted: 1]", jSDocInfo75);
        boolean boolean86 = jSDocInfo75.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor39 = subclassRelationshipList38.iterator();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList38.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList38.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipItor39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        int int87 = functionType75.getPropertiesCount();
        boolean boolean88 = functionType75.hasDisplayName();
        boolean boolean90 = functionType75.isPropertyInExterns("Function");
        boolean boolean91 = functionType75.isTemplateType();
        boolean boolean93 = functionType75.hasProperty("OR  [slash_v: 1]");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = functionType75.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType95 = functionType75.restrictByNotNullOrUndefined();
        boolean boolean96 = functionType75.isInterface();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType4 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, node8, node11, node14, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship22 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType4, node14, node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node14.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean37 = node36.isThis();
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind39 = new com.google.javascript.jscomp.CodingConvention.Bind(node3, node36, node38);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType45 = assertionFunctionSpec1.getAssertedType(node3, jSTypeRegistry42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = node55.getLastSibling();
        boolean boolean60 = node59.isDec();
        node59.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId63 = node59.getInputId();
        com.google.javascript.rhino.InputId inputId64 = node59.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node59.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) 10, node69, node72, node75, 0, (int) (byte) 1);
        java.lang.String str79 = node59.checkTreeEquals(node78);
        com.google.javascript.rhino.Node node80 = node78.removeFirstChild();
        com.google.javascript.rhino.Node node81 = assertionFunctionSpec1.getAssertedParam(node78);
        com.google.javascript.rhino.Node node82 = node81.getLastSibling();
        com.google.javascript.rhino.Node node83 = node82.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = null;
        node82.setStaticSourceFile(staticSourceFile84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean87 = jSDocInfo86.isNoShadow();
        java.lang.String str89 = jSDocInfo86.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean90 = jSDocInfo86.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = jSDocInfo86.getParameterType("false");
        java.lang.String str93 = jSDocInfo86.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility94 = jSDocInfo86.getVisibility();
        jSDocInfo86.setLicense("STRING OR  [quoted: 1]");
        java.util.Set<java.lang.String> strSet97 = jSDocInfo86.getModifies();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection98 = jSDocInfo86.getTypeNodes();
        node82.setJSDocInfo(jSDocInfo86);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(inputId63);
        org.junit.Assert.assertNull(inputId64);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str79, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSTypeExpression92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(visibility94);
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNotNull(nodeCollection98);
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean18 = node17.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition19 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node20 = namePosition19.getItem();
        namePosition19.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList26 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition19);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        int int30 = node29.getCharno();
        boolean boolean31 = node29.isAssignAdd();
        boolean boolean32 = node29.isNot();
        java.lang.String str33 = node29.toString();
        namePosition19.setItem(node29);
        node29.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node37 = node17.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, node41, node44, node47, 0, (int) (byte) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node50.getStaticSourceFile();
        node37.addChildrenToBack(node50);
        boolean boolean53 = node50.isFromExterns();
        boolean boolean54 = node50.isFromExterns();
        boolean boolean55 = node50.isHook();
        boolean boolean56 = node9.isEquivalentTo(node50);
        node9.putBooleanProp(46, false);
        boolean boolean60 = node9.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(nodeSourcePositionList26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR " + "'", str33, "OR ");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        java.util.Set set90 = enumType88.getOwnPropertyNames();
        java.lang.String str91 = enumType88.toAnnotationString();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType92 = enumType88.getElementsType();
        boolean boolean94 = enumType88.isPropertyTypeInferred("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(set90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Object" + "'", str91, "Object");
        org.junit.Assert.assertNotNull(enumElementType92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        boolean boolean4 = jSDocInfo0.isExport();
        jSDocInfo0.setLicense("(Named type with empty name component)");
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        java.lang.String str9 = jSDocInfo0.toString();
        java.lang.String str10 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesUint32Context();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = functionType62.getParameters();
        boolean boolean72 = functionType62.isNominalConstructor();
        boolean boolean73 = functionType62.isFunctionPrototypeType();
        boolean boolean74 = functionType62.isString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node9.hasMoreThanOneChild();
        node9.setVarArgs(false);
        com.google.javascript.rhino.Node node17 = node9.cloneTree();
        boolean boolean18 = node9.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean90 = enumType88.hasOwnProperty("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        boolean boolean92 = enumType88.hasOwnProperty("Unknown class name");
        boolean boolean93 = enumType88.isNullType();
        com.google.javascript.rhino.jstype.JSType jSType95 = enumType88.getPropertyType("");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet96 = jSType95.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet96 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet96.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        boolean boolean4 = jSDocInfo0.hasType();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.isExpose();
        boolean boolean8 = jSDocInfo6.isExpose();
        boolean boolean9 = jSDocInfo6.hasEnumParameterType();
        java.lang.String str10 = jSDocInfo6.getMeaning();
        boolean boolean11 = jSDocInfo6.isNoShadow();
        boolean boolean12 = jSDocInfo6.isNoShadow();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean16 = node15.isName();
        com.google.javascript.rhino.Node node18 = node15.getAncestor(31);
        java.util.Set<java.lang.String> strSet19 = node15.getDirectives();
        jSDocInfo6.setAssociatedNode(node15);
        boolean boolean21 = jSDocInfo6.isConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo22.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo22.isOverride();
        boolean boolean26 = jSDocInfo22.hasParameter("OR  0");
        boolean boolean27 = jSDocInfo22.isConstructor();
        java.lang.String str28 = jSDocInfo22.getMeaning();
        java.lang.String str29 = jSDocInfo22.getLicense();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str31 = jSDocInfo30.getVersion();
        boolean boolean32 = jSDocInfo30.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo30.setVisibility(visibility33);
        jSDocInfo22.setVisibility(visibility33);
        jSDocInfo6.setVisibility(visibility33);
        jSDocInfo0.setVisibility(visibility33);
        boolean boolean38 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node9.hasMoreThanOneChild();
        node9.setVarArgs(false);
        com.google.javascript.rhino.Node node17 = node9.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.isNoShadow();
        java.lang.String str21 = jSDocInfo18.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean22 = jSDocInfo18.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo18.getParameterType("false");
        boolean boolean25 = jSDocInfo18.shouldPreserveTry();
        boolean boolean26 = jSDocInfo18.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo18.getThisType();
        boolean boolean28 = jSDocInfo18.hasEnumParameterType();
        node9.setJSDocInfo(jSDocInfo18);
        java.util.Set<java.lang.String> strSet30 = jSDocInfo18.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo18.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(jSTypeExpression31);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("InputId: hi!", (int) (short) -1, (int) (byte) 100);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) ' ', nodeArray20, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(37, node23, 35, (int) ' ');
        boolean boolean27 = node23.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(8, node4, node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker3.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker3.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker3.getNameNode();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList7 = com.google.common.collect.ImmutableList.of(marker0, marker3);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNotNull(markerList7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExpose();
        jSDocInfo20.addSuppression("((Not declared as a constructor))");
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getExtendedInterfaces();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = jSDocInfo20.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = jSDocInfo20.getTypeNodes();
        node16.setJSDocInfo(jSDocInfo20);
        boolean boolean31 = jSDocInfo20.hasDescriptionForParameter("(Function)");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(nodeCollection27);
        org.junit.Assert.assertNotNull(nodeCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean61 = node60.isFunction();
        boolean boolean62 = subclassRelationshipList38.equals((java.lang.Object) boolean61);
        boolean boolean63 = subclassRelationshipList38.isEmpty();
        boolean boolean64 = subclassRelationshipList38.isEmpty();
        boolean boolean65 = subclassRelationshipList38.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.getIndexType();
        boolean boolean73 = functionType62.hasInstanceType();
        boolean boolean74 = functionType62.hasAnyTemplate();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType75.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionType75.setPrototypeBasedOn(objectType78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertNotNull(jSType77);
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node10.isOptionalArg();
        boolean boolean34 = node10.isQuotedString();
        java.lang.String str35 = node10.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        boolean boolean85 = parameterizedType78.isNoResolvedType();
        com.google.javascript.rhino.jstype.FunctionType functionType86 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.FunctionType functionType87 = parameterizedType78.toMaybeFunctionType();
        boolean boolean88 = parameterizedType78.isAllType();
        com.google.javascript.rhino.Node node90 = parameterizedType78.getPropertyNode("InputId: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(functionType86);
        org.junit.Assert.assertNotNull(functionType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = parameterizedType78.getParentScope();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType96 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean97 = parameterizedType96.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.JSType jSType98 = parameterizedType96.collapseUnion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertNotNull(parameterizedType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(jSType98);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "false");
        boolean boolean3 = node2.isTrue();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        int int22 = node21.getCharno();
        java.lang.String str23 = node21.getSourceFileName();
        boolean boolean24 = node21.isLabel();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        boolean boolean39 = node38.isDec();
        boolean boolean40 = node38.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType18, node21, node38);
        boolean boolean42 = node21.isParamList();
        com.google.javascript.rhino.Node node43 = node13.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDebugger();
        com.google.javascript.rhino.Node node59 = node43.useSourceInfoFromForTree(node57);
        boolean boolean60 = node43.isStringKey();
        boolean boolean61 = node43.isTypeOf();
        boolean boolean62 = node43.isReturn();
        com.google.javascript.rhino.Node node63 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind64 = new com.google.javascript.jscomp.CodingConvention.Bind(node2, node43, node63);
        boolean boolean65 = node2.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 40, 2);
        int int4 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node5 = node3.getFirstChild();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getBaseType();
        java.lang.String str3 = jSDocInfo0.getFileOverview();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray1, 41, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("OR \n", throwable4);
        java.io.IOException iOException6 = new java.io.IOException(throwable4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        java.io.IOException iOException9 = new java.io.IOException("OR  [directives: [, Not declared as a constructor]]", (java.lang.Throwable) iOException7);
        java.io.IOException iOException10 = new java.io.IOException("(Function)", (java.lang.Throwable) iOException7);
        java.io.IOException iOException11 = new java.io.IOException("OR  [synthetic: 1]", (java.lang.Throwable) iOException7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.UnmodifiableIterator[]> unmodifiableIteratorArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(unmodifiableIteratorArrayBuilder0);
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.lang.Object[] objArray59 = subclassRelationshipList38.toArray();
        int int60 = subclassRelationshipList38.size();
        java.lang.String str61 = subclassRelationshipList38.toString();
        com.google.common.collect.UnmodifiableIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor62 = subclassRelationshipList38.iterator();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipItor62.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(subclassRelationshipItor62);
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.hasBaseType();
        int int67 = jSDocInfo65.getExtendedInterfacesCount();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", jSDocInfo65);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo65.getEnumParameterType();
        boolean boolean70 = jSDocInfo65.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo65.getImplementedInterfaces();
        java.lang.String str72 = jSDocInfo65.getVersion();
        java.lang.String str73 = jSDocInfo65.getLicense();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo65.getReferences();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(strCollection74);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isCheckedUnknownType();
        boolean boolean82 = parameterizedType78.removeProperty("false");
        java.lang.Iterable iterable83 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean84 = parameterizedType78.isNoObjectType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(iterable83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        boolean boolean16 = node14.isOr();
        node14.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node19 = node14.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node29.getLastSibling();
        boolean boolean34 = node33.isDec();
        boolean boolean35 = node33.isOr();
        node33.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node38 = node33.cloneTree();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(50, node19, node38);
        boolean boolean40 = node38.isNew();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isQualifiedName();
        boolean boolean16 = node13.isQuotedString();
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        int int18 = node13.getChildCount();
        boolean boolean19 = node13.isOr();
        node13.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType94 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean95 = parameterizedType94.isNoType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = parameterizedType94.getJSDocInfo();
        boolean boolean97 = parameterizedType94.isNullable();
        com.google.javascript.rhino.jstype.ObjectType objectType98 = parameterizedType94.getImplicitPrototype();
        boolean boolean99 = parameterizedType94.hasReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(parameterizedType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSDocInfo96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(objectType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        boolean boolean40 = node17.isNumber();
        boolean boolean41 = node17.isWhile();
        boolean boolean42 = node17.isVoid();
        boolean boolean43 = node17.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean24 = node23.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node23, jSTypeRegistry25);
        java.lang.String str27 = assertionFunctionSpec1.getFunctionName();
        java.lang.String str28 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType29 = null;
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, node33, node36, node39, 0, (int) (byte) 1);
        java.lang.String str43 = node33.getString();
        boolean boolean44 = node33.isContinue();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        int int48 = node47.getCharno();
        boolean boolean49 = node47.isAssignAdd();
        node47.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship53 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType29, node33, node47);
        java.lang.String str54 = node33.toString();
        boolean boolean55 = node33.isTrue();
        com.google.javascript.rhino.Node node56 = assertionFunctionSpec1.getAssertedParam(node33);
        node33.setType((int) (short) -1);
        com.google.javascript.rhino.Node node59 = node33.getNext();
        boolean boolean60 = node33.isAnd();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "false" + "'", str27, "false");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "false" + "'", str28, "false");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR " + "'", str54, "OR ");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isConstructor();
        com.google.javascript.rhino.jstype.ObjectType objectType81 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) parameterizedType78);
        com.google.javascript.rhino.jstype.FunctionType functionType82 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.getPropertyType("((OR  [directives: [, Not declared as a constructor]]))");
        java.lang.String str86 = parameterizedType78.getNormalizedReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNull(functionType82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        int int72 = functionType62.getPropertiesCount();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList73 = functionType62.getSubTypes();
        boolean boolean74 = functionType62.matchesObjectContext();
        boolean boolean75 = functionType62.isCheckedUnknownType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(functionTypeList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean89 = jSDocInfo88.isExpose();
        boolean boolean90 = jSDocInfo88.isExpose();
        boolean boolean91 = jSDocInfo88.hasEnumParameterType();
        java.lang.String str92 = jSDocInfo88.getMeaning();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n", jSDocInfo88);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable94 = functionType62.getOwnImplementedInterfaces();
        boolean boolean96 = functionType62.hasProperty("");
        com.google.javascript.rhino.jstype.FunctionType functionType97 = functionType62.toMaybeFunctionType();
        boolean boolean99 = functionType97.hasProperty("java.io.IOException: (OR  0)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(objectTypeIterable94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(functionType97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1.0f));
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isDec();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node30 = node26.getLastSibling();
        boolean boolean31 = node30.isDec();
        boolean boolean32 = node30.isOr();
        node30.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node36 = node30.getAncestor(2);
        java.lang.String str37 = node15.checkTreeEquals(node30);
        boolean boolean38 = node30.isAssign();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node41 = node30.clonePropsFrom(node40);
        com.google.javascript.rhino.Node node42 = node1.srcref(node40);
        boolean boolean43 = node40.isGetProp();
        boolean boolean44 = node40.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        jSDocInfo0.addSuppression("InputId: hi!");
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        int int7 = jSDocInfo0.getParameterCount();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str12 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str13 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType82 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean83 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.ObjectType objectType84 = parameterizedType78.getTypeOfThis();
        boolean boolean85 = parameterizedType78.isUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.getIndexType();
        boolean boolean88 = parameterizedType78.isPropertyInExterns("(java.io.IOException: java.io.IOException)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(parameterizedType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objectType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType83 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean84 = parameterizedType78.matchesObjectContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(enumElementType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        java.util.Set set92 = enumType88.getOwnPropertyNames();
        java.util.Set<java.lang.String> strSet93 = enumType88.getElements();
        com.google.javascript.rhino.Node node95 = enumType88.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType96 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) enumType88);
        com.google.javascript.rhino.jstype.FunctionType functionType97 = enumType88.getConstructor();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot99 = enumType88.getOwnSlot("TYPEOF Not declared as a constructor 32");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(set92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertNotNull(objectType96);
        org.junit.Assert.assertNull(functionType97);
        org.junit.Assert.assertNull(jSTypeStaticSlot99);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean84 = parameterizedType78.hasOwnProperty("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.JSType jSType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = parameterizedType78.canAssignTo(jSType85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship18 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList40, subclassRelationshipArray39);
        int int42 = subclassRelationshipList40.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node53, node59);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType62 = null;
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        int int79 = node78.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship80 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType62, node72, node78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList81 = com.google.common.collect.ImmutableList.of(subclassRelationship61, subclassRelationship80);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship61 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList83 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList83, subclassRelationshipArray82);
        int int85 = subclassRelationshipList83.size();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList86 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList83);
        boolean boolean87 = subclassRelationshipList40.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList86);
        java.lang.Object[] objArray88 = subclassRelationshipList86.toArray();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList89 = subclassRelationshipList86.reverse();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList86.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList81);
        org.junit.Assert.assertNotNull(subclassRelationshipArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(subclassRelationshipList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertNotNull(subclassRelationshipList89);
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("OR \n", throwable2);
        java.io.IOException iOException4 = new java.io.IOException(throwable2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("(Function)", (java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        boolean boolean5 = node3.isExprResult();
        java.lang.String str6 = node3.toStringTree();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0, node3);
        int int9 = node7.getIntProp((int) '4');
        int int10 = node7.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR \n" + "'", str6, "OR \n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = enumType88.getOwnerFunction();
        java.lang.Iterable iterable94 = enumType88.getCtorExtendedInterfaces();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator95 = iterable94.spliterator();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertNotNull(iterable94);
        org.junit.Assert.assertNotNull(nodeSpliterator95);
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean81 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.Node node83 = parameterizedType78.getPropertyNode("enum{");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType84 = parameterizedType78.toMaybeParameterizedType();
        java.lang.String str85 = parameterizedType84.getReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(parameterizedType84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.isConstructor();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getBaseType();
        java.lang.String str3 = jSDocInfo0.getFileOverview();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("(OR  0)");
        jSDocInfo0.setLicense("false");
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Named type with empty name component");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = jSTypeRegistry2.getErrorReporter();
        jSTypeRegistry2.identifyNonNullableName("(?)");
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable14 = jSTypeRegistry12.getTypesWithProperty("((Not declared as a constructor))");
        jSTypeRegistry12.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry18.resetForTypeCheck();
        jSTypeRegistry18.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        boolean boolean36 = jSTypeRegistry34.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode37);
        jSTypeRegistry18.setResolveMode(resolveMode37);
        jSTypeRegistry12.setResolveMode(resolveMode37);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        boolean boolean47 = jSTypeRegistry45.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray48 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList49, jSTypeArray48);
        com.google.javascript.rhino.Node node51 = jSTypeRegistry45.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList49);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry45.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry45.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        boolean boolean62 = jSTypeRegistry60.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList64, jSTypeArray63);
        com.google.javascript.rhino.Node node66 = jSTypeRegistry60.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList64);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry60.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry60.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray73 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry60.createUnionType(jSTypeArray73);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry45.createUnionType(jSTypeArray73);
        com.google.javascript.rhino.Node node76 = jSTypeRegistry42.createOptionalParameters(jSTypeArray73);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry12.createUnionType(jSTypeArray73);
        com.google.javascript.rhino.Node node78 = jSTypeRegistry2.createParameters(jSTypeArray73);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNull(errorReporter7);
        org.junit.Assert.assertNotNull(jSTypeIterable14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNotNull(jSTypeArray73);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasReturnType();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getAuthors();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        java.lang.String str10 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        node1.setLineno(16);
        node1.setSourceEncodedPositionForTree(53);
        boolean boolean7 = node1.isSyntheticBlock();
        com.google.javascript.rhino.InputId inputId9 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str10 = inputId9.getIdName();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        java.lang.String str17 = node15.getSourceFileName();
        boolean boolean18 = node15.isLabel();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node28.getLastSibling();
        boolean boolean33 = node32.isDec();
        boolean boolean34 = node32.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship35 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType12, node15, node32);
        boolean boolean36 = node15.isParamList();
        boolean boolean37 = node15.isGetterDef();
        boolean boolean38 = node15.isTry();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, 52, 0);
        boolean boolean42 = node41.isAnd();
        boolean boolean43 = inputId9.equals((java.lang.Object) boolean42);
        node1.setInputId(inputId9);
        java.lang.String str45 = inputId9.getIdName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType95 = enumType88.getConstructor();
        com.google.javascript.rhino.jstype.ObjectType.Property property97 = enumType88.getSlot("OR \n");
        java.lang.Iterable iterable98 = enumType88.getCtorExtendedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNull(functionType95);
        org.junit.Assert.assertNull(property97);
        org.junit.Assert.assertNotNull(iterable98);
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry2.createUnionType(jSTypeArray15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        boolean boolean22 = jSTypeRegistry20.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        boolean boolean73 = jSTypeRegistry71.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry71.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType82.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] { jSType53, jSType68, jSType83 };
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry25.createFunctionType(jSType39, jSTypeArray84);
        boolean boolean86 = functionType85.matchesNumberContext();
        boolean boolean88 = functionType85.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry20.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType85);
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType85.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType16.resolve(errorReporter17, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType85);
        boolean boolean92 = functionType85.isResolved();
        int int93 = functionType85.getMaxArguments();
        com.google.javascript.rhino.jstype.FunctionType functionType94 = functionType85.getConstructor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNull(functionType94);
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList39.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str42 = jSDocInfo41.getVersion();
        boolean boolean43 = jSDocInfo41.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo41.setVisibility(visibility44);
        java.lang.String str46 = jSDocInfo41.getLendsName();
        boolean boolean47 = subclassRelationshipList39.contains((java.lang.Object) str46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10, node51, node54, node57, 0, (int) (byte) 1);
        java.lang.String str61 = node51.getString();
        boolean boolean62 = node51.isContinue();
        boolean boolean63 = node51.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType64 = null;
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        int int81 = node80.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType64, node74, node80);
        com.google.javascript.rhino.Node node83 = node51.copyInformationFromForTree(node80);
        java.lang.String str84 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node83);
        int int85 = subclassRelationshipList39.lastIndexOf((java.lang.Object) node83);
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor86 = subclassRelationshipList39.listIterator();
        java.lang.Object[] objArray87 = subclassRelationshipList39.toArray();
        java.lang.String str88 = subclassRelationshipList39.toString();
        java.lang.Object[] objArray89 = subclassRelationshipList39.toArray();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipCollection90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = subclassRelationshipList39.removeAll(subclassRelationshipCollection90);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor86);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertNotNull(objArray89);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        boolean boolean29 = node26.isParamList();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, node33, node36, node39, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isGetterDef();
        boolean boolean59 = node57.isSyntheticBlock();
        boolean boolean60 = node57.isNE();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFromForTree(node57);
        boolean boolean62 = node61.isAssign();
        com.google.javascript.rhino.Node node63 = node61.getNext();
        com.google.javascript.rhino.Node node64 = node26.srcrefTree(node61);
        boolean boolean65 = node61.isArrayLit();
        boolean boolean66 = node61.isInstanceOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = new com.google.javascript.rhino.JSTypeExpression(node61, "OR  [directives: [, Not declared as a constructor]]");
        com.google.javascript.rhino.Node node69 = jSTypeExpression68.getRoot();
        node69.setString("Object");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = jSTypeRegistry2.getErrorReporter();
        jSTypeRegistry2.incrementGeneration();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(errorReporter76);
        org.junit.Assert.assertNull(errorReporter77);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 1, 8, (int) '#');
        boolean boolean4 = node3.isNumber();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.rhino.Node node58 = node56.cloneTree();
        boolean boolean59 = node58.isNull();
        boolean boolean60 = node58.isStringKey();
        com.google.javascript.rhino.Node node61 = node58.cloneNode();
        int int62 = node61.getLength();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("OR \n", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.lang.Throwable[] throwableArray7 = iOException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.UnionType unionType80 = parameterizedType78.toMaybeUnionType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType81 = parameterizedType78.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertNull(enumElementType81);
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("InputId: OR ");
        jSTypeRegistry2.clearTemplateTypeNames();
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType71.getCtorImplementedInterfaces();
        boolean boolean76 = functionType71.isUnknownType();
        com.google.javascript.rhino.Node node78 = functionType71.getPropertyNode("java.io.IOException: ");
        int int79 = functionType71.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType71);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(objectType80);
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        java.io.IOException iOException1 = new java.io.IOException("false");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException5 = new java.io.IOException("InputId: hi!");
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("OR \n", throwable8);
        java.io.IOException iOException10 = new java.io.IOException(throwable8);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.lang.Throwable[] throwableArray12 = iOException11.getSuppressed();
        java.lang.Throwable throwable14 = null;
        java.io.IOException iOException15 = new java.io.IOException("OR \n", throwable14);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException("OR \n", throwable17);
        java.lang.Throwable throwable20 = null;
        java.io.IOException iOException21 = new java.io.IOException("OR \n", throwable20);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList22 = com.google.common.collect.ImmutableList.of(iOException15, iOException18, iOException21);
        java.lang.Throwable[] throwableArray23 = iOException15.getSuppressed();
        java.lang.Throwable throwable25 = null;
        java.io.IOException iOException26 = new java.io.IOException("OR \n", throwable25);
        java.lang.Throwable throwable28 = null;
        java.io.IOException iOException29 = new java.io.IOException("OR \n", throwable28);
        java.lang.Throwable throwable31 = null;
        java.io.IOException iOException32 = new java.io.IOException("OR \n", throwable31);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList33 = com.google.common.collect.ImmutableList.of(iOException26, iOException29, iOException32);
        java.lang.Throwable[] throwableArray34 = iOException32.getSuppressed();
        java.io.IOException iOException36 = new java.io.IOException("Not declared as a type name");
        java.lang.Throwable throwable40 = null;
        java.io.IOException iOException41 = new java.io.IOException("OR \n", throwable40);
        java.lang.Throwable throwable43 = null;
        java.io.IOException iOException44 = new java.io.IOException("OR \n", throwable43);
        java.lang.Throwable throwable46 = null;
        java.io.IOException iOException47 = new java.io.IOException("OR \n", throwable46);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList48 = com.google.common.collect.ImmutableList.of(iOException41, iOException44, iOException47);
        java.lang.Throwable[] throwableArray49 = iOException47.getSuppressed();
        java.io.IOException iOException50 = new java.io.IOException("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", (java.lang.Throwable) iOException47);
        java.io.IOException iOException51 = new java.io.IOException("Not declared as a type name", (java.lang.Throwable) iOException47);
        java.io.IOException iOException53 = new java.io.IOException("");
        java.lang.Throwable throwable55 = null;
        java.io.IOException iOException56 = new java.io.IOException("OR \n", throwable55);
        java.io.IOException iOException57 = new java.io.IOException(throwable55);
        java.lang.Throwable[] throwableArray58 = iOException57.getSuppressed();
        java.io.IOException iOException60 = new java.io.IOException("(OR  0)");
        java.io.IOException iOException62 = new java.io.IOException("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        java.io.IOException iOException64 = new java.io.IOException("OR ");
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList65 = com.google.common.collect.ImmutableList.of(iOException11, iOException15, iOException32, iOException36, iOException47, iOException53, iOException57, iOException60, iOException62, iOException64);
        iOException5.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException67 = new java.io.IOException((java.lang.Throwable) iOException11);
        iOException3.addSuppressed((java.lang.Throwable) iOException67);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(iOExceptionList22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(iOExceptionList33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(iOExceptionList48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(iOExceptionList65);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = enumType88.getOwnerFunction();
        java.lang.Iterable iterable91 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = enumType88.getOwnPropertyJSDocInfo("InputId: hi!");
        boolean boolean95 = enumType88.hasOwnProperty("STRING (Function)");
        com.google.javascript.rhino.jstype.JSType jSType96 = enumType88.getIndexType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(iterable91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSType96);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = parameterizedType78.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.getParameterType();
        java.lang.Iterable iterable97 = parameterizedType78.getCtorImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSDocInfo95);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNotNull(iterable97);
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        boolean boolean9 = jSTypeRegistry7.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry7.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry7.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry7.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry7.createUnionType(jSTypeArray20);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        boolean boolean73 = jSTypeRegistry71.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry71.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType82.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] { jSType53, jSType68, jSType83 };
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry25.createFunctionType(jSType39, jSTypeArray84);
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry2.createFunctionType(jSType21, false, jSTypeArray84);
        com.google.javascript.rhino.jstype.ObjectType objectType87 = jSTypeRegistry2.createAnonymousObjectType();
        jSTypeRegistry2.clearNamedTypes();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertNotNull(objectType87);
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        java.util.Spliterator<java.lang.String> strSpliterator95 = strSet94.spliterator();
        java.lang.Object obj96 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = strSet94.remove(obj96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(strSpliterator95);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("{1696980091}");
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        boolean boolean20 = node18.isAssignAdd();
        node18.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node4, node18);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType25 = null;
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 10, node29, node32, node35, 0, (int) (byte) 1);
        java.lang.String str39 = node29.getString();
        boolean boolean40 = node29.isContinue();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        boolean boolean45 = node43.isAssignAdd();
        node43.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship49 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType25, node29, node43);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType50 = null;
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        int int54 = node53.getCharno();
        java.lang.String str55 = node53.getSourceFileName();
        boolean boolean56 = node53.isLabel();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 10, node60, node63, node66, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node70 = node66.getLastSibling();
        boolean boolean71 = node70.isDec();
        boolean boolean72 = node70.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship73 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType50, node53, node70);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray74 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship24, subclassRelationship49, subclassRelationship73 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList75 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList75, subclassRelationshipArray74);
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor78 = subclassRelationshipList75.listIterator(2);
        boolean boolean80 = subclassRelationshipList75.remove((java.lang.Object) true);
        subclassRelationshipList75.clear();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(subclassRelationshipItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("hi!");
        boolean boolean84 = parameterizedType78.isOrdinaryFunction();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable85 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean87 = parameterizedType78.hasOwnProperty("OR ");
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType90 = parameterizedType78.findPropertyType("((Not declared as a constructor))");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType91 = jSType90.autobox();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNull(jSType90);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable6 = jSTypeRegistry2.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType78.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter84 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter84, false);
        boolean boolean88 = jSTypeRegistry86.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray89 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList90 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList90, jSTypeArray89);
        com.google.javascript.rhino.Node node92 = jSTypeRegistry86.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.jstype.FunctionType functionType93 = jSTypeRegistry9.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType83, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.Node node94 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.Node node95 = node94.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node94.setString("STRING \n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PARAM_LIST is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSTypeArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(functionType93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean81 = parameterizedType78.isCheckedUnknownType();
        boolean boolean82 = parameterizedType78.isInstanceType();
        boolean boolean83 = parameterizedType78.isNoObjectType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType84 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean86 = parameterizedType84.isPropertyInExterns("(java.io.IOException)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(parameterizedType84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean8 = node2.hasMoreThanOneChild();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1);
        boolean boolean13 = node2.isEquivalentToTyped(node12);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        int int31 = node30.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship32 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node24, node30);
        boolean boolean33 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node24);
        boolean boolean34 = node24.isDo();
        int int35 = node24.getType();
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node24);
        int int37 = node36.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isTrue();
        node1.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node30 = node26.getLastSibling();
        boolean boolean31 = node30.isDec();
        com.google.javascript.rhino.Node node32 = node7.copyInformationFrom(node30);
        node32.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node35 = node1.useSourceInfoFrom(node32);
        java.lang.String str36 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node35);
        node35.setWasEmptyNode(false);
        boolean boolean39 = node35.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getThrownTypes();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = node9.getNext();
        int int15 = node9.getCharno();
        boolean boolean16 = node9.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getIndexType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType89 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean90 = parameterizedType78.isNominalType();
        boolean boolean91 = parameterizedType78.matchesInt32Context();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNull(enumElementType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(31);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        int int7 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        boolean boolean15 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        jSTypeRegistry2.incrementGeneration();
        boolean boolean18 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = node13.removeFirstChild();
        boolean boolean15 = node13.isNE();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        boolean boolean35 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node26);
        boolean boolean36 = node26.isDo();
        boolean boolean37 = node26.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = new com.google.javascript.rhino.JSTypeExpression(node26, "false");
        com.google.javascript.rhino.Node node40 = jSTypeExpression39.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            node13.addChildrenToFront(node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(assertionFunctionSpecBuilder0);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType8, node18, node24);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType27, node37, node43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = com.google.common.collect.ImmutableList.of(subclassRelationship26, subclassRelationship45);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList47 = subclassRelationshipList46.asList();
        boolean boolean49 = subclassRelationshipList47.contains((java.lang.Object) 12);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator50 = subclassRelationshipList47.spliterator();
        boolean boolean51 = strSet7.removeAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList47);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList52 = subclassRelationshipList47.reverse();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor53 = subclassRelationshipList47.listIterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(subclassRelationshipList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList52);
        org.junit.Assert.assertNotNull(subclassRelationshipItor53);
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesUint32Context();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = functionType62.getParameters();
        boolean boolean72 = functionType62.isNominalConstructor();
        com.google.javascript.rhino.jstype.StaticSlot staticSlot74 = functionType62.getSlot("Object");
        boolean boolean75 = functionType62.isRecordType();
        com.google.javascript.rhino.Node node76 = functionType62.getParametersNode();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(staticSlot74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        node26.putBooleanProp(1, false);
        boolean boolean32 = node26.isCall();
        boolean boolean33 = node26.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        java.lang.String str19 = node9.getString();
        boolean boolean20 = node9.isContinue();
        boolean boolean21 = node9.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType22 = null;
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        int int39 = node38.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship40 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType22, node32, node38);
        com.google.javascript.rhino.Node node41 = node9.copyInformationFromForTree(node38);
        boolean boolean42 = node9.hasChildren();
        com.google.javascript.rhino.Node node43 = node9.getParent();
        boolean boolean44 = node43.isQualifiedName();
        com.google.javascript.rhino.Node node45 = node5.copyInformationFromForTree(node43);
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(43, "Not declared as a constructor", (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType5 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isLabel();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 10, node15, node18, node21, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node25 = node21.getLastSibling();
        boolean boolean26 = node25.isDec();
        boolean boolean27 = node25.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship28 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType5, node8, node25);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection29 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node25);
        java.lang.String[] strArray34 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet35);
        strSet35.clear();
        strSet35.clear();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder40 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        boolean boolean41 = strSet35.contains((java.lang.Object) subclassRelationshipIterableBuilder40);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet35);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node4.getJsDocBuilderForNode();
        boolean boolean44 = node4.isGetElem();
        node4.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeCollection29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        java.lang.String str3 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        com.google.javascript.rhino.Node node18 = node13.getNext();
        boolean boolean19 = node13.isDefaultCase();
        com.google.javascript.rhino.Node node20 = assertionFunctionSpec1.getAssertedParam(node13);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isOr();
        node34.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node40 = node34.getAncestor(2);
        java.lang.Object obj42 = node34.getProp(0);
        boolean boolean43 = node34.isCatch();
        com.google.javascript.rhino.Node node44 = assertionFunctionSpec1.getAssertedParam(node34);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("(Named type with empty name component)");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(markerCollection7);
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = node13.removeFirstChild();
        boolean boolean15 = node13.isNE();
        node13.setSourceEncodedPosition((int) ' ');
        boolean boolean18 = node13.hasChildren();
        boolean boolean20 = node13.getBooleanProp((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.jstype.FunctionType functionType71 = functionType62.getConstructor();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = functionType71.getNormalizedReferenceName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(functionType71);
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType67.getConstructor();
        boolean boolean73 = functionType67.isBooleanObjectType();
        boolean boolean74 = functionType67.isOrdinaryFunction();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType67.getExtendedInterfaces();
        boolean boolean76 = functionType67.isInstanceType();
        com.google.javascript.rhino.jstype.ObjectType objectType77 = functionType67.getPrototype();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectType77);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        boolean boolean37 = node3.hasChild(node30);
        com.google.javascript.rhino.Node node38 = node30.getLastSibling();
        node30.setIsSyntheticBlock(false);
        boolean boolean41 = node30.isNE();
        boolean boolean42 = node30.isRegExp();
        node30.setSourceEncodedPosition((int) (byte) 100);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType45 = null;
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        int int62 = node61.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship63 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType45, node55, node61);
        boolean boolean64 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node55);
        int int65 = node55.getLineno();
        node55.putIntProp(54, 1);
        boolean boolean69 = node55.isGetterDef();
        com.google.javascript.rhino.Node node70 = node55.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = node30.isEquivalentToTyped(node70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(java.io.IOException: java.io.IOException)", (int) (short) 0, 44);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        int int19 = node1.getLineno();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node30.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean53 = node30.hasOneChild();
        int int54 = node30.getType();
        boolean boolean55 = node30.isQuotedString();
        com.google.javascript.rhino.Node node56 = node1.useSourceInfoFrom(node30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        functionType62.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo71);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.restrictByNotNullOrUndefined();
        boolean boolean75 = functionType62.hasOwnProperty("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.UnionType unionType76 = functionType62.toMaybeUnionType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(unionType76);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("({})");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getRestrictedTypeGivenToBooleanOutcome(false);
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        boolean boolean71 = functionType62.hasInstanceType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        jSTypeRegistry2.clearNamedTypes();
        boolean boolean8 = jSTypeRegistry2.hasNamespace("STRING OR ");
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType11 = jSTypeRegistry2.getNativeFunctionType(jSTypeNative10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        boolean boolean37 = node28.hasChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean40 = node39.isTrue();
        node39.setQuotedString();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, node58, node61, node64, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = node64.getLastSibling();
        boolean boolean69 = node68.isDec();
        com.google.javascript.rhino.Node node70 = node45.copyInformationFrom(node68);
        node70.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node73 = node39.useSourceInfoFrom(node70);
        int int75 = node70.getIntProp(0);
        boolean boolean76 = node70.isArrayLit();
        com.google.javascript.rhino.Node node77 = node70.getFirstChild();
        com.google.javascript.rhino.Node node78 = node28.srcref(node70);
        boolean boolean79 = node70.isGetElem();
        java.lang.String str80 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node70);
        boolean boolean81 = node70.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Not declared as a constructor");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry17.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = jSTypeRegistry17.getErrorReporter();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable25 = jSTypeRegistry17.getTypesWithProperty("Function");
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node5, jSTypeRegistry17);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node5.new FileLevelJsDocBuilder();
        boolean boolean28 = node5.isHook();
        boolean boolean29 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node5);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNull(errorReporter23);
        org.junit.Assert.assertNotNull(jSTypeIterable25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable iterable71 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72, false);
        boolean boolean76 = jSTypeRegistry74.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.Node node80 = jSTypeRegistry74.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry74.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        boolean boolean86 = functionType62.isSubtype(jSType85);
        com.google.javascript.rhino.jstype.FunctionType functionType87 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.Node node88 = functionType87.getRootNode();
        boolean boolean89 = functionType87.isNullable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterable71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(functionType87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node3.setStaticSourceFile(staticSourceFile16);
        java.lang.Object obj19 = node3.getProp(37);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.isFunction();
        node3.addChildToFront(node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        boolean boolean39 = node38.isDec();
        boolean boolean40 = node38.isOr();
        node38.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node43 = node22.srcref(node38);
        boolean boolean44 = node22.isObjectLit();
        boolean boolean45 = node22.isComma();
        boolean boolean46 = node22.isTrue();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean49 = node48.isTrue();
        node48.setQuotedString();
        node48.detachChildren();
        boolean boolean52 = node22.isEquivalentTo(node48);
        boolean boolean53 = node22.isReturn();
        boolean boolean54 = node22.isExprResult();
        java.lang.String str55 = node22.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship18 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList40, subclassRelationshipArray39);
        int int42 = subclassRelationshipList40.size();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator43 = subclassRelationshipList40.spliterator();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator44 = subclassRelationshipList40.spliterator();
        int int45 = subclassRelationshipList40.size();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator43);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.isFor();
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) node27);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 1, (int) (short) 100, 31);
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node33);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getPositionOnStartLine();
        int int4 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType41 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        int int58 = node57.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship59 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType41, node51, node57);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType60 = null;
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship78 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType60, node70, node76);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList79 = com.google.common.collect.ImmutableList.of(subclassRelationship59, subclassRelationship78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList80 = subclassRelationshipList79.asList();
        boolean boolean81 = subclassRelationshipList38.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList80);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor82 = subclassRelationshipList80.iterator();
        java.lang.String str83 = subclassRelationshipList80.toString();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor84 = subclassRelationshipList80.listIterator();
        java.lang.Object[] objArray85 = subclassRelationshipList80.toArray();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList79);
        org.junit.Assert.assertNotNull(subclassRelationshipList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor82);
        org.junit.Assert.assertNotNull(subclassRelationshipItor84);
        org.junit.Assert.assertNotNull(objArray85);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        java.lang.String str90 = enumType88.getDisplayName();
        boolean boolean92 = enumType88.isPropertyInExterns("(Not declared as a constructor)");
        boolean boolean93 = enumType88.hasCachedValues();
        com.google.javascript.rhino.JSDocInfo jSDocInfo94 = enumType88.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumType88.getPropertyType("true");
        com.google.javascript.rhino.Node node97 = enumType88.getSource();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType98 = enumType88.toMaybeParameterizedType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = parameterizedType98.hasAnyTemplate();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(jSDocInfo94);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertNull(node97);
        org.junit.Assert.assertNull(parameterizedType98);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType25 = null;
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 10, node29, node32, node35, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship43 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType25, node35, node41);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList44 = com.google.common.collect.ImmutableList.of(subclassRelationship24, subclassRelationship43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList45 = subclassRelationshipList44.asList();
        boolean boolean47 = subclassRelationshipList45.contains((java.lang.Object) 12);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator48 = subclassRelationshipList45.spliterator();
        boolean boolean49 = subclassRelationshipList45.isEmpty();
        boolean boolean50 = strSet5.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList45);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList44);
        org.junit.Assert.assertNotNull(subclassRelationshipList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("hi!");
        boolean boolean84 = parameterizedType78.isOrdinaryFunction();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable85 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean87 = parameterizedType78.hasOwnProperty("OR ");
        boolean boolean88 = parameterizedType78.canBeCalled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("(())");
        java.lang.String str2 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(())" + "'", str2, "(())");
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        boolean boolean5 = node3.isExprResult();
        boolean boolean6 = node3.isSwitch();
        boolean boolean7 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        boolean boolean13 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(16384, node3, node12, 16384, 10);
        boolean boolean17 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node12);
        boolean boolean18 = node12.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec6 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType7 = null;
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship25 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType7, node17, node23);
        int int27 = node17.getIntProp((int) (byte) 0);
        boolean boolean28 = node17.isWhile();
        boolean boolean29 = node17.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = null;
        com.google.javascript.rhino.jstype.JSType jSType31 = assertionFunctionSpec6.getAssertedType(node17, jSTypeRegistry30);
        boolean boolean32 = node17.isParamList();
        com.google.javascript.rhino.Node node33 = node2.clonePropsFrom(node17);
        java.lang.String str34 = node33.toStringTree();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        java.lang.String str48 = node38.getString();
        boolean boolean49 = node38.isContinue();
        boolean boolean50 = node38.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType51 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType51, node61, node67);
        com.google.javascript.rhino.Node node70 = node38.copyInformationFromForTree(node67);
        java.lang.String str71 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node70);
        boolean boolean72 = node70.isWith();
        com.google.javascript.rhino.Node node73 = node70.getParent();
        com.google.javascript.rhino.Node node74 = node33.copyInformationFromForTree(node70);
        boolean boolean75 = node74.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) 10, node79, node82, node85, 0, (int) (byte) 1);
        java.lang.String str89 = node79.getString();
        boolean boolean90 = node79.isReturn();
        com.google.javascript.rhino.Node node91 = node79.detachFromParent();
        boolean boolean92 = node91.isAssignAdd();
        int int94 = node91.getIntProp((int) (short) 0);
        com.google.javascript.rhino.Node node95 = node74.useSourceInfoFromForTree(node91);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR \n" + "'", str34, "OR \n");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isOr();
        node13.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node18 = node13.cloneTree();
        boolean boolean19 = node13.isTypeOf();
        boolean boolean20 = node13.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.FunctionType functionType69 = functionType62.getBindReturnType(38);
        boolean boolean70 = functionType62.canBeCalled();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.getTypeOfThis();
        boolean boolean72 = functionType62.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        java.lang.String str94 = enumType88.getReferenceName();
        com.google.javascript.rhino.jstype.ObjectType.Property property96 = enumType88.getSlot("java.io.IOException: java.io.IOException: java.io.IOException");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str94, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertNull(property96);
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.hasDisplayName();
        boolean boolean84 = parameterizedType78.isUnknownType();
        boolean boolean85 = parameterizedType78.isUnknownType();
        boolean boolean86 = parameterizedType78.canBeCalled();
        com.google.javascript.rhino.jstype.FunctionType functionType87 = parameterizedType78.toMaybeFunctionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(functionType87);
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType71.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType71.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77, false);
        boolean boolean81 = jSTypeRegistry79.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry79.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry2.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType76, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        boolean boolean87 = functionType86.hasAnyTemplate();
        boolean boolean88 = functionType86.isObject();
        com.google.javascript.rhino.jstype.JSType jSType89 = functionType86.getIndexType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(jSType89);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean90 = enumType88.hasOwnProperty("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        boolean boolean92 = enumType88.hasOwnProperty("Unknown class name");
        boolean boolean94 = enumType88.removeProperty("STRING hi! [source_file: Not declared as a constructor]");
        com.google.javascript.rhino.jstype.JSType jSType96 = enumType88.getPropertyType("java.io.IOException: (Function)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSType96);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.isEnumElementType();
        boolean boolean70 = functionType62.isNullable();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllExtendedInterfaces();
        com.google.javascript.rhino.jstype.UnionType unionType72 = functionType62.toMaybeUnionType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = unionType72.matchesNumberContext();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNull(unionType72);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.isStringValueType();
        java.lang.String str72 = functionType62.getDisplayName();
        com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.getBindReturnType((int) (short) 1);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType62.getOwnImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        int int4 = node3.getType();
        node3.setWasEmptyNode(true);
        int int7 = node3.getType();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING hi! 100 [empty_block: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesStringContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType98 = enumElementType97.getConstructor();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertNotNull(enumElementType97);
        org.junit.Assert.assertNull(functionType98);
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry2.getType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        boolean boolean19 = jSTypeRegistry17.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        com.google.javascript.rhino.Node node23 = jSTypeRegistry17.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        com.google.javascript.rhino.jstype.JSType jSType28 = jSTypeRegistry17.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        boolean boolean33 = jSTypeRegistry31.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.Node node37 = jSTypeRegistry31.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry31.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        boolean boolean47 = jSTypeRegistry45.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray48 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList49, jSTypeArray48);
        com.google.javascript.rhino.Node node51 = jSTypeRegistry45.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList49);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry45.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSType56.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        boolean boolean62 = jSTypeRegistry60.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList64, jSTypeArray63);
        com.google.javascript.rhino.Node node66 = jSTypeRegistry60.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList64);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry60.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSType71.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray73 = new com.google.javascript.rhino.jstype.JSType[] { jSType42, jSType57, jSType72 };
        com.google.javascript.rhino.jstype.FunctionType functionType74 = jSTypeRegistry14.createFunctionType(jSType28, jSTypeArray73);
        boolean boolean75 = functionType74.matchesNumberContext();
        boolean boolean77 = functionType74.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry9.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType74);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry9.createUnionType(jSTypeArray79);
        com.google.javascript.rhino.Node node81 = jSTypeRegistry2.createOptionalParameters(jSTypeArray79);
        jSTypeRegistry2.clearTemplateTypeNames();
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType84 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry2.createOptionalType(jSType84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertNotNull(jSTypeArray73);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean81 = parameterizedType78.isPropertyTypeInferred("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean82 = parameterizedType78.isString();
        boolean boolean84 = parameterizedType78.hasProperty("");
        boolean boolean86 = parameterizedType78.isPropertyInExterns("(OR  [opt_arg: 1])");
        boolean boolean88 = parameterizedType78.removeProperty("InputId: OR  0");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean89 = enumType88.isTemplateType();
        java.lang.Iterable iterable90 = enumType88.getCtorImplementedInterfaces();
        int int91 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType92 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.JSType jSType94 = enumType88.getPropertyType("InputId: enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        boolean boolean95 = enumType88.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(iterable90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(objectType92);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node16 = node13.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream59 = subclassRelationshipList38.parallelStream();
        java.lang.Object[] objArray60 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        java.lang.String str74 = node64.getString();
        boolean boolean75 = node64.isContinue();
        boolean boolean76 = node64.isCall();
        boolean boolean77 = node64.isGetterDef();
        boolean boolean78 = node64.isGetProp();
        boolean boolean79 = node64.wasEmptyNode();
        boolean boolean80 = subclassRelationshipList38.contains((java.lang.Object) node64);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList81 = subclassRelationshipList38.asList();
        java.lang.String str82 = subclassRelationshipList81.toString();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor83 = subclassRelationshipList81.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList81);
        org.junit.Assert.assertNotNull(subclassRelationshipItor83);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.hasReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.findPropertyType("");
        com.google.javascript.rhino.jstype.ObjectType.Property property84 = parameterizedType78.getSlot("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean85 = parameterizedType78.matchesStringContext();
        boolean boolean86 = parameterizedType78.isNoObjectType();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.findPropertyType("STRING hi!");
        com.google.javascript.rhino.Node node90 = parameterizedType78.getPropertyNode("(Function)");
        boolean boolean92 = parameterizedType78.removeProperty("InputId: Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType82);
        org.junit.Assert.assertNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection24 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node20);
        com.google.javascript.rhino.InputId inputId25 = node20.getInputId();
        node20.setVarArgs(false);
        boolean boolean28 = node20.hasMoreThanOneChild();
        boolean boolean29 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node20);
        com.google.javascript.rhino.Node node30 = node20.cloneNode();
        int int31 = node20.getType();
        java.lang.String str32 = node20.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeCollection24);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = node13.removeFirstChild();
        boolean boolean15 = node13.isNE();
        node13.putIntProp(50, 40);
        boolean boolean19 = node13.isAdd();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType39 = null;
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        int int56 = node55.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship57 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType39, node49, node55);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList58 = com.google.common.collect.ImmutableList.of(subclassRelationship38, subclassRelationship57);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList59 = subclassRelationshipList58.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor60 = subclassRelationshipList58.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.isNoShadow();
        boolean boolean63 = jSDocInfo61.isExport();
        boolean boolean64 = jSDocInfo61.isNoShadow();
        boolean boolean65 = subclassRelationshipList58.equals((java.lang.Object) jSDocInfo61);
        node13.setJSDocInfo(jSDocInfo61);
        boolean boolean67 = node13.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList58);
        org.junit.Assert.assertNotNull(subclassRelationshipList59);
        org.junit.Assert.assertNotNull(subclassRelationshipItor60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node3.setStaticSourceFile(staticSourceFile16);
        java.lang.Object obj19 = node3.getProp(37);
        boolean boolean20 = node3.isDec();
        com.google.javascript.rhino.Node node21 = node3.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesNumberContext();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType96 = enumElementType93.toMaybeParameterizedType();
        boolean boolean97 = enumElementType93.isObject();
        java.lang.String str98 = enumElementType93.getReferenceName();
        boolean boolean99 = enumElementType93.hasReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(parameterizedType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)" + "'", str98, "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        boolean boolean95 = parameterizedType78.isNoResolvedType();
        boolean boolean96 = parameterizedType78.isInterface();
        boolean boolean97 = parameterizedType78.matchesStringContext();
        boolean boolean98 = parameterizedType78.isConstructor();
        boolean boolean99 = parameterizedType78.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        int int20 = node17.getLength();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        java.lang.String str25 = node23.getSourceFileName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        com.google.javascript.rhino.Node node27 = node17.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean28 = node17.isOr();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean33 = node32.isFromExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection34 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node32);
        boolean boolean35 = node32.isSetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isCatch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.hasChildren();
        com.google.javascript.rhino.Node node43 = node40.removeChildren();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(48, node17, node32, node40, 4095, 0);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        // The following exception was thrown during execution in test generation
        try {
            node46.setSideEffectFlags(sideEffectFlags48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean6 = node2.isComma();
        boolean boolean7 = node2.isStringKey();
        com.google.javascript.rhino.Node node8 = node2.detachFromParent();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("InputId: OR ");
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        java.lang.Iterable iterable95 = parameterizedType78.getCtorImplementedInterfaces();
        java.util.Set set96 = parameterizedType78.getOwnPropertyNames();
        boolean boolean97 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.ObjectType objectType98 = parameterizedType78.dereference();
        boolean boolean99 = parameterizedType78.isFunctionPrototypeType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(iterable95);
        org.junit.Assert.assertNotNull(set96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(objectType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        boolean boolean67 = functionType62.isUnknownType();
        com.google.javascript.rhino.Node node69 = functionType62.getPropertyNode("java.io.IOException: ");
        com.google.javascript.rhino.jstype.ObjectType.Property property71 = functionType62.getSlot("Unknown class name");
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList72 = functionType62.getSubTypes();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = functionType62.getParameters();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(property71);
        org.junit.Assert.assertNull(functionTypeList72);
        org.junit.Assert.assertNotNull(nodeIterable73);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getEnumParameterType();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(strCollection5);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        java.lang.String str64 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType65 = functionType62.getIndexType();
        com.google.javascript.rhino.jstype.JSType jSType66 = functionType62.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType67 = functionType62.cloneWithoutArrowType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSType66);
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        com.google.javascript.rhino.Node node36 = node28.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = node36.isInc();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = parameterizedType78.getJSDocInfo();
        java.util.Set set83 = parameterizedType78.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.FunctionType functionType84 = parameterizedType78.getOwnerFunction();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.getIndexType();
        boolean boolean87 = parameterizedType78.hasProperty("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = parameterizedType78.hasAnyTemplateInternal();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(jSDocInfo82);
        org.junit.Assert.assertNotNull(set83);
        org.junit.Assert.assertNull(functionType84);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.isNoShadow();
        boolean boolean3 = jSDocInfo1.isExpose();
        boolean boolean4 = jSDocInfo1.containsDeclaration();
        boolean boolean5 = jSDocInfo1.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node7 = namePosition6.getItem();
        namePosition6.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList13 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition6);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        boolean boolean18 = node16.isAssignAdd();
        boolean boolean19 = node16.isNot();
        java.lang.String str20 = node16.toString();
        namePosition6.setItem(node16);
        boolean boolean22 = node16.isIf();
        jSDocInfo1.setAssociatedNode(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node16);
        boolean boolean26 = node16.isDefaultCase();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(32, node16);
        boolean boolean28 = node16.isParamList();
        boolean boolean29 = node16.isOnlyModifiesThisCall();
        boolean boolean31 = node16.getBooleanProp((int) (short) -1);
        node16.setSourceEncodedPositionForTree(30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(nodeSourcePositionList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR " + "'", str20, "OR ");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.canBeCalled();
        boolean boolean95 = enumElementType93.isObject();
        boolean boolean97 = enumElementType93.isPropertyTypeDeclared("OR  [quoted: 1]");
        boolean boolean98 = enumElementType93.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        boolean boolean93 = enumType88.matchesNumberContext();
        boolean boolean95 = enumType88.hasOwnProperty("(Function)");
        com.google.javascript.rhino.jstype.FunctionType functionType96 = enumType88.getOwnerFunction();
        boolean boolean97 = enumType88.isStringValueType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(functionType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator59 = subclassRelationshipList38.spliterator();
        int int60 = subclassRelationshipList38.size();
        boolean boolean61 = subclassRelationshipList38.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.findPropertyType("GETELEM false");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = parameterizedType78.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNull(jSType83);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean8 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesNumberContext();
        java.lang.String str96 = enumElementType93.getDisplayName();
        int int97 = enumElementType93.getPropertiesCount();
        boolean boolean98 = enumElementType93.matchesObjectContext();
        int int99 = enumElementType93.getPropertiesCount();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder1 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder2 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>> subclassRelationshipIterableBuilderList3 = com.google.common.collect.ImmutableList.of(subclassRelationshipIterableBuilder0, subclassRelationshipIterableBuilder1, subclassRelationshipIterableBuilder2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType4 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, node8, node11, node14, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship22 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType4, node14, node20);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        int int40 = node39.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType23, node33, node39);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList42 = com.google.common.collect.ImmutableList.of(subclassRelationship22, subclassRelationship41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 10, node46, node49, node52, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node56 = node52.getLastSibling();
        boolean boolean57 = node56.isDec();
        node56.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node60 = node56.cloneTree();
        int int61 = subclassRelationshipList42.indexOf((java.lang.Object) node60);
        java.lang.String str62 = subclassRelationshipList42.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str64 = ternaryValue63.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str66 = ternaryValue65.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue63.or(ternaryValue65);
        boolean boolean68 = subclassRelationshipList42.contains((java.lang.Object) ternaryValue63);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = booleanLiteralSet69.union(booleanLiteralSet70);
        boolean boolean72 = subclassRelationshipList42.contains((java.lang.Object) booleanLiteralSet69);
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder73 = subclassRelationshipIterableBuilder1.add((java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList42);
        java.lang.Object[] objArray74 = subclassRelationshipList42.toArray();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator75 = subclassRelationshipList42.spliterator();
        com.google.javascript.rhino.JSDocInfo.Marker marker76 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker77 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker[] markerArray78 = new com.google.javascript.rhino.JSDocInfo.Marker[] { marker76, marker77 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList79 = com.google.common.collect.ImmutableList.copyOf(markerArray78);
        int int80 = subclassRelationshipList42.indexOf((java.lang.Object) markerList79);
        int int81 = subclassRelationshipList42.size();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList82 = subclassRelationshipList42.reverse();
        boolean boolean83 = subclassRelationshipList82.isEmpty();
        org.junit.Assert.assertNotNull(subclassRelationshipIterableBuilderList3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "false" + "'", str64, "false");
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "false" + "'", str66, "false");
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipIterableBuilder73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator75);
        org.junit.Assert.assertNotNull(markerArray78);
        org.junit.Assert.assertNotNull(markerList79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(subclassRelationshipList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker8.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = marker8.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker11.getDescription();
        com.google.javascript.rhino.InputId inputId17 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        java.lang.String str18 = inputId17.toString();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition20 = marker19.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = marker19.getType();
        boolean boolean22 = inputId17.equals((java.lang.Object) marker19);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker5, marker8, marker11, marker19);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition24 = marker19.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker26 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker26.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker26.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker29 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition30 = marker29.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = marker29.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = marker29.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = marker29.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = marker29.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker35 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition36 = marker35.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = marker35.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = marker35.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker39 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition40 = marker39.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = marker39.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = marker39.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = marker39.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList44 = com.google.common.collect.ImmutableList.of(marker0, marker19, marker26, marker29, marker35, marker39);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker39.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(typePosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "InputId: Not declared as a constructor" + "'", str18, "InputId: Not declared as a constructor");
        org.junit.Assert.assertNull(nodeSourcePosition20);
        org.junit.Assert.assertNull(typePosition21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(nodeSourcePosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNull(nodeSourcePosition30);
        org.junit.Assert.assertNull(typePosition31);
        org.junit.Assert.assertNull(stringPosition32);
        org.junit.Assert.assertNull(typePosition33);
        org.junit.Assert.assertNull(stringPosition34);
        org.junit.Assert.assertNull(stringPosition36);
        org.junit.Assert.assertNull(typePosition37);
        org.junit.Assert.assertNull(typePosition38);
        org.junit.Assert.assertNull(nodeSourcePosition40);
        org.junit.Assert.assertNull(stringPosition41);
        org.junit.Assert.assertNull(typePosition42);
        org.junit.Assert.assertNull(typePosition43);
        org.junit.Assert.assertNotNull(markerList44);
        org.junit.Assert.assertNull(stringPosition45);
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        com.google.javascript.rhino.jstype.UnionType unionType70 = functionType62.toMaybeUnionType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.getTypeOfThis();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = functionType62.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(unionType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(jSDocInfo72);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship18 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList40, subclassRelationshipArray39);
        int int42 = subclassRelationshipList40.size();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator43 = subclassRelationshipList40.spliterator();
        boolean boolean44 = subclassRelationshipList40.isEmpty();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType45 = null;
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        int int62 = node61.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship63 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType45, node55, node61);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType64 = null;
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        int int81 = node80.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType64, node74, node80);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList83 = com.google.common.collect.ImmutableList.of(subclassRelationship63, subclassRelationship82);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList84 = subclassRelationshipList83.asList();
        boolean boolean85 = subclassRelationshipList84.isEmpty();
        boolean boolean86 = subclassRelationshipList84.isEmpty();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList87 = subclassRelationshipList84.reverse();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream88 = subclassRelationshipList87.stream();
        boolean boolean89 = subclassRelationshipList40.removeAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList87);
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList87.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList83);
        org.junit.Assert.assertNotNull(subclassRelationshipList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList87);
        org.junit.Assert.assertNotNull(subclassRelationshipStream88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getEnumParameterType();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDebugger();
        node13.setOptionalArg(true);
        java.lang.String str17 = node13.getQualifiedName();
        com.google.javascript.rhino.Node node18 = node13.detachFromParent();
        boolean boolean19 = node18.isTrue();
        boolean boolean20 = node18.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode[] resolveModeArray0 = new com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode> resolveModeList1 = com.google.common.collect.ImmutableList.copyOf(resolveModeArray0);
        org.junit.Assert.assertNotNull(resolveModeArray0);
        org.junit.Assert.assertNotNull(resolveModeList1);
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType83 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean84 = parameterizedType78.matchesUint32Context();
        boolean boolean86 = parameterizedType78.hasProperty("Object");
        boolean boolean87 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getIndexType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(parameterizedType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(typePosition7);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = enumType88.getOwnerFunction();
        boolean boolean92 = enumType88.removeProperty("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot94 = enumType88.getOwnSlot("{945607906}");
        boolean boolean95 = enumType88.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean7 = node6.isFromExterns();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType8, node18, node24);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType27, node37, node43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = com.google.common.collect.ImmutableList.of(subclassRelationship26, subclassRelationship45);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor47 = subclassRelationshipList46.iterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType48 = null;
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        int int52 = node51.getCharno();
        java.lang.String str53 = node51.getSourceFileName();
        boolean boolean54 = node51.isLabel();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, node58, node61, node64, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = node64.getLastSibling();
        boolean boolean69 = node68.isDec();
        boolean boolean70 = node68.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship71 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType48, node51, node68);
        boolean boolean72 = node51.isParamList();
        int int73 = node51.getSourcePosition();
        boolean boolean74 = node51.isFalse();
        int int75 = node51.getSourceOffset();
        boolean boolean76 = node51.isNull();
        boolean boolean77 = node51.isCatch();
        int int78 = subclassRelationshipList46.indexOf((java.lang.Object) node51);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        int int82 = node81.getCharno();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(43, node6, node51, node81);
        com.google.javascript.rhino.Node node84 = node51.detachFromParent();
        com.google.javascript.rhino.Node node85 = node1.useSourceInfoIfMissingFrom(node51);
        com.google.javascript.rhino.Node node86 = node1.getFirstChild();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable87 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor88 = ancestorIterable87.iterator();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(subclassRelationshipItor47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNotNull(ancestorIterable87);
        org.junit.Assert.assertNotNull(nodeItor88);
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getEnumParameterType();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(nodeCollection6);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(31, 48, (-1));
        boolean boolean4 = node3.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream59 = subclassRelationshipList38.parallelStream();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = subclassRelationshipList38.get((int) (short) 1);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor62 = subclassRelationshipList38.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream59);
        org.junit.Assert.assertNotNull(subclassRelationship61);
        org.junit.Assert.assertNotNull(subclassRelationshipItor62);
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node9.isInc();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType15 = null;
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        int int32 = node31.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship33 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType15, node25, node31);
        boolean boolean34 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node25);
        boolean boolean35 = node25.isDo();
        boolean boolean36 = node25.isThis();
        com.google.javascript.rhino.Node node37 = node9.clonePropsFrom(node25);
        com.google.javascript.rhino.Node node38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node39 = node37.clonePropsFrom(node38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isOverride();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        int int11 = strSet10.size();
        com.google.javascript.rhino.jstype.TernaryValue[][][][] ternaryValueArray12 = new com.google.javascript.rhino.jstype.TernaryValue[][][][] {};
        com.google.javascript.rhino.jstype.TernaryValue[][][][] ternaryValueArray13 = strSet10.toArray(ternaryValueArray12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(ternaryValueArray12);
        org.junit.Assert.assertNotNull(ternaryValueArray13);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        boolean boolean6 = jSTypeRegistry2.hasNamespace("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable8 = jSTypeRegistry2.getTypesWithProperty("OR  [is_optional_param: 100]");
        boolean boolean10 = jSTypeRegistry2.hasNamespace("{945607906}");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        boolean boolean18 = jSTypeRegistry16.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        boolean boolean32 = jSTypeRegistry30.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry30.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry30.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        boolean boolean46 = jSTypeRegistry44.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry44.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry44.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSType55.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        boolean boolean61 = jSTypeRegistry59.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry59.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry59.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSType70.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] { jSType41, jSType56, jSType71 };
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry13.createFunctionType(jSType27, jSTypeArray72);
        boolean boolean74 = functionType73.matchesNumberContext();
        boolean boolean76 = functionType73.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType73.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node79 = functionType73.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType80 = functionType73.getImplicitPrototype();
        boolean boolean81 = objectType80.isUnknownType();
        java.lang.String str82 = objectType80.toString();
        java.lang.String str83 = objectType80.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType84 = objectType80.getConstructor();
        boolean boolean85 = objectType80.isNumberObjectType();
        boolean boolean86 = objectType80.isDateType();
        boolean boolean88 = objectType80.hasProperty("(InputId: OR )");
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection89 = jSTypeRegistry2.getDirectImplementors(objectType80);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node91 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Function" + "'", str82, "Function");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Function" + "'", str83, "Function");
        org.junit.Assert.assertNotNull(functionType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection89);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(37, "", (int) (byte) 10, (int) (byte) 10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node4.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(staticSourceFile5);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.isExpose();
        boolean boolean87 = jSDocInfo85.isExpose();
        boolean boolean88 = jSDocInfo85.hasEnumParameterType();
        java.lang.String str89 = jSDocInfo85.getMeaning();
        boolean boolean90 = jSDocInfo85.isNoShadow();
        boolean boolean91 = jSDocInfo85.isNoShadow();
        java.lang.String str92 = jSDocInfo85.toString();
        parameterizedType78.setJSDocInfo(jSDocInfo85);
        boolean boolean94 = parameterizedType78.canBeCalled();
        boolean boolean95 = parameterizedType78.canBeCalled();
        int int96 = parameterizedType78.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = parameterizedType78.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "JSDocInfo" + "'", str92, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNull(enumElementType97);
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        functionType62.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo71);
        boolean boolean73 = functionType62.isObject();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = functionType62.getOwnPropertyJSDocInfo("{945607906}");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = functionType62.getPossibleToBooleanOutcomes();
        boolean boolean77 = functionType62.isArrayType();
        boolean boolean78 = functionType62.isReturnTypeInferred();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 2147483647");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.isInterface();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        boolean boolean13 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExpose();
        boolean boolean16 = jSDocInfo14.isExpose();
        boolean boolean17 = jSDocInfo14.hasEnumParameterType();
        java.lang.String str18 = jSDocInfo14.getMeaning();
        boolean boolean19 = jSDocInfo14.isNoShadow();
        boolean boolean20 = jSDocInfo14.isNoShadow();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean24 = node23.isName();
        com.google.javascript.rhino.Node node26 = node23.getAncestor(31);
        java.util.Set<java.lang.String> strSet27 = node23.getDirectives();
        jSDocInfo14.setAssociatedNode(node23);
        boolean boolean29 = jSDocInfo14.isConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = jSDocInfo30.getTemplateTypeNames();
        boolean boolean32 = jSDocInfo30.isOverride();
        boolean boolean34 = jSDocInfo30.hasParameter("OR  0");
        boolean boolean35 = jSDocInfo30.isConstructor();
        java.lang.String str36 = jSDocInfo30.getMeaning();
        java.lang.String str37 = jSDocInfo30.getLicense();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str39 = jSDocInfo38.getVersion();
        boolean boolean40 = jSDocInfo38.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo38.setVisibility(visibility41);
        jSDocInfo30.setVisibility(visibility41);
        jSDocInfo14.setVisibility(visibility41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str46 = jSDocInfo45.getVersion();
        java.lang.String str47 = jSDocInfo45.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getParameterType("Not declared as a constructor");
        java.lang.String str50 = jSDocInfo45.getLendsName();
        boolean boolean51 = jSDocInfo45.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getVersion();
        boolean boolean54 = jSDocInfo52.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo52.setVisibility(visibility55);
        jSDocInfo45.setVisibility(visibility55);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.isExpose();
        boolean boolean61 = jSDocInfo59.isExpose();
        boolean boolean62 = jSDocInfo59.hasEnumParameterType();
        java.lang.String str63 = jSDocInfo59.getMeaning();
        boolean boolean64 = jSDocInfo59.isNoShadow();
        boolean boolean65 = jSDocInfo59.isNoShadow();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean69 = node68.isName();
        com.google.javascript.rhino.Node node71 = node68.getAncestor(31);
        java.util.Set<java.lang.String> strSet72 = node68.getDirectives();
        jSDocInfo59.setAssociatedNode(node68);
        boolean boolean74 = jSDocInfo59.isConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = jSDocInfo75.getTemplateTypeNames();
        boolean boolean77 = jSDocInfo75.isOverride();
        boolean boolean79 = jSDocInfo75.hasParameter("OR  0");
        boolean boolean80 = jSDocInfo75.isConstructor();
        java.lang.String str81 = jSDocInfo75.getMeaning();
        java.lang.String str82 = jSDocInfo75.getLicense();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str84 = jSDocInfo83.getVersion();
        boolean boolean85 = jSDocInfo83.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo83.setVisibility(visibility86);
        jSDocInfo75.setVisibility(visibility86);
        jSDocInfo59.setVisibility(visibility86);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList90 = com.google.common.collect.ImmutableList.of(visibility41, visibility55, visibility58, visibility86);
        jSDocInfo0.setVisibility(visibility41);
        boolean boolean92 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + visibility86 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility86.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityList90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + visibility93 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility93.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType82 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean84 = parameterizedType78.isPropertyInExterns("(InputId: OR )");
        boolean boolean85 = parameterizedType78.isNominalConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = parameterizedType78.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.unboxesTo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(parameterizedType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSDocInfo86);
        org.junit.Assert.assertNull(jSType87);
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList70 = functionType62.getSubTypes();
        int int71 = functionType62.getPropertiesCount();
        boolean boolean72 = functionType62.matchesObjectContext();
        boolean boolean74 = functionType62.isPropertyTypeDeclared("(Named type with empty name component)");
        com.google.javascript.rhino.Node node76 = functionType62.getPropertyNode("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.jstype.FunctionType functionType78 = functionType62.getBindReturnType(45);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = functionType62.getParameters();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNull(functionTypeList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertNotNull(nodeIterable79);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.String str67 = functionType62.getNormalizedReferenceName();
        boolean boolean68 = functionType62.isGlobalThisType();
        boolean boolean70 = functionType62.hasOwnProperty("OR ");
        com.google.javascript.rhino.Node node71 = functionType62.getSource();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSType73.dereference();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNotNull(objectType74);
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry2.getType("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable8 = jSTypeRegistry2.getTypesWithProperty("{1029918095}");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = functionType71.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.FunctionType functionType78 = functionType71.getBindReturnType(38);
        boolean boolean79 = functionType71.isNativeObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = functionType71.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNotNull(jSTypeIterable8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objectType80);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node18 = node5.getLastChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllImplementedInterfaces();
        boolean boolean73 = functionType62.hasProperty("");
        boolean boolean74 = functionType62.hasAnyTemplateInternal();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType62.getImplicitPrototype();
        com.google.javascript.rhino.jstype.UnionType unionType76 = functionType62.toMaybeUnionType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNull(unionType76);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.UnionType unionType80 = parameterizedType78.toMaybeUnionType();
        java.lang.String str81 = parameterizedType78.getReferenceName();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType84 = parameterizedType78.findPropertyType("BITXOR");
        boolean boolean86 = parameterizedType78.isPropertyInExterns("Named type with empty name component");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType95 = enumType88.getElementsType();
        boolean boolean97 = enumElementType95.isPropertyTypeDeclared("Unknown class name");
        com.google.javascript.rhino.jstype.JSType jSType98 = enumElementType95.getPrimitiveType();
        boolean boolean99 = jSType98.isFunctionPrototypeType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNotNull(enumElementType95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(jSType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("java.io.IOException: java.io.IOException: java.io.IOException: (Not declared as a constructor)");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isConstructor();
        com.google.javascript.rhino.jstype.ObjectType objectType81 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) parameterizedType78);
        com.google.javascript.rhino.jstype.FunctionType functionType82 = parameterizedType78.getConstructor();
        boolean boolean83 = parameterizedType78.canBeCalled();
        boolean boolean85 = parameterizedType78.hasOwnProperty("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.jstype.ObjectType objectType86 = parameterizedType78.getImplicitPrototype();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNull(functionType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectType86);
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        functionType62.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo71);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = functionType62.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType76 = functionType62.getPropertyType("java.io.IOException: ");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.FunctionType> functionTypeList77 = com.google.common.collect.ImmutableList.of(functionType62);
        com.google.javascript.rhino.jstype.JSType jSType78 = functionType62.restrictByNotNullOrUndefined();
        boolean boolean79 = jSType78.isFunctionType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNotNull(functionTypeList77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        java.lang.String str95 = enumElementType93.getDisplayName();
        int int96 = enumElementType93.getPropertiesCount();
        boolean boolean97 = enumElementType93.matchesStringContext();
        boolean boolean98 = enumElementType93.matchesNumberContext();
        boolean boolean99 = enumElementType93.isNominalType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.FunctionType functionType89 = functionType75.toMaybeFunctionType();
        boolean boolean90 = functionType75.isNullType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean93 = jSDocInfo92.isNoShadow();
        java.lang.String str94 = jSDocInfo92.getDescription();
        functionType75.setPropertyJSDocInfo("STRING OR  [quoted: 1]", jSDocInfo92);
        java.lang.String str96 = jSDocInfo92.getDescription();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        int int22 = node12.getIntProp((int) (byte) 0);
        boolean boolean23 = node12.isWhile();
        boolean boolean24 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node12, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        boolean boolean40 = node33.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node44 = node33.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node45 = assertionFunctionSpec1.getAssertedParam(node43);
        boolean boolean46 = node43.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node47 = node43.removeFirstChild();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.dereference();
        boolean boolean72 = functionType62.isNominalType();
        boolean boolean73 = functionType62.isEnumElementType();
        boolean boolean74 = functionType62.isNativeObjectType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        java.util.Set<java.lang.String> strSet95 = parameterizedType78.getPropertyNames();
        boolean boolean96 = parameterizedType78.isNoResolvedType();
        boolean boolean97 = parameterizedType78.isNominalType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        boolean boolean86 = functionType75.hasImplementedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType88 = functionType75.getBindReturnType((int) (short) 0);
        boolean boolean89 = functionType75.isUnknownType();
        com.google.javascript.rhino.Node node90 = functionType75.getRootNode();
        boolean boolean92 = functionType75.hasOwnProperty("{1318687222}");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(functionType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean90 = enumType88.hasOwnProperty("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        java.lang.Iterable iterable91 = enumType88.getCtorExtendedInterfaces();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator92 = iterable91.spliterator();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(iterable91);
        org.junit.Assert.assertNotNull(nodeSpliterator92);
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        int int4 = sideEffectFlags1.valueOf();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        boolean boolean40 = node17.isInstanceOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        boolean boolean68 = node67.isDec();
        com.google.javascript.rhino.Node node69 = node44.copyInformationFrom(node67);
        com.google.javascript.rhino.Node node70 = node17.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node71 = node69.removeFirstChild();
        boolean boolean72 = node69.isNull();
        node69.setLineno(53);
        boolean boolean75 = node69.isExprResult();
        boolean boolean76 = node69.isCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.isNominalType();
        boolean boolean85 = parameterizedType78.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.collapseUnion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSType86);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        namePosition0.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList7 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition0);
        int int8 = namePosition0.getEndLine();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec10 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType13 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 10, node17, node20, node23, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        int int30 = node29.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship31 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType13, node23, node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 10, node35, node38, node41, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node45 = node23.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean46 = node45.isThis();
        com.google.javascript.rhino.Node node47 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind48 = new com.google.javascript.jscomp.CodingConvention.Bind(node12, node45, node47);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49, false);
        boolean boolean53 = jSTypeRegistry51.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType54 = assertionFunctionSpec10.getAssertedType(node12, jSTypeRegistry51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, node58, node61, node64, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = node64.getLastSibling();
        boolean boolean69 = node68.isDec();
        node68.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId72 = node68.getInputId();
        com.google.javascript.rhino.InputId inputId73 = node68.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node68.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, node78, node81, node84, 0, (int) (byte) 1);
        java.lang.String str88 = node68.checkTreeEquals(node87);
        com.google.javascript.rhino.Node node89 = node87.removeFirstChild();
        com.google.javascript.rhino.Node node90 = assertionFunctionSpec10.getAssertedParam(node87);
        com.google.javascript.rhino.Node node91 = node90.getLastSibling();
        com.google.javascript.rhino.Node node92 = node91.getLastSibling();
        namePosition0.setItem(node91);
        com.google.javascript.rhino.Node node94 = namePosition0.getItem();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNotNull(nodeSourcePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4095 + "'", int8 == 4095);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(inputId72);
        org.junit.Assert.assertNull(inputId73);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str88, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream59 = subclassRelationshipList38.parallelStream();
        java.lang.Object[] objArray60 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        java.lang.String str74 = node64.getString();
        boolean boolean75 = node64.isContinue();
        boolean boolean76 = node64.isCall();
        boolean boolean77 = node64.isGetterDef();
        boolean boolean78 = node64.isGetProp();
        boolean boolean79 = node64.wasEmptyNode();
        boolean boolean80 = subclassRelationshipList38.contains((java.lang.Object) node64);
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor81 = subclassRelationshipList38.listIterator();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList82 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList38);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList83 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor84 = subclassRelationshipList83.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor81);
        org.junit.Assert.assertNotNull(subclassRelationshipList82);
        org.junit.Assert.assertNotNull(subclassRelationshipList83);
        org.junit.Assert.assertNotNull(subclassRelationshipItor84);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        int int6 = node5.getCharno();
        java.lang.String str7 = node5.getSourceFileName();
        boolean boolean8 = node5.isLabel();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = node18.getLastSibling();
        boolean boolean23 = node22.isDec();
        boolean boolean24 = node22.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship25 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node5, node22);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node22);
        java.lang.String[] strArray31 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet32);
        strSet32.clear();
        node1.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.InputId inputId38 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str39 = inputId38.getIdName();
        com.google.javascript.rhino.InputId inputId41 = new com.google.javascript.rhino.InputId("OR ");
        com.google.javascript.rhino.InputId[] inputIdArray42 = new com.google.javascript.rhino.InputId[] { inputId38, inputId41 };
        com.google.javascript.rhino.InputId[] inputIdArray43 = strSet32.toArray(inputIdArray42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList44 = com.google.common.collect.ImmutableList.copyOf(inputIdArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(inputIdArray42);
        org.junit.Assert.assertNotNull(inputIdArray43);
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isInstanceType();
        boolean boolean81 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean84 = jSDocInfo83.isExpose();
        boolean boolean85 = jSDocInfo83.isExpose();
        java.lang.String str86 = jSDocInfo83.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo83.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo83.getBaseType();
        boolean boolean90 = jSDocInfo83.hasParameter("");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection91 = jSDocInfo83.getMarkers();
        java.lang.String str93 = jSDocInfo83.getDescriptionForParameter("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        java.lang.String str94 = jSDocInfo83.getDeprecationReason();
        boolean boolean95 = jSDocInfo83.isIdGenerator();
        parameterizedType78.setPropertyJSDocInfo("java.io.IOException: Not declared as a type name", jSDocInfo83);
        boolean boolean97 = parameterizedType78.isRegexpType();
        boolean boolean98 = parameterizedType78.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(markerCollection91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        java.lang.String str28 = node18.getString();
        boolean boolean29 = node18.isContinue();
        boolean boolean30 = node18.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node18.setStaticSourceFile(staticSourceFile31);
        java.lang.Object obj34 = node18.getProp(37);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isFunction();
        node18.addChildToFront(node37);
        boolean boolean40 = node3.hasChild(node18);
        int int41 = node18.getLength();
        node18.setIsSyntheticBlock(true);
        node18.setSourceEncodedPosition((int) '4');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList38.listIterator();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList41 = subclassRelationshipList38.asList();
        java.util.HashSet[] hashSetArray43 = new java.util.HashSet[0];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray44 = (java.util.HashSet<java.lang.String>[]) hashSetArray43;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList45 = com.google.common.collect.ImmutableList.copyOf(strSetArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.HashSet<java.lang.String>[] strSetArray46 = subclassRelationshipList38.toArray(strSetArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNotNull(subclassRelationshipList41);
        org.junit.Assert.assertNotNull(hashSetArray43);
        org.junit.Assert.assertNotNull(strSetArray44);
        org.junit.Assert.assertNotNull(strSetList45);
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        java.lang.String str8 = jSDocInfo0.getVersion();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        java.lang.String str11 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry2.createAnonymousObjectType();
        boolean boolean64 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        boolean boolean69 = jSTypeRegistry67.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = jSTypeRegistry67.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        jSTypeRegistry67.clearNamedTypes();
        jSTypeRegistry67.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74, false);
        boolean boolean78 = jSTypeRegistry76.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry76.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry67.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node84 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        boolean boolean85 = node84.isTrue();
        // The following exception was thrown during execution in test generation
        try {
            int int87 = node84.getExistingIntProp(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 14");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        boolean boolean84 = parameterizedType78.isPropertyTypeInferred("Function");
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.getPropertyType("Not declared as a type name");
        boolean boolean87 = parameterizedType78.isNoResolvedType();
        java.util.Set set88 = parameterizedType78.getOwnPropertyNames();
        int int89 = set88.size();
        java.util.Iterator<java.lang.String> strItor90 = set88.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(set88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(strItor90);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getRestrictedTypeGivenToBooleanOutcome(false);
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        boolean boolean71 = functionType62.hasReferenceName();
        boolean boolean72 = functionType62.matchesInt32Context();
        com.google.javascript.rhino.Node node73 = functionType62.getSource();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getOwnImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isNoShadow();
        java.lang.String str78 = jSDocInfo75.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean79 = jSDocInfo75.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo75.getParameterType("false");
        boolean boolean82 = jSDocInfo75.shouldPreserveTry();
        boolean boolean83 = jSDocInfo75.isInterface();
        com.google.javascript.rhino.Node node84 = jSDocInfo75.getAssociatedNode();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo75.getSuppressions();
        boolean boolean86 = jSDocInfo75.hasThisType();
        functionType62.setJSDocInfo(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.rhino.Node node39 = node30.removeChildren();
        com.google.javascript.rhino.Node node40 = node10.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node41 = node30.getFirstChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        java.lang.String str55 = node45.getString();
        boolean boolean56 = node45.isContinue();
        boolean boolean57 = node45.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node45.setStaticSourceFile(staticSourceFile58);
        java.lang.Object obj61 = node45.getProp(37);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean65 = node64.isFunction();
        node45.addChildToFront(node64);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) 10, node70, node73, node76, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node80 = node76.getLastSibling();
        boolean boolean81 = node80.isDec();
        boolean boolean82 = node80.isOr();
        node80.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node85 = node64.srcref(node80);
        boolean boolean86 = node64.isObjectLit();
        boolean boolean87 = node64.isTypeOf();
        boolean boolean88 = node30.isEquivalentTo(node64);
        boolean boolean89 = node64.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        boolean boolean13 = node6.isThrow();
        boolean boolean14 = node6.isExprResult();
        boolean boolean15 = node6.isComma();
        boolean boolean16 = node6.isTrue();
        boolean boolean17 = node6.isFunction();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        int int35 = node34.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship36 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType18, node28, node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node28.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean51 = node50.isThis();
        boolean boolean52 = node50.isVarArgs();
        boolean boolean53 = node50.isQualifiedName();
        boolean boolean54 = node50.isReturn();
        boolean boolean55 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node50);
        com.google.javascript.rhino.Node node56 = node6.srcrefTree(node50);
        java.util.Set<java.lang.String> strSet57 = node56.getDirectives();
        boolean boolean58 = node56.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }
}

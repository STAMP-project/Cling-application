import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest25 {

    public static boolean debug = false;

    @Test
    public void test12501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12501");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        double double25 = dormandPrince853Integrator17.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction26, (double) 3, (double) (-1L), (int) (byte) -1);
        double double31 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction32, (double) (-1), (double) 1.0f, 8);
        java.lang.String str37 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        double double40 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety(13.92838827718412d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator47.addSwitchingFunction(switchingFunction48, (double) 10, (double) 'a', (int) (byte) 10);
        int int53 = dormandPrince853Integrator47.getOrder();
        double double54 = dormandPrince853Integrator47.getCurrentSignedStepsize();
        double double55 = dormandPrince853Integrator47.getCurrentSignedStepsize();
        int int56 = dormandPrince853Integrator47.getOrder();
        double double57 = dormandPrince853Integrator47.getMinReduction();
        int int58 = dormandPrince853Integrator47.getOrder();
        int int59 = dormandPrince853Integrator47.getOrder();
        java.lang.String str60 = dormandPrince853Integrator47.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler66 = dormandPrince853Integrator65.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator65.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        stepHandler67.handleStep(stepInterpolator68, true);
        boolean boolean71 = stepHandler67.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator72 = null;
        stepHandler67.handleStep(stepInterpolator72, false);
        dormandPrince853Integrator47.setStepHandler(stepHandler67);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator76 = null;
        stepHandler67.handleStep(stepInterpolator76, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler67);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.2d + "'", double57 == 0.2d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str60, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler66);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test12502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12502");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test12503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12503");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(4.47213595499958d, 7.211102550927978d, 41.61791450287817d, 5.623413251903491d);
    }

    @Test
    public void test12504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12504");
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("hi!", objArray1, throwable2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException(throwable2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) integratorException4);
        java.lang.String str6 = integratorException4.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException4);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException8);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray18, throwable19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException20);
        java.io.IOException iOException22 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray13, (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException25);
        java.lang.Throwable[] throwableArray27 = mathException25.getSuppressed();
        mathException9.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException25);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test12505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12505");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) (byte) 10);
        double double18 = dormandPrince853Integrator4.getMaxGrowth();
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
    }

    @Test
    public void test12506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12506");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 1);
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double17 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test12507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12507");
        java.lang.String[] strArray9 = new java.lang.String[] { "org.apache.commons.math.MathException", "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", "org.apache.commons.math.ode.IntegratorException", "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", "org.apache.commons.math.ode.IntegratorException: ", "org.apache.commons.math.MathException: hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: java.io.IOException: hi!", (java.lang.Object[]) strArray9);
        java.lang.String str13 = integratorException12.getPattern();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.MathException: java.io.IOException: hi!" + "'", str13, "org.apache.commons.math.MathException: java.io.IOException: hi!");
    }

    @Test
    public void test12508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12508");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12509");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        dormandPrince853Integrator12.setSafety((double) (-1.0f));
        dormandPrince853Integrator12.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator24.getStepHandler();
        boolean boolean33 = stepHandler32.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        stepHandler32.handleStep(stepInterpolator34, false);
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        double double38 = dormandPrince853Integrator12.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction44, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator43.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler51 = dormandPrince853Integrator43.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator52 = null;
        stepHandler51.handleStep(stepInterpolator52, false);
        boolean boolean55 = stepHandler51.requiresDenseOutput();
        stepHandler51.reset();
        dormandPrince853Integrator12.setStepHandler(stepHandler51);
        org.apache.commons.math.ode.StepHandler stepHandler58 = dormandPrince853Integrator12.getStepHandler();
        double double59 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction60 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction60, (-0.0d), 3.732075599071396d, (int) (short) 100);
        double double65 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        java.lang.String str66 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        stepHandler67.handleStep(stepInterpolator68, false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.9d + "'", double38 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(stepHandler58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.9486832980505138d + "'", double65 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str66, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler67);
    }

    @Test
    public void test12510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12510");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        java.lang.Throwable[] throwableArray13 = derivativeException12.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray17, throwable18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray17);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray25, throwable26);
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) mathException27);
        java.io.IOException iOException29 = new java.io.IOException("hi!", (java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray17, (java.lang.Throwable) iOException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) iOException30);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray39, throwable40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", objArray39);
        java.lang.Object[] objArray43 = mathException42.getArguments();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray43);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray49);
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray49);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray54, throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("java.io.IOException", objArray43, (java.lang.Throwable) mathException56);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) mathException56);
        java.io.IOException iOException61 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) mathException56);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray69, throwable70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException71);
        java.lang.String str73 = mathException72.getPattern();
        java.lang.Object[] objArray74 = mathException72.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException75 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("java.io.IOException", objArray74);
        org.apache.commons.math.ode.IntegratorException integratorException77 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", objArray74);
        org.apache.commons.math.ode.IntegratorException integratorException79 = new org.apache.commons.math.ode.IntegratorException("", objArray74);
        java.lang.String str80 = integratorException79.getPattern();
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) integratorException79);
        java.io.IOException iOException82 = new java.io.IOException((java.lang.Throwable) integratorException79);
        org.apache.commons.math.ode.DerivativeException derivativeException83 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException79);
        java.lang.Object[] objArray84 = derivativeException83.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray84);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }

    @Test
    public void test12511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12511");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 0L, 13.92838827718412d, (double) 2);
        double double5 = dormandPrince853Integrator4.getMinStep();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction(7.952707287670506d);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12512");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction24, (double) 10L, (double) 8, 2);
        double double29 = dormandPrince853Integrator12.getMinReduction();
        double double30 = dormandPrince853Integrator12.getSafety();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test12513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12513");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test12514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12514");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        int int21 = dormandPrince853Integrator4.getOrder();
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(1.7320508075688772d);
        double double25 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety(0.0d);
        int int28 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.7320508075688772d + "'", double25 == 1.7320508075688772d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test12515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12515");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (short) 0, 0.0d, (double) (-1L));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
    }

    @Test
    public void test12516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12516");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.stop();
        double double9 = switchingFunctionsHandler0.getEventTime();
        boolean boolean10 = switchingFunctionsHandler0.isEmpty();
        double double11 = switchingFunctionsHandler0.getEventTime();
        double double12 = switchingFunctionsHandler0.getEventTime();
        boolean boolean13 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        switchingFunctionsHandler0.add(switchingFunction14, (double) (byte) 1, (double) (short) 1, (int) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler0.add(switchingFunction19, (double) 0.0f, 10.0d, 100);
        boolean boolean24 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12517");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (byte) -1, (double) (byte) -1, 2);
        boolean boolean26 = switchingFunctionsHandler0.stop();
        double[] doubleArray33 = new double[] { Double.NaN };
        double[] doubleArray42 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray45 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray42, doubleArray45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray33, doubleArray42);
        double[] doubleArray56 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray59 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray56, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray33, doubleArray56);
        boolean boolean62 = switchingFunctionsHandler0.reset(3.732075599071396d, doubleArray33);
        boolean boolean63 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction64 = null;
        switchingFunctionsHandler0.add(switchingFunction64, 8.0d, 3.0d, (int) (byte) -1);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator69 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = switchingFunctionsHandler0.evaluateStep(stepInterpolator69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test12518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12518");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, 0.0d, (double) ' ', 0.9486832980505138d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.916079783099616d, 0.9486832980505138d, (double) (byte) -1, 14.142135623730951d);
        double double10 = dormandPrince853Integrator9.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator15.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator15.setMaxGrowth(0.9486832980505138d);
        double[] doubleArray23 = new double[] { Double.NaN };
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray23, doubleArray32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator37.addSwitchingFunction(switchingFunction38, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler43);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator45 = null;
        stepHandler43.handleStep(stepInterpolator45, true);
        dormandPrince853Integrator9.setStepHandler(stepHandler43);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator49 = null;
        stepHandler43.handleStep(stepInterpolator49, false);
        stepHandler43.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler43);
        boolean boolean54 = stepHandler43.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test12519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12519");
        java.io.IOException iOException1 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12520");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, 1.7320508075688772d, (double) (-1L), (double) (short) 1);
        dormandPrince853Integrator4.setInitialStepSize(11.892071150027212d);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test12521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12521");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        stepHandler12.reset();
        boolean boolean14 = stepHandler12.requiresDenseOutput();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12522");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        java.io.IOException iOException13 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8, (java.lang.Throwable) iOException13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        java.lang.Throwable[] throwableArray16 = derivativeException15.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException15);
        java.lang.Throwable[] throwableArray18 = derivativeException15.getSuppressed();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray18);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray18);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test12523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12523");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(22.80350850198276d, 0.0d, 55.71355310873648d, 14.142135623730951d);
    }

    @Test
    public void test12524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12524");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.6324555320336759d, (double) (short) 1, Double.NaN, (double) 1.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction10, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator9.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator9.getStepHandler();
        java.lang.String str18 = dormandPrince853Integrator9.getName();
        double double19 = dormandPrince853Integrator9.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double25 = dormandPrince853Integrator24.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction26, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double31 = dormandPrince853Integrator24.getCurrentStepStart();
        java.lang.String str32 = dormandPrince853Integrator24.getName();
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator24.getStepHandler();
        dormandPrince853Integrator9.setStepHandler(stepHandler33);
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator9.getStepHandler();
        boolean boolean36 = stepHandler35.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        stepHandler35.handleStep(stepInterpolator37, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction46, (double) (byte) 0, 0.2d, 2);
        int int51 = dormandPrince853Integrator45.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler52);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9d + "'", double25 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler33);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(stepHandler52);
    }

    @Test
    public void test12525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12525");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 1.0d, (double) 100.0f, (double) (-1.0f));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12526");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray5);
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray10, throwable11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException12);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray5);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException(throwable16);
        derivativeException15.addSuppressed((java.lang.Throwable) derivativeException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) derivativeException17);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException17);
        java.io.IOException iOException22 = new java.io.IOException("org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException22);
        derivativeException17.addSuppressed((java.lang.Throwable) derivativeException23);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) derivativeException23);
        java.lang.Class<?> wildcardClass26 = iOException25.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test12527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12527");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        java.io.IOException iOException15 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10, (java.lang.Throwable) iOException15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        java.lang.Throwable[] throwableArray18 = derivativeException17.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException17);
        java.lang.Throwable[] throwableArray20 = integratorException19.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray20);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: java.io.IOException", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) mathException32);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray36);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray36);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: java.io.IOException", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) derivativeException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) throwableArray20);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: java.io.IOException", (java.lang.Object[]) throwableArray20);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test12528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12528");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        dormandPrince853Integrator4.setMinReduction(1.0d);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getSafety();
        double double18 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test12529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12529");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        double double4 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler0.evaluateStep(stepInterpolator5);
        double[] doubleArray18 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray21 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray18, doubleArray21);
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0.0f, doubleArray21, doubleArray26);
        switchingFunctionsHandler0.stepAccepted(17.88854381999832d, doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
    }

    @Test
    public void test12530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12530");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) 1L, 13.92838827718412d, 97.0d);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertNotNull(stepHandler6);
    }

    @Test
    public void test12531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12531");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.7320508075688772d, 31.622776601683793d, (double) (byte) 10, (double) (-1));
    }

    @Test
    public void test12532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12532");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety(0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test12533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12533");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        double[] doubleArray9 = new double[] { Double.NaN };
        double[] doubleArray18 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray21 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray18, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray9, doubleArray18);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler28 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        boolean boolean30 = switchingFunctionsHandler28.evaluateStep(stepInterpolator29);
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        switchingFunctionsHandler28.stepAccepted(100.0d, doubleArray40);
        switchingFunctionsHandler26.stepAccepted((double) (short) 1, doubleArray40);
        double[] doubleArray50 = new double[] { Double.NaN };
        double[] doubleArray59 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray62 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray59, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray50, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray40, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) '#', doubleArray18, doubleArray40);
        double[] doubleArray70 = new double[] { Double.NaN };
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray70, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 10, doubleArray40, doubleArray79);
        boolean boolean86 = switchingFunctionsHandler0.reset(0.0d, doubleArray79);
        java.lang.Class<?> wildcardClass87 = switchingFunctionsHandler0.getClass();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test12534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12534");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        java.lang.String str33 = dormandPrince853Integrator32.getName();
        dormandPrince853Integrator32.setSafety((double) 0L);
        dormandPrince853Integrator32.setMaxGrowth((double) 'a');
        int int38 = dormandPrince853Integrator32.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator32.addSwitchingFunction(switchingFunction39, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator32.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        dormandPrince853Integrator50.addSwitchingFunction(switchingFunction51, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator50.setMinReduction(100.0d);
        double double58 = dormandPrince853Integrator50.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction59 = null;
        dormandPrince853Integrator50.addSwitchingFunction(switchingFunction59, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator50.getStepHandler();
        java.lang.String str65 = dormandPrince853Integrator50.getName();
        org.apache.commons.math.ode.StepHandler stepHandler66 = dormandPrince853Integrator50.getStepHandler();
        dormandPrince853Integrator32.setStepHandler(stepHandler66);
        dormandPrince853Integrator4.setStepHandler(stepHandler66);
        double double69 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction(2.1355799447448818d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str65, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
    }

    @Test
    public void test12535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12535");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(100.0d);
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        double double22 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test12536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12536");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) 10L);
        dormandPrince853Integrator4.setMaxGrowth((double) '#');
        dormandPrince853Integrator4.setMinReduction((double) 2);
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations20 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler22 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean23 = switchingFunctionsHandler22.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        boolean boolean25 = switchingFunctionsHandler22.evaluateStep(stepInterpolator24);
        boolean boolean26 = switchingFunctionsHandler22.isEmpty();
        boolean boolean27 = switchingFunctionsHandler22.stop();
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        double[] doubleArray47 = new double[] { Double.NaN };
        double[] doubleArray56 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray59 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray56, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray47, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0.0f, doubleArray42, doubleArray47);
        switchingFunctionsHandler22.stepAccepted((double) 100L, doubleArray42);
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations20, (double) (short) -1, doubleArray42, (-0.0d), doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
    }

    @Test
    public void test12537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12537");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        dormandPrince853Integrator4.setMinReduction((double) (-1));
        double double17 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 100);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        double double21 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction23, (double) ' ', (double) (-1), (int) (byte) 1);
        double double28 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
    }

    @Test
    public void test12538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12538");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 10);
        double double15 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(0.6324555320336759d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test12539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12539");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        boolean boolean2 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler6 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean7 = switchingFunctionsHandler6.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler9 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        boolean boolean11 = switchingFunctionsHandler9.evaluateStep(stepInterpolator10);
        double[] doubleArray21 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray24 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray21, doubleArray24);
        switchingFunctionsHandler9.stepAccepted(100.0d, doubleArray21);
        switchingFunctionsHandler6.stepAccepted((double) (short) 10, doubleArray21);
        boolean boolean28 = switchingFunctionsHandler6.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler30 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        boolean boolean32 = switchingFunctionsHandler30.evaluateStep(stepInterpolator31);
        double[] doubleArray42 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray45 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray42, doubleArray45);
        switchingFunctionsHandler30.stepAccepted(100.0d, doubleArray42);
        boolean boolean48 = switchingFunctionsHandler6.reset((double) 100, doubleArray42);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler49 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean50 = switchingFunctionsHandler49.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        boolean boolean52 = switchingFunctionsHandler49.evaluateStep(stepInterpolator51);
        boolean boolean53 = switchingFunctionsHandler49.isEmpty();
        boolean boolean54 = switchingFunctionsHandler49.stop();
        double[] doubleArray66 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray69 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray66, doubleArray69);
        double[] doubleArray74 = new double[] { Double.NaN };
        double[] doubleArray83 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray86 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray83, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray74, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0.0f, doubleArray69, doubleArray74);
        switchingFunctionsHandler49.stepAccepted((double) 100L, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator(14.142135623730951d, (double) 1L, doubleArray42, doubleArray69);
        boolean boolean92 = switchingFunctionsHandler0.reset(1.0d, doubleArray42);
        boolean boolean93 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test12540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12540");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray9, throwable10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.String str13 = mathException12.getPattern();
        java.lang.Object[] objArray14 = mathException12.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("java.io.IOException", objArray14);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray14);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", objArray14);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("", objArray14);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", objArray14);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray14);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: ", objArray14);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException22);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test12541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12541");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.0d, 0.0d, 2.1355799447448818d, 5.885661912765424d);
    }

    @Test
    public void test12542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12542");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 10.0d, 3.760603093086394d, (double) (byte) 0);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12543");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        switchingFunctionsHandler0.add(switchingFunction8, (double) (byte) 1, (double) (byte) 100, (int) (short) 1);
        boolean boolean13 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        switchingFunctionsHandler0.add(switchingFunction14, 0.0d, (double) 1L, (int) (byte) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler0.add(switchingFunction19, (double) 1.0f, (double) 'a', 2);
        boolean boolean24 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = switchingFunctionsHandler0.evaluateStep(stepInterpolator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12544");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        double double17 = dormandPrince853Integrator12.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction18, (double) 0, (double) 'a', (int) '4');
        double double23 = dormandPrince853Integrator12.getMinReduction();
        double double24 = dormandPrince853Integrator12.getMinReduction();
        int int25 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator12.getStepHandler();
        stepHandler26.reset();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(stepHandler26);
    }

    @Test
    public void test12545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12545");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        java.lang.String str33 = dormandPrince853Integrator32.getName();
        dormandPrince853Integrator32.setMinReduction(0.9d);
        java.lang.String str36 = dormandPrince853Integrator32.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction42, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator41.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator41.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator50 = null;
        stepHandler49.handleStep(stepInterpolator50, false);
        boolean boolean53 = stepHandler49.requiresDenseOutput();
        dormandPrince853Integrator32.setStepHandler(stepHandler49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator59.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator32.setStepHandler(stepHandler61);
        dormandPrince853Integrator4.setStepHandler(stepHandler61);
        double double64 = dormandPrince853Integrator4.getCurrentStepStart();
        int int65 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
    }

    @Test
    public void test12546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12546");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) '#', (double) 8, (double) (byte) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) '#', (double) (short) -1, 2);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test12547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12547");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 35.0d, 17.320508075688775d, (-0.0d));
        dormandPrince853Integrator4.setSafety((double) (byte) 1);
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 18.708286933869708d + "'", double7 == 18.708286933869708d);
    }

    @Test
    public void test12548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12548");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxGrowth();
        int int32 = dormandPrince853Integrator4.getOrder();
        int int33 = dormandPrince853Integrator4.getOrder();
        double double34 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getSafety();
        double double47 = dormandPrince853Integrator39.getMaxGrowth();
        double double48 = dormandPrince853Integrator39.getCurrentStepStart();
        double double49 = dormandPrince853Integrator39.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator39.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler51 = dormandPrince853Integrator39.getStepHandler();
        boolean boolean52 = stepHandler51.requiresDenseOutput();
        boolean boolean53 = stepHandler51.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler51);
        java.lang.String str55 = dormandPrince853Integrator4.getName();
        int int56 = dormandPrince853Integrator4.getOrder();
        double double57 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str58 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.2d + "'", double49 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler50);
        org.junit.Assert.assertNotNull(stepHandler51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str58, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12549");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.Object[] objArray7 = mathException5.getArguments();
        java.lang.String str8 = mathException5.getPattern();
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) mathException5);
        java.lang.Object[] objArray10 = mathException5.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException5);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) mathException17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) iOException18);
        integratorException11.addSuppressed((java.lang.Throwable) iOException18);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException18);
        java.lang.Throwable[] throwableArray22 = iOException18.getSuppressed();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("java.io.IOException: ", (java.lang.Object[]) throwableArray22);
        java.lang.String str24 = mathException23.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.apache.commons.math.MathException: java.io.IOException: " + "'", str24, "org.apache.commons.math.MathException: java.io.IOException: ");
    }

    @Test
    public void test12550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12550");
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray25);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray32, throwable33);
        java.io.IOException iOException35 = new java.io.IOException("hi!", (java.lang.Throwable) mathException34);
        java.io.IOException iOException36 = new java.io.IOException("hi!", (java.lang.Throwable) iOException35);
        java.io.IOException iOException38 = new java.io.IOException("");
        iOException35.addSuppressed((java.lang.Throwable) iOException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25, (java.lang.Throwable) iOException38);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray14, (java.lang.Throwable) mathException40);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray14);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
    }

    @Test
    public void test12551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12551");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException(throwable4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) integratorException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException8);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) mathException18);
        java.io.IOException iOException20 = new java.io.IOException("hi!", (java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException20);
        java.lang.Throwable[] throwableArray22 = iOException21.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray26, throwable27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException29);
        derivativeException23.addSuppressed((java.lang.Throwable) derivativeException30);
        java.lang.Object[] objArray32 = derivativeException30.getArguments();
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray32, throwable33);
        java.io.IOException iOException35 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException34);
        mathException9.addSuppressed((java.lang.Throwable) iOException35);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) integratorException37);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException37);
        java.lang.String str40 = integratorException39.getPattern();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test12552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12552");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        boolean boolean33 = stepHandler29.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator39.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator39.getStepHandler();
        boolean boolean48 = stepHandler47.requiresDenseOutput();
        boolean boolean49 = stepHandler47.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator50 = null;
        stepHandler47.handleStep(stepInterpolator50, true);
        dormandPrince853Integrator12.setStepHandler(stepHandler47);
        java.lang.String str54 = dormandPrince853Integrator12.getName();
        double double55 = dormandPrince853Integrator12.getMinReduction();
        double double56 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        dormandPrince853Integrator12.setInitialStepSize(3.0d);
        dormandPrince853Integrator12.setMaxGrowth(100.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str54, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.9d + "'", double55 == 0.9d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9486832980505138d + "'", double56 == 0.9486832980505138d);
    }

    @Test
    public void test12553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12553");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        stepHandler24.handleStep(stepInterpolator28, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        double double34 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.2d + "'", double34 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test12554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12554");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray9 = mathException8.getArguments();
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray9, throwable10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: ", objArray9);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", objArray9);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test12555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12555");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean23 = switchingFunctionsHandler0.stop();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        boolean boolean43 = switchingFunctionsHandler0.reset((double) 1L, doubleArray28);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        switchingFunctionsHandler0.add(switchingFunction44, (double) 10.0f, (double) 0, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction49 = null;
        switchingFunctionsHandler0.add(switchingFunction49, 0.0d, (double) ' ', 3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test12556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12556");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.Object[] objArray7 = mathException5.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException5);
        java.lang.String str9 = mathException5.getPattern();
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) mathException5);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException10);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test12557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12557");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 1.0f, (double) 0, (int) (byte) 0);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator15.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator15.setMaxGrowth(0.9486832980505138d);
        double[] doubleArray23 = new double[] { Double.NaN };
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray23, doubleArray32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator37.addSwitchingFunction(switchingFunction38, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler43);
        boolean boolean45 = stepHandler43.requiresDenseOutput();
        stepHandler43.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler43);
        org.apache.commons.math.ode.StepHandler stepHandler48 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction(2.8284271247461903d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(stepHandler48);
    }

    @Test
    public void test12558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12558");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray5);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = iOException11.getSuppressed();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test12559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12559");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) (short) 10, (double) '#', 2);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, 3.0d, (double) 8, (int) ' ');
        double double25 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth(14.142135623730951d);
        double double28 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction29, 5.477225575051661d, 5.477225575051661d, (int) '4');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
    }

    @Test
    public void test12560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12560");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 3.0d, 5.623413251903491d, 0.0d);
    }

    @Test
    public void test12561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12561");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        double double3 = switchingFunctionsHandler0.getEventTime();
        boolean boolean4 = switchingFunctionsHandler0.stop();
        boolean boolean5 = switchingFunctionsHandler0.stop();
        double[] doubleArray14 = new double[] { Double.NaN };
        double[] doubleArray23 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray26 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray23, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray14, doubleArray23);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler31 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler33 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        boolean boolean35 = switchingFunctionsHandler33.evaluateStep(stepInterpolator34);
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        switchingFunctionsHandler33.stepAccepted(100.0d, doubleArray45);
        switchingFunctionsHandler31.stepAccepted((double) (short) 1, doubleArray45);
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray45, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray23, doubleArray45);
        double[] doubleArray80 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray83 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray80, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 1.0f, doubleArray45, doubleArray80);
        boolean boolean86 = switchingFunctionsHandler0.reset((double) 0, doubleArray45);
        double double87 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test12562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12562");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 97.0d, 100.0d, (int) '4');
        dormandPrince853Integrator4.setMinReduction(14.142135623730951d);
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        int int25 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test12563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12563");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double9 = dormandPrince853Integrator8.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator8.addSwitchingFunction(switchingFunction10, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double15 = dormandPrince853Integrator8.getSafety();
        double double16 = dormandPrince853Integrator8.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        double double29 = dormandPrince853Integrator21.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double35 = dormandPrince853Integrator34.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction36 = null;
        dormandPrince853Integrator34.addSwitchingFunction(switchingFunction36, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double41 = dormandPrince853Integrator34.getCurrentStepStart();
        dormandPrince853Integrator34.setInitialStepSize((double) 0.0f);
        java.lang.String str44 = dormandPrince853Integrator34.getName();
        java.io.IOException iOException46 = new java.io.IOException("hi!");
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray49, throwable50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.Object[] objArray54 = mathException52.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray54);
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        java.lang.String str69 = dormandPrince853Integrator68.getName();
        dormandPrince853Integrator68.setMinReduction(0.9d);
        java.lang.String str72 = dormandPrince853Integrator68.getName();
        java.lang.Object[] objArray73 = new java.lang.Object[] { double16, double29, dormandPrince853Integrator34, "hi!", objArray54, dormandPrince853Integrator68 };
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray75, throwable76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray54, (java.lang.Throwable) mathException78);
        org.apache.commons.math.ode.IntegratorException integratorException80 = new org.apache.commons.math.ode.IntegratorException("", objArray54);
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray82, throwable83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        java.lang.String str86 = mathException85.getPattern();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray54, (java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException88);
        java.lang.Throwable[] throwableArray90 = mathException88.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException91 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException88);
        java.io.IOException iOException92 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException", (java.lang.Throwable) derivativeException91);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9d + "'", double9 == 0.9d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.9d + "'", double35 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str69, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str72, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test12564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12564");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int17 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test12565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12565");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, (double) (short) 0, 5.885661912765424d, 3.732075599071396d);
        int int5 = dormandPrince853Integrator4.getOrder();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test12566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12566");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 'a');
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        int int19 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test12567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12567");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.String str7 = mathException6.getPattern();
        java.lang.Object[] objArray8 = mathException6.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException6);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) integratorException10);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException12);
        java.lang.Object[] objArray14 = integratorException13.getArguments();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.math.MathException", "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", "org.apache.commons.math.ode.IntegratorException", "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", "org.apache.commons.math.ode.IntegratorException: ", "org.apache.commons.math.MathException: hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray26);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: java.io.IOException: hi!", (java.lang.Object[]) strArray26);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray39);
        java.io.IOException iOException44 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray39, (java.lang.Throwable) iOException44);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("", strArray39);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray39);
        org.apache.commons.math.ode.IntegratorException integratorException49 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray39);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray55, throwable56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException57);
        java.lang.String str59 = mathException58.getPattern();
        java.lang.Object[] objArray60 = mathException58.getArguments();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException58);
        java.io.IOException iOException62 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException58);
        java.lang.Throwable[] throwableArray63 = mathException58.getSuppressed();
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray65, throwable66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException67);
        java.lang.String str69 = mathException68.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException68);
        java.io.IOException iOException71 = new java.io.IOException((java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray63, (java.lang.Throwable) iOException71);
        java.io.IOException iOException73 = new java.io.IOException((java.lang.Throwable) iOException71);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray39, (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("java.io.IOException: ", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException", objArray14, (java.lang.Throwable) mathException77);
        java.lang.Object[] objArray79 = mathException78.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
    }

    @Test
    public void test12568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12568");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException(throwable3);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) integratorException5);
        java.lang.String str7 = integratorException5.getPattern();
        java.io.IOException iOException8 = new java.io.IOException("", (java.lang.Throwable) integratorException5);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test12569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12569");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setSafety((double) 8);
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        int int23 = dormandPrince853Integrator4.getOrder();
        double double24 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction25, (double) 'a', (double) (byte) 1, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
    }

    @Test
    public void test12570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12570");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), 31.622776601683793d, Double.NaN, 72.11102550927978d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12571");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException(throwable4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.io.IOException iOException9 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException6);
        java.lang.Throwable[] throwableArray10 = integratorException6.getSuppressed();
        java.lang.Throwable[] throwableArray11 = integratorException6.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException6);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException6);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test12572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12572");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 0.0f);
        int int16 = dormandPrince853Integrator4.getOrder();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12573");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((double) ' ');
        org.apache.commons.math.ode.StepHandler stepHandler16 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler16);
        dormandPrince853Integrator4.setMinReduction(41.61791450287817d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test12574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12574");
        java.io.IOException iOException4 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException");
        java.io.IOException iOException5 = new java.io.IOException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException4);
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException(throwable7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray6, throwable7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException9);
        java.io.IOException iOException11 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) derivativeException10);
        java.lang.Throwable[] throwableArray12 = iOException11.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException11);
        java.io.IOException iOException16 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException17);
        iOException11.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test12575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12575");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (-1L), (double) 'a', (int) (short) 100);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test12576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12576");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray13, throwable14);
        java.io.IOException iOException16 = new java.io.IOException("hi!", (java.lang.Throwable) mathException15);
        java.io.IOException iOException17 = new java.io.IOException("hi!", (java.lang.Throwable) iOException16);
        java.io.IOException iOException18 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray5, (java.lang.Throwable) iOException18);
        java.lang.Object[] objArray20 = mathException19.getArguments();
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray25, throwable26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.String str29 = mathException28.getPattern();
        java.lang.Object[] objArray30 = mathException28.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException31 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("java.io.IOException", objArray30);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: ", objArray30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: ", objArray20, (java.lang.Throwable) integratorException33);
        java.lang.Object[] objArray35 = mathException34.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", objArray35);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
    }

    @Test
    public void test12577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12577");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("", strArray4);
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray9, throwable10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.io.IOException iOException13 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray4, (java.lang.Throwable) mathException14);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray24, throwable25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        java.lang.String str28 = mathException27.getPattern();
        java.lang.Object[] objArray29 = mathException27.getArguments();
        java.lang.String str30 = mathException27.getPattern();
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) mathException27);
        java.lang.Object[] objArray32 = mathException27.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray32);
        java.lang.Object[] objArray34 = integratorException33.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException35 = new org.apache.commons.math.ode.IntegratorException("", objArray34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", objArray34, (java.lang.Throwable) mathException37);
        java.lang.String[] strArray43 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray43);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray43);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray43);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray34, (java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException48);
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) integratorException50);
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray56, throwable57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException58);
        java.lang.String str60 = mathException59.getPattern();
        java.lang.Object[] objArray61 = mathException59.getArguments();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException59);
        java.io.IOException iOException63 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException59);
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) iOException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) throwableArray52, (java.lang.Throwable) iOException63);
        java.io.IOException iOException66 = new java.io.IOException((java.lang.Throwable) iOException63);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray4, (java.lang.Throwable) iOException66);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
    }

    @Test
    public void test12578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12578");
        java.io.IOException iOException2 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!");
        java.io.IOException iOException3 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
    }

    @Test
    public void test12579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12579");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        double double16 = dormandPrince853Integrator4.getMinReduction();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        double double18 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test12580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12580");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray6);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) derivativeException11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException12);
        java.lang.String str16 = mathException15.getPattern();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math.ode.DerivativeException: java.io.IOException" + "'", str16, "org.apache.commons.math.ode.DerivativeException: java.io.IOException");
    }

    @Test
    public void test12581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12581");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        java.io.IOException iOException7 = new java.io.IOException("hi!", (java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray11, throwable12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException13);
        java.io.IOException iOException15 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray8);
        java.lang.Object[] objArray19 = mathException18.getArguments();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
    }

    @Test
    public void test12582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12582");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 10.0d, Double.NaN, 17.320508075688775d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        stepHandler5.reset();
        boolean boolean7 = stepHandler5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        stepHandler5.handleStep(stepInterpolator8, false);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test12583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12583");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        double double34 = dormandPrince853Integrator12.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        int int45 = dormandPrince853Integrator39.getOrder();
        double double46 = dormandPrince853Integrator39.getCurrentSignedStepsize();
        double double47 = dormandPrince853Integrator39.getCurrentSignedStepsize();
        int int48 = dormandPrince853Integrator39.getOrder();
        double double49 = dormandPrince853Integrator39.getMinReduction();
        int int50 = dormandPrince853Integrator39.getOrder();
        int int51 = dormandPrince853Integrator39.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction57 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction57, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator56.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator56.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator65 = null;
        stepHandler64.handleStep(stepInterpolator65, false);
        stepHandler64.reset();
        dormandPrince853Integrator39.setStepHandler(stepHandler64);
        dormandPrince853Integrator12.setStepHandler(stepHandler64);
        double double71 = dormandPrince853Integrator12.getCurrentStepStart();
        double double72 = dormandPrince853Integrator12.getSafety();
        double double73 = dormandPrince853Integrator12.getMaxGrowth();
        java.lang.String str74 = dormandPrince853Integrator12.getName();
        int int75 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.2d + "'", double49 == 0.2d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.9d + "'", double72 == 0.9d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
    }

    @Test
    public void test12584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12584");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException10);
        java.lang.Class<?> wildcardClass12 = integratorException10.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test12585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12585");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray9);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray9);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) mathException18);
        java.io.IOException iOException20 = new java.io.IOException("hi!", (java.lang.Throwable) iOException19);
        java.io.IOException iOException22 = new java.io.IOException("");
        iOException19.addSuppressed((java.lang.Throwable) iOException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9, (java.lang.Throwable) iOException22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray9, throwable25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        java.io.IOException iOException30 = new java.io.IOException("", (java.lang.Throwable) derivativeException29);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
    }

    @Test
    public void test12586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12586");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        double double11 = dormandPrince853Integrator9.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator9.setStepHandler(stepHandler24);
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double31 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str32 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction33, 3.732075599071396d, 5.885661912765424d, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12587");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray13, throwable14);
        java.io.IOException iOException16 = new java.io.IOException("hi!", (java.lang.Throwable) mathException15);
        java.io.IOException iOException17 = new java.io.IOException("hi!", (java.lang.Throwable) iOException16);
        java.io.IOException iOException18 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray5, (java.lang.Throwable) iOException18);
        java.lang.Object[] objArray20 = mathException19.getArguments();
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray26);
        java.lang.Throwable[] throwableArray32 = derivativeException31.getSuppressed();
        java.lang.String str33 = derivativeException31.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", objArray20, (java.lang.Throwable) derivativeException31);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", objArray20);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)" + "'", str33, "org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12588");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(1.7320508075688772d);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test12589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12589");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety((double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(1.0d);
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler22);
    }

    @Test
    public void test12590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12590");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) derivativeException9);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException18.getPattern();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException18);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException23);
        mathException10.addSuppressed((java.lang.Throwable) mathException24);
        java.lang.Object[] objArray26 = mathException10.getArguments();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
    }

    @Test
    public void test12591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12591");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        double double23 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        switchingFunctionsHandler0.add(switchingFunction24, (double) 0, 2.0d, (int) (byte) -1);
        boolean boolean29 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        switchingFunctionsHandler0.add(switchingFunction30, 17.320508075688775d, (double) 8, 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        switchingFunctionsHandler0.add(switchingFunction35, 98.48857801796105d, (double) (short) -1, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler41 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean42 = switchingFunctionsHandler41.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator43 = null;
        boolean boolean44 = switchingFunctionsHandler41.evaluateStep(stepInterpolator43);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler46 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean47 = switchingFunctionsHandler46.stop();
        double double48 = switchingFunctionsHandler46.getEventTime();
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        double[] doubleArray78 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray81 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray78, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray55, doubleArray78);
        boolean boolean84 = switchingFunctionsHandler46.reset((double) 1, doubleArray55);
        switchingFunctionsHandler41.stepAccepted((double) (short) 0, doubleArray55);
        boolean boolean86 = switchingFunctionsHandler0.reset(5.623413251903491d, doubleArray55);
        double double87 = switchingFunctionsHandler0.getEventTime();
        boolean boolean88 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test12592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12592");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction23, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double28 = dormandPrince853Integrator21.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        double double30 = dormandPrince853Integrator21.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler31);
        double double33 = dormandPrince853Integrator12.getMinReduction();
        double double34 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getCurrentStepStart();
        double double47 = dormandPrince853Integrator39.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler48 = dormandPrince853Integrator39.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler48);
        dormandPrince853Integrator12.setInitialStepSize((double) 8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction57 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction57, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator56.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator56.getStepHandler();
        java.lang.String str65 = dormandPrince853Integrator56.getName();
        double double66 = dormandPrince853Integrator56.getMinReduction();
        double double67 = dormandPrince853Integrator56.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator56.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler68);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator70 = null;
        stepHandler68.handleStep(stepInterpolator70, true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9486832980505138d + "'", double34 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler48);
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str65, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler68);
    }

    @Test
    public void test12593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12593");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        java.lang.String str10 = mathException9.getPattern();
        java.lang.Object[] objArray11 = mathException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("", objArray11);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.lang.String str19 = mathException18.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray11, (java.lang.Throwable) derivativeException20);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray11);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray11);
        java.lang.String str24 = integratorException23.getPattern();
        java.lang.String str25 = integratorException23.getPattern();
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray29, throwable30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", objArray29);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray37, throwable38);
        java.io.IOException iOException40 = new java.io.IOException("hi!", (java.lang.Throwable) mathException39);
        java.io.IOException iOException41 = new java.io.IOException("hi!", (java.lang.Throwable) iOException40);
        java.io.IOException iOException42 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray29, (java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) mathException43);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException43);
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) mathException43);
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) mathException43);
        integratorException23.addSuppressed((java.lang.Throwable) iOException47);
        org.apache.commons.math.ode.IntegratorException integratorException49 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException47);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test12594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12594");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray5);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", (java.lang.Throwable) derivativeException14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException14);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        derivativeException16.addSuppressed((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: hi!", (java.lang.Throwable) derivativeException16);
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException21);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray29, throwable30);
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) mathException31);
        java.io.IOException iOException33 = new java.io.IOException("hi!", (java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException33);
        java.lang.Throwable[] throwableArray35 = iOException34.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException34);
        java.io.IOException iOException39 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
        mathException37.addSuppressed((java.lang.Throwable) iOException39);
        mathException21.addSuppressed((java.lang.Throwable) iOException39);
        java.lang.Throwable throwable42 = null;
        // The following exception was thrown during execution in test generation
        try {
            iOException39.addSuppressed(throwable42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test12595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12595");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.io.IOException iOException19 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException20);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray25, throwable26);
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) mathException27);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray10, (java.lang.Throwable) iOException28);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray36, throwable37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.String str40 = mathException39.getPattern();
        java.lang.Object[] objArray41 = mathException39.getArguments();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException39);
        java.lang.String str43 = mathException39.getPattern();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException39);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException47 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException47);
        java.io.IOException iOException49 = new java.io.IOException((java.lang.Throwable) integratorException47);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test12596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12596");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction13, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double18 = dormandPrince853Integrator11.getSafety();
        double double19 = dormandPrince853Integrator11.getMaxGrowth();
        double double20 = dormandPrince853Integrator11.getCurrentStepStart();
        double double21 = dormandPrince853Integrator11.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        stepHandler22.handleStep(stepInterpolator23, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        int int27 = dormandPrince853Integrator4.getOrder();
        double double28 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test12597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12597");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.String str7 = mathException6.getPattern();
        java.lang.Object[] objArray8 = mathException6.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException6);
        java.io.IOException iOException10 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException10);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler13 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        boolean boolean15 = switchingFunctionsHandler13.evaluateStep(stepInterpolator14);
        double[] doubleArray25 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray28 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray25, doubleArray28);
        switchingFunctionsHandler13.stepAccepted(100.0d, doubleArray25);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        switchingFunctionsHandler13.add(switchingFunction31, 100.0d, (double) 0.0f, (int) (byte) 1);
        java.io.IOException iOException37 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction44, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator43.setMinReduction(100.0d);
        double double51 = dormandPrince853Integrator43.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction52, (double) 3, (double) (-1L), (int) (byte) -1);
        java.lang.Object[] objArray57 = new java.lang.Object[] { switchingFunctionsHandler13, "hi!", "Dormand-Prince 8 (5, 3)", (-1L) };
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", objArray59, throwable60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.String str63 = mathException62.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray57, (java.lang.Throwable) mathException62);
        mathException11.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Object[] objArray67 = mathException11.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
    }

    @Test
    public void test12598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12598");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler14 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double21 = dormandPrince853Integrator20.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction22, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double27 = dormandPrince853Integrator20.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator20.getStepHandler();
        stepHandler28.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        java.lang.String str31 = dormandPrince853Integrator4.getName();
        java.lang.String str32 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 1L);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12599");
        java.io.IOException iOException1 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException1);
        java.lang.Class<?> wildcardClass4 = derivativeException3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test12600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12600");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!");
        org.apache.commons.math.ode.IntegratorException integratorException2 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException1);
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray9, throwable10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.String str13 = mathException12.getPattern();
        java.lang.Object[] objArray14 = mathException12.getArguments();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException12);
        java.io.IOException iOException16 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException12);
        java.io.IOException iOException18 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Throwable) mathException12);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) mathException19);
        mathException1.addSuppressed((java.lang.Throwable) mathException19);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test12601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12601");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray5);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray13, throwable14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray13);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray21, throwable22);
        java.io.IOException iOException24 = new java.io.IOException("hi!", (java.lang.Throwable) mathException23);
        java.io.IOException iOException25 = new java.io.IOException("hi!", (java.lang.Throwable) iOException24);
        java.io.IOException iOException26 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray13, (java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) mathException27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5, (java.lang.Throwable) derivativeException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException29);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray37, throwable38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        java.lang.String str41 = mathException40.getPattern();
        java.lang.Object[] objArray42 = mathException40.getArguments();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException40);
        java.lang.Object[] objArray44 = mathException43.getArguments();
        java.lang.Object[] objArray45 = mathException43.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", objArray45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException47);
        derivativeException29.addSuppressed((java.lang.Throwable) mathException48);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray54, throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", objArray54);
        java.lang.Object[] objArray58 = mathException57.getArguments();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", objArray58);
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        java.lang.String[] strArray64 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException66 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray64);
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException", strArray64);
        org.apache.commons.math.ode.IntegratorException integratorException68 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException67);
        java.lang.String str69 = derivativeException67.getPattern();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) throwableArray60, (java.lang.Throwable) derivativeException67);
        java.io.IOException iOException71 = new java.io.IOException((java.lang.Throwable) mathException70);
        mathException48.addSuppressed((java.lang.Throwable) iOException71);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.math.MathException" + "'", str69, "org.apache.commons.math.MathException");
    }

    @Test
    public void test12602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12602");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        stepHandler7.reset();
        boolean boolean9 = stepHandler7.requiresDenseOutput();
        stepHandler7.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        stepHandler7.handleStep(stepInterpolator11, false);
        stepHandler7.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12603");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.885661912765424d, 22.80350850198276d, 100.0d, (double) (short) -1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 11.585065449428521d + "'", double5 == 11.585065449428521d);
    }

    @Test
    public void test12604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12604");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, 8.0d, 3.1622776601683795d, (double) 2);
    }

    @Test
    public void test12605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12605");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        boolean boolean4 = switchingFunctionsHandler0.isEmpty();
        boolean boolean5 = switchingFunctionsHandler0.stop();
        boolean boolean6 = switchingFunctionsHandler0.isEmpty();
        boolean boolean7 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        switchingFunctionsHandler0.add(switchingFunction8, (double) (byte) 0, (double) 0L, (int) (byte) 10);
        boolean boolean13 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        switchingFunctionsHandler0.add(switchingFunction14, 72.11102550927978d, 0.0d, 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test12606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12606");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        double double23 = dormandPrince853Integrator21.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction29, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator28.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator28.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        stepHandler36.handleStep(stepInterpolator37, false);
        stepHandler36.reset();
        dormandPrince853Integrator21.setStepHandler(stepHandler36);
        boolean boolean42 = stepHandler36.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler36);
        double double44 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int45 = dormandPrince853Integrator4.getOrder();
        java.lang.String str46 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str46, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12607");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(31.622776601683793d, (double) (byte) -1, 0.2d, (double) (short) 10);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test12608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12608");
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException", strArray13);
        java.lang.Throwable[] throwableArray25 = derivativeException24.getSuppressed();
        java.io.IOException iOException26 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) derivativeException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException26);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test12609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12609");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException10);
        java.lang.String str12 = mathException10.getPattern();
        java.lang.Object[] objArray13 = mathException10.getArguments();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", objArray13);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.io.IOException: org.apache.commons.math.MathException: hi!" + "'", str12, "java.io.IOException: org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test12610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12610");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 10, 55.3841974787333d, 32.0d);
    }

    @Test
    public void test12611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12611");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7, (java.lang.Throwable) iOException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException16);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException19);
        java.lang.Throwable[] throwableArray21 = derivativeException19.getSuppressed();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test12612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12612");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        int int23 = dormandPrince853Integrator17.getOrder();
        double double24 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        double double26 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction28, 97.0d, (double) 10.0f, (int) ' ');
        double double33 = dormandPrince853Integrator17.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(stepHandler34);
    }

    @Test
    public void test12613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12613");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException(throwable4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.io.IOException iOException9 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException6);
        java.lang.Throwable[] throwableArray10 = iOException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray10);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test12614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12614");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 3, (double) 100.0f, (double) 0L, (double) (byte) 100);
        double double5 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(3.732075599071396d);
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.0d + "'", double5 == 3.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 17.320508075688775d + "'", double8 == 17.320508075688775d);
    }

    @Test
    public void test12615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12615");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("");
        java.lang.String str2 = mathException1.getPattern();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray9, throwable10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.String str13 = mathException12.getPattern();
        java.lang.Object[] objArray14 = mathException12.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("java.io.IOException", objArray14);
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray14);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", objArray14);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException23);
        mathException18.addSuppressed((java.lang.Throwable) mathException23);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException23);
        mathException1.addSuppressed((java.lang.Throwable) mathException23);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test12616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12616");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException1 = new org.apache.commons.math.ode.DerivativeException(throwable0);
        java.lang.Throwable[] throwableArray2 = derivativeException1.getSuppressed();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) derivativeException1);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException1);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException1);
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test12617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12617");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) (-1L), (double) (byte) 10, 0.2d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
    }

    @Test
    public void test12618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12618");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException8);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) mathException17);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException18);
        mathException11.addSuppressed((java.lang.Throwable) mathException20);
        java.lang.String str22 = mathException20.getPattern();
        java.lang.Throwable[] throwableArray23 = mathException20.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray23);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str22, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test12619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12619");
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("", objArray1);
        java.lang.Object[] objArray3 = mathException2.getArguments();
        java.lang.Object[] objArray4 = mathException2.getArguments();
        java.lang.String str5 = mathException2.getPattern();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test12620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12620");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, (double) 0.0f, (double) 10L, (int) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) 1L, (double) (short) 0, (int) (byte) -1);
        boolean boolean33 = switchingFunctionsHandler0.isEmpty();
        boolean boolean34 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        switchingFunctionsHandler0.add(switchingFunction35, 100.0d, (double) 10L, (int) (short) 1);
        boolean boolean40 = switchingFunctionsHandler0.isEmpty();
        double double41 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test12621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12621");
        java.lang.String[] strArray2 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("", strArray2);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException4);
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        java.lang.Object[] objArray7 = mathException5.getArguments();
        java.lang.String[] strArray20 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray20);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: ", strArray20);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException(throwable32);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException(throwable32);
        java.lang.Object[] objArray35 = integratorException34.getArguments();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray35);
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray45);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray45);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray45);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray45);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray45, (java.lang.Throwable) mathException52);
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray45);
        java.lang.Object[] objArray55 = derivativeException54.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: hi!", objArray55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: ", objArray35, (java.lang.Throwable) integratorException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray20, (java.lang.Throwable) integratorException56);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: java.io.IOException: ", strArray20);
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", strArray20);
        mathException5.addSuppressed((java.lang.Throwable) derivativeException60);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test12622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12622");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean20 = switchingFunctionsHandler19.stop();
        double double21 = switchingFunctionsHandler19.getEventTime();
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        switchingFunctionsHandler19.stepAccepted(0.2d, doubleArray26);
        boolean boolean42 = switchingFunctionsHandler0.reset((double) 'a', doubleArray26);
        boolean boolean43 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler45 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean46 = switchingFunctionsHandler45.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler48 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator49 = null;
        boolean boolean50 = switchingFunctionsHandler48.evaluateStep(stepInterpolator49);
        double[] doubleArray60 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray63 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray60, doubleArray63);
        switchingFunctionsHandler48.stepAccepted(100.0d, doubleArray60);
        switchingFunctionsHandler45.stepAccepted((double) (short) 10, doubleArray60);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler68 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean69 = switchingFunctionsHandler68.stop();
        double double70 = switchingFunctionsHandler68.getEventTime();
        double[] doubleArray75 = new double[] { Double.NaN };
        double[] doubleArray84 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray87 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray84, doubleArray87);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray75, doubleArray84);
        switchingFunctionsHandler68.stepAccepted(0.2d, doubleArray75);
        boolean boolean91 = switchingFunctionsHandler45.reset((double) (byte) -1, doubleArray75);
        boolean boolean92 = switchingFunctionsHandler0.reset(8.0d, doubleArray75);
        boolean boolean93 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test12623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12623");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, 0.0d, 0.0d, (double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12624");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        boolean boolean23 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        boolean boolean25 = switchingFunctionsHandler0.evaluateStep(stepInterpolator24);
        boolean boolean26 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler28 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean29 = switchingFunctionsHandler28.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler31 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        boolean boolean33 = switchingFunctionsHandler31.evaluateStep(stepInterpolator32);
        double[] doubleArray43 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray46 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray43, doubleArray46);
        switchingFunctionsHandler31.stepAccepted(100.0d, doubleArray43);
        switchingFunctionsHandler28.stepAccepted((double) (short) 10, doubleArray43);
        boolean boolean50 = switchingFunctionsHandler28.isEmpty();
        boolean boolean51 = switchingFunctionsHandler28.isEmpty();
        double[] doubleArray60 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray60, doubleArray69);
        boolean boolean75 = switchingFunctionsHandler28.reset((double) (short) 0, doubleArray60);
        boolean boolean76 = switchingFunctionsHandler0.reset(3.430936289925951d, doubleArray60);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction77 = null;
        switchingFunctionsHandler0.add(switchingFunction77, (double) (-1), (double) (byte) 10, (int) '4');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction82 = null;
        switchingFunctionsHandler0.add(switchingFunction82, (double) (short) 10, 7.211102550927978d, (int) '#');
        double double87 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction88 = null;
        switchingFunctionsHandler0.add(switchingFunction88, 14.142135623730951d, 4.47213595499958d, (int) ' ');
        double double93 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test12625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12625");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(18.708286933869708d, 10.0d, (double) (short) 1, 35.0d);
    }

    @Test
    public void test12626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12626");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator12.getSafety();
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        java.lang.String str21 = dormandPrince853Integrator12.getName();
        double double22 = dormandPrince853Integrator12.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test12627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12627");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray7, throwable8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.String str11 = mathException10.getPattern();
        java.lang.Object[] objArray12 = mathException10.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException10);
        java.io.IOException iOException14 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray15 = mathException10.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray17, throwable18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        java.lang.String str21 = mathException20.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException20);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.io.IOException iOException26 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) iOException26);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray34, throwable35);
        org.apache.commons.math.ode.IntegratorException integratorException37 = new org.apache.commons.math.ode.IntegratorException(throwable35);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) integratorException37);
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) integratorException37);
        java.io.IOException iOException40 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException37);
        java.lang.Throwable[] throwableArray41 = integratorException37.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray41);
        java.lang.Object[] objArray43 = integratorException42.getArguments();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray43);
        java.io.IOException iOException45 = new java.io.IOException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException44);
        mathException28.addSuppressed((java.lang.Throwable) iOException45);
        java.lang.Throwable[] throwableArray47 = iOException45.getSuppressed();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException45);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test12628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12628");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
    }

    @Test
    public void test12629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12629");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setSafety((double) 1);
        dormandPrince853Integrator4.setSafety(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth(2.8284271247461903d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test12630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12630");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        double double9 = dormandPrince853Integrator4.getMaxGrowth();
        double double10 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
    }

    @Test
    public void test12631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12631");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, (double) 0, (double) 1.0f, 0);
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        double double18 = dormandPrince853Integrator4.getMaxGrowth();
        int int19 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test12632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12632");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(72.11102550927978d, Double.NaN, 17.320508075688775d, 100.0d);
        dormandPrince853Integrator4.setMinReduction((double) 3);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test12633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12633");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (-1.0d), (double) (-1), (double) 100);
        dormandPrince853Integrator4.setMinReduction((double) 1L);
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test12634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12634");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) (byte) 0, (double) 10L, (int) (short) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test12635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12635");
        java.lang.String[] strArray12 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        java.io.IOException iOException17 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12, (java.lang.Throwable) iOException17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("", strArray12);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException", strArray12);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException();
        java.lang.String[] strArray34 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray34);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray34);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) derivativeException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        mathException28.addSuppressed((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException", (java.lang.Throwable) mathException39);
        java.lang.Throwable[] throwableArray43 = mathException39.getSuppressed();
        java.lang.Object[] objArray44 = mathException39.getArguments();
        java.lang.Throwable[] throwableArray45 = mathException39.getSuppressed();
        derivativeException26.addSuppressed((java.lang.Throwable) mathException39);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test12636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12636");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double22 = dormandPrince853Integrator21.getMaxStep();
        java.lang.String str23 = dormandPrince853Integrator21.getName();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator21.getStepHandler();
        boolean boolean25 = stepHandler24.requiresDenseOutput();
        boolean boolean26 = stepHandler24.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        java.lang.String str28 = dormandPrince853Integrator4.getName();
        double double29 = dormandPrince853Integrator4.getMaxGrowth();
        double double30 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.0d + "'", double22 == 2.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
    }

    @Test
    public void test12637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12637");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: hi!", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test12638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12638");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException", strArray11);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) derivativeException21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException22);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test12639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12639");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray8);
        java.lang.String[] strArray24 = new java.lang.String[] { "org.apache.commons.math.MathException", "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", "org.apache.commons.math.ode.IntegratorException", "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", "org.apache.commons.math.ode.IntegratorException: ", "org.apache.commons.math.MathException: hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray24);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray32);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray40, throwable41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException42);
        java.lang.String str44 = mathException43.getPattern();
        java.lang.Object[] objArray45 = mathException43.getArguments();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException43);
        java.io.IOException iOException47 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException49);
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray24, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException53);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
    }

    @Test
    public void test12640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12640");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.String str9 = mathException8.getPattern();
        java.lang.Object[] objArray10 = mathException8.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("", objArray10);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        java.lang.String str18 = mathException17.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray10, (java.lang.Throwable) derivativeException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", (java.lang.Throwable) derivativeException19);
        java.lang.String[] strArray24 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Throwable) derivativeException25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException25);
        mathException21.addSuppressed((java.lang.Throwable) derivativeException25);
        java.lang.String[] strArray35 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException36 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray35);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray35);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray40, throwable41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Throwable) mathException42);
        java.io.IOException iOException46 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Throwable) mathException45);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException45);
        derivativeException25.addSuppressed((java.lang.Throwable) derivativeException47);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
    }

    @Test
    public void test12641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12641");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException(throwable4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.lang.String str8 = integratorException6.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException6);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException9);
        java.lang.Throwable[] throwableArray12 = derivativeException11.getSuppressed();
        java.io.IOException iOException15 = new java.io.IOException("org.apache.commons.math.MathException: hi!");
        java.lang.Throwable[] throwableArray16 = iOException15.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException18 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) iOException17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        java.lang.String str24 = mathException23.getPattern();
        java.lang.Object[] objArray25 = mathException23.getArguments();
        java.lang.String str26 = mathException23.getPattern();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) mathException23);
        iOException18.addSuppressed((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) mathException23);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray35, throwable36);
        java.io.IOException iOException38 = new java.io.IOException("hi!", (java.lang.Throwable) mathException37);
        java.lang.String str39 = mathException37.getPattern();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray46, throwable47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException48);
        java.lang.String str50 = mathException49.getPattern();
        java.lang.Object[] objArray51 = mathException49.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException52 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray51);
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException("", objArray51);
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) integratorException53);
        java.lang.Object[] objArray55 = integratorException53.getArguments();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException53);
        org.apache.commons.math.ode.IntegratorException integratorException57 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException56);
        mathException40.addSuppressed((java.lang.Throwable) mathException56);
        java.io.IOException iOException60 = new java.io.IOException("hi!", (java.lang.Throwable) mathException40);
        java.io.IOException iOException61 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: ", (java.lang.Throwable) iOException60);
        mathException23.addSuppressed((java.lang.Throwable) iOException60);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test12642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12642");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double23 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        double double26 = dormandPrince853Integrator4.getCurrentStepStart();
        double double27 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety(17.320508075688775d);
        dormandPrince853Integrator4.setMaxGrowth(14.142135623730951d);
        dormandPrince853Integrator4.setMaxGrowth((double) (-1.0f));
        int int34 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test12643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12643");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        double double11 = dormandPrince853Integrator9.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator9.setStepHandler(stepHandler24);
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double31 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction(97.0d);
        double double34 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(5.916079783099616d);
        java.lang.String str37 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.2d + "'", double31 == 0.2d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12644");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        double double19 = dormandPrince853Integrator17.getMinStep();
        double double20 = dormandPrince853Integrator17.getSafety();
        double double21 = dormandPrince853Integrator17.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test12645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12645");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray7);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) iOException19);
        java.lang.Throwable[] throwableArray23 = iOException19.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray7, (java.lang.Throwable) mathException24);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray33);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray40, throwable41);
        java.io.IOException iOException43 = new java.io.IOException("hi!", (java.lang.Throwable) mathException42);
        java.io.IOException iOException44 = new java.io.IOException("hi!", (java.lang.Throwable) iOException43);
        java.io.IOException iOException46 = new java.io.IOException("");
        iOException43.addSuppressed((java.lang.Throwable) iOException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray33, (java.lang.Throwable) iOException46);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray53, throwable54);
        java.io.IOException iOException56 = new java.io.IOException("hi!", (java.lang.Throwable) mathException55);
        java.io.IOException iOException57 = new java.io.IOException("hi!", (java.lang.Throwable) iOException56);
        java.io.IOException iOException58 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException57);
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray62, throwable63);
        java.io.IOException iOException65 = new java.io.IOException("hi!", (java.lang.Throwable) mathException64);
        org.apache.commons.math.ode.IntegratorException integratorException66 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException65);
        iOException57.addSuppressed((java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException67);
        java.lang.Object[] objArray72 = new java.lang.Object[] {};
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("hi!", objArray72, throwable73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException74);
        java.lang.String str76 = mathException75.getPattern();
        java.lang.Object[] objArray77 = mathException75.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException78 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray77);
        java.io.IOException iOException79 = new java.io.IOException((java.lang.Throwable) integratorException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray33, (java.lang.Throwable) integratorException78);
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("hi!", objArray84, throwable85);
        java.io.IOException iOException87 = new java.io.IOException("hi!", (java.lang.Throwable) mathException86);
        org.apache.commons.math.ode.IntegratorException integratorException88 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException87);
        org.apache.commons.math.ode.DerivativeException derivativeException90 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException87);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) strArray33, (java.lang.Throwable) iOException87);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray7, (java.lang.Throwable) iOException87);
        org.apache.commons.math.ode.DerivativeException derivativeException93 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", strArray7);
        java.lang.String str94 = derivativeException93.getPattern();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!" + "'", str94, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test12646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12646");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (-1.0d), (double) (-1), (int) '#');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        int int16 = dormandPrince853Integrator4.getOrder();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction18, (double) (short) 100, (double) (byte) 100, 1);
        dormandPrince853Integrator4.setMinReduction(97.0d);
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12647");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        int int21 = dormandPrince853Integrator4.getOrder();
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction25, (double) ' ', 3.732075599071396d, (int) '#');
        dormandPrince853Integrator4.setMinReduction((double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(stepHandler32);
    }

    @Test
    public void test12648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12648");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction16, (double) (-1.0f), (double) (byte) 0, (int) (short) -1);
        java.lang.String str21 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator12.getStepHandler();
        double double23 = dormandPrince853Integrator12.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler24 = null;
        dormandPrince853Integrator12.setStepHandler(stepHandler24);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test12649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12649");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        int int18 = dormandPrince853Integrator4.getOrder();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        double double21 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator4.getStepHandler();
        int int23 = dormandPrince853Integrator4.getOrder();
        double double24 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
    }

    @Test
    public void test12650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12650");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction11, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction21, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator20.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator20.getStepHandler();
        boolean boolean29 = stepHandler28.requiresDenseOutput();
        boolean boolean30 = stepHandler28.requiresDenseOutput();
        dormandPrince853Integrator9.setStepHandler(stepHandler28);
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        double double33 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize((double) 'a');
        int int37 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double50 = dormandPrince853Integrator49.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction51, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        dormandPrince853Integrator60.addSwitchingFunction(switchingFunction61, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator60.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator60.getStepHandler();
        boolean boolean69 = stepHandler68.requiresDenseOutput();
        boolean boolean70 = stepHandler68.requiresDenseOutput();
        dormandPrince853Integrator49.setStepHandler(stepHandler68);
        dormandPrince853Integrator44.setStepHandler(stepHandler68);
        double double73 = dormandPrince853Integrator44.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator44.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler75 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler75);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator77 = null;
        stepHandler75.handleStep(stepInterpolator77, false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.9d + "'", double50 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler74);
        org.junit.Assert.assertNotNull(stepHandler75);
    }

    @Test
    public void test12651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12651");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction20, (double) 10, (double) 'a', (int) (byte) 10);
        int int25 = dormandPrince853Integrator19.getOrder();
        double double26 = dormandPrince853Integrator19.getCurrentSignedStepsize();
        double double27 = dormandPrince853Integrator19.getCurrentSignedStepsize();
        int int28 = dormandPrince853Integrator19.getOrder();
        double double29 = dormandPrince853Integrator19.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator19.getStepHandler();
        stepHandler30.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler30);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler30);
    }

    @Test
    public void test12652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12652");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.isEmpty();
        boolean boolean9 = switchingFunctionsHandler0.isEmpty();
        boolean boolean10 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = switchingFunctionsHandler0.evaluateStep(stepInterpolator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test12653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12653");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        boolean boolean33 = switchingFunctionsHandler0.reset(10.0d, doubleArray31);
        double double34 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        switchingFunctionsHandler36.add(switchingFunction54, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean59 = switchingFunctionsHandler36.stop();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        boolean boolean79 = switchingFunctionsHandler36.reset((double) 1L, doubleArray64);
        switchingFunctionsHandler0.stepAccepted((double) 0, doubleArray64);
        double double81 = switchingFunctionsHandler0.getEventTime();
        double double82 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator83 = null;
        boolean boolean84 = switchingFunctionsHandler0.evaluateStep(stepInterpolator83);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction85 = null;
        switchingFunctionsHandler0.add(switchingFunction85, 11.801859293002996d, 42.661458015403085d, (int) '#');
        double double90 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = switchingFunctionsHandler0.evaluateStep(stepInterpolator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test12654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12654");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double double18 = switchingFunctionsHandler0.getEventTime();
        boolean boolean19 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        switchingFunctionsHandler0.add(switchingFunction20, (-1.0d), 0.9486832980505138d, (int) '#');
        double double25 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        switchingFunctionsHandler0.add(switchingFunction26, (-0.0d), (double) 'a', (int) (short) 100);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = switchingFunctionsHandler0.evaluateStep(stepInterpolator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test12655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12655");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.String str8 = mathException7.getPattern();
        java.lang.Object[] objArray9 = mathException7.getArguments();
        java.lang.String str10 = mathException7.getPattern();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) mathException7);
        java.io.IOException iOException12 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException11);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException19.getPattern();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray21);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("", objArray21);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) integratorException23);
        iOException12.addSuppressed((java.lang.Throwable) integratorException23);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray28, throwable29);
        java.io.IOException iOException31 = new java.io.IOException("hi!", (java.lang.Throwable) mathException30);
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException31);
        integratorException23.addSuppressed((java.lang.Throwable) iOException31);
        java.io.IOException iOException34 = new java.io.IOException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException31);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException31);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) iOException31);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test12656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12656");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator4.getStepHandler();
        int int33 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray42 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray45 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray42, doubleArray45);
        java.lang.String str47 = dormandPrince853Integrator46.getName();
        dormandPrince853Integrator46.setMinReduction(0.9d);
        dormandPrince853Integrator46.setSafety((double) (-1.0f));
        double double52 = dormandPrince853Integrator46.getMaxStep();
        double double53 = dormandPrince853Integrator46.getCurrentSignedStepsize();
        double double54 = dormandPrince853Integrator46.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator46.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler55);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9d + "'", double52 == 0.9d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.9486832980505138d + "'", double53 == 0.9486832980505138d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(stepHandler55);
    }

    @Test
    public void test12657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12657");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double21 = dormandPrince853Integrator20.getMaxStep();
        java.lang.String str22 = dormandPrince853Integrator20.getName();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((-0.0d));
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) 0L);
        int int32 = dormandPrince853Integrator4.getOrder();
        double double33 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test12658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12658");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException22);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test12659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12659");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test12660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12660");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException1);
    }

    @Test
    public void test12661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12661");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator18.addSwitchingFunction(switchingFunction20, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator29.addSwitchingFunction(switchingFunction30, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator29.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator29.getStepHandler();
        boolean boolean38 = stepHandler37.requiresDenseOutput();
        boolean boolean39 = stepHandler37.requiresDenseOutput();
        dormandPrince853Integrator18.setStepHandler(stepHandler37);
        double double41 = dormandPrince853Integrator18.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction47 = null;
        dormandPrince853Integrator46.addSwitchingFunction(switchingFunction47, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator46.setMinReduction(100.0d);
        double double54 = dormandPrince853Integrator46.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction55 = null;
        dormandPrince853Integrator46.addSwitchingFunction(switchingFunction55, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator46.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator61 = null;
        stepHandler60.handleStep(stepInterpolator61, false);
        dormandPrince853Integrator18.setStepHandler(stepHandler60);
        int int65 = dormandPrince853Integrator18.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler66 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler66);
        boolean boolean68 = stepHandler66.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9d + "'", double41 == 0.9d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(stepHandler66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test12662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12662");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (-0.0d), (double) (short) 10, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety((double) (byte) 1);
        double[] doubleArray12 = null;
        double[] doubleArray20 = new double[] { Double.NaN };
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray20, doubleArray29);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler37 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler39 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        boolean boolean41 = switchingFunctionsHandler39.evaluateStep(stepInterpolator40);
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        switchingFunctionsHandler39.stepAccepted(100.0d, doubleArray51);
        switchingFunctionsHandler37.stepAccepted((double) (short) 1, doubleArray51);
        double[] doubleArray61 = new double[] { Double.NaN };
        double[] doubleArray70 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray73 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray70, doubleArray73);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray61, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray51, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray29, doubleArray51);
        double[] doubleArray86 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray89 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray86, doubleArray89);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 1.0f, doubleArray51, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 1, doubleArray12, doubleArray86);
        org.apache.commons.math.ode.StepHandler stepHandler93 = dormandPrince853Integrator92.getStepHandler();
        stepHandler93.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler93);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler93);
    }

    @Test
    public void test12663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12663");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        boolean boolean21 = stepHandler20.requiresDenseOutput();
        stepHandler20.reset();
        boolean boolean23 = stepHandler20.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test12664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12664");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.Object[] objArray7 = mathException5.getArguments();
        java.lang.String str8 = mathException5.getPattern();
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) mathException5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.io.IOException iOException12 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException5);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test12665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12665");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        boolean boolean23 = switchingFunctionsHandler0.isEmpty();
        boolean boolean24 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler0.evaluateStep(stepInterpolator25);
        boolean boolean27 = switchingFunctionsHandler0.isEmpty();
        double double28 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        switchingFunctionsHandler0.add(switchingFunction29, 0.6324555320336759d, 23.893706400185096d, 2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test12666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12666");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((double) (byte) 10);
        double double18 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMaxGrowth(8.0d);
        double double21 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test12667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12667");
        double[] doubleArray7 = new double[] { Double.NaN };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray7, doubleArray16);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        switchingFunctionsHandler24.stepAccepted((double) (short) 1, doubleArray38);
        double[] doubleArray48 = new double[] { Double.NaN };
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray48, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray38, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray16, doubleArray38);
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 1.0f, doubleArray38, doubleArray73);
        java.lang.String str79 = dormandPrince853Integrator78.getName();
        double double80 = dormandPrince853Integrator78.getCurrentStepStart();
        dormandPrince853Integrator78.setInitialStepSize(2.0d);
        double double83 = dormandPrince853Integrator78.getMaxStep();
        dormandPrince853Integrator78.setMaxGrowth(11.585065449428521d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str79, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test12668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12668");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        stepHandler29.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        double double35 = dormandPrince853Integrator4.getCurrentStepStart();
        double double36 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler37 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9d + "'", double36 == 0.9d);
        org.junit.Assert.assertNull(stepHandler39);
    }

    @Test
    public void test12669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12669");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, 6.5147610572485615d, (double) 10.0f, (int) 'a');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test12670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12670");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.String str8 = mathException7.getPattern();
        java.lang.Object[] objArray9 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException7);
        java.io.IOException iOException11 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray13 = integratorException12.getSuppressed();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) integratorException12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) integratorException12);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test12671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12671");
        java.io.IOException iOException4 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: hi!");
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray5);
        java.io.IOException iOException7 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("java.io.IOException: ", (java.lang.Object[]) throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test12672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12672");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(1.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (short) 1, (double) (short) 100, 0);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12673");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        dormandPrince853Integrator12.setMaxGrowth((double) (short) 1);
        double double21 = dormandPrince853Integrator12.getMinReduction();
        int int22 = dormandPrince853Integrator12.getOrder();
        double double23 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9486832980505138d + "'", double23 == 0.9486832980505138d);
    }

    @Test
    public void test12674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12674");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator12.getSafety();
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        java.lang.String str21 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator12.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler22);
    }

    @Test
    public void test12675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12675");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety(1.0d);
        double double16 = dormandPrince853Integrator4.getMinReduction();
        double double17 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test12676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12676");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test12677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12677");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        int int14 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) 100L, (double) 10L, (int) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator4.getStepHandler();
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        double double24 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler25 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double27 = dormandPrince853Integrator4.getMaxGrowth();
        int int28 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test12678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12678");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, Double.NaN, (double) 2, 17.320508075688775d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        double double16 = dormandPrince853Integrator14.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        stepHandler29.reset();
        dormandPrince853Integrator14.setStepHandler(stepHandler29);
        dormandPrince853Integrator9.setStepHandler(stepHandler29);
        stepHandler29.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        double double38 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction41, 100.0d, 13.92838827718412d, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator4.getStepHandler();
        double double47 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.9d + "'", double38 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.2d + "'", double47 == 0.2d);
    }

    @Test
    public void test12679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12679");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', (double) (-1L), 0.2d, (double) 8);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test12680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12680");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray3);
        java.io.IOException iOException5 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) derivativeException4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = mathException6.getSuppressed();
        java.lang.String str9 = mathException6.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException" + "'", str9, "org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test12681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12681");
        java.io.IOException iOException1 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException1);
        java.lang.String str3 = mathException2.getPattern();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException" + "'", str3, "java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test12682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12682");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        boolean boolean33 = stepHandler29.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator39.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator39.getStepHandler();
        boolean boolean48 = stepHandler47.requiresDenseOutput();
        boolean boolean49 = stepHandler47.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator50 = null;
        stepHandler47.handleStep(stepInterpolator50, true);
        dormandPrince853Integrator12.setStepHandler(stepHandler47);
        java.lang.String str54 = dormandPrince853Integrator12.getName();
        double double55 = dormandPrince853Integrator12.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction56 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction56, (double) 2, (double) (byte) 0, (int) (byte) 1);
        java.lang.String str61 = dormandPrince853Integrator12.getName();
        java.lang.String str62 = dormandPrince853Integrator12.getName();
        java.lang.String str63 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str54, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.9d + "'", double55 == 0.9d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str61, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str62, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str63, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12683");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) ' ', 0.0d, (int) (short) 100);
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinStep();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction(4.161791450287817d);
        double double19 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test12684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12684");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray5);
        java.lang.Throwable[] throwableArray11 = derivativeException10.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException10);
        java.lang.Object[] objArray14 = mathException13.getArguments();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test12685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12685");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', (double) 0, (double) 10, (double) 100L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getCurrentStepStart();
        java.lang.String str11 = dormandPrince853Integrator9.getName();
        double double12 = dormandPrince853Integrator9.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator9.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler13);
        stepHandler13.reset();
        boolean boolean16 = stepHandler13.requiresDenseOutput();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test12686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12686");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray8);
        java.lang.Object[] objArray14 = derivativeException13.getArguments();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException19.getPattern();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", objArray14, (java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray23 = mathException19.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray23);
        java.lang.String[] strArray31 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray31);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray31);
        java.lang.Throwable[] throwableArray36 = derivativeException35.getSuppressed();
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray40, throwable41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", objArray40);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray48, throwable49);
        java.io.IOException iOException51 = new java.io.IOException("hi!", (java.lang.Throwable) mathException50);
        java.io.IOException iOException52 = new java.io.IOException("hi!", (java.lang.Throwable) iOException51);
        java.io.IOException iOException53 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray40, (java.lang.Throwable) iOException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray36, (java.lang.Throwable) iOException53);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException55);
        org.apache.commons.math.ode.IntegratorException integratorException57 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException55);
        mathException24.addSuppressed((java.lang.Throwable) integratorException57);
        java.lang.Object[] objArray59 = integratorException57.getArguments();
        java.lang.String[] strArray66 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray66);
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray66);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray66);
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray74, throwable75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException76);
        java.lang.String str78 = mathException77.getPattern();
        java.lang.Object[] objArray79 = mathException77.getArguments();
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException77);
        java.io.IOException iOException81 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException83);
        java.io.IOException iOException85 = new java.io.IOException((java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        java.lang.Object[] objArray88 = new java.lang.Object[] {};
        java.lang.Throwable throwable89 = null;
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("hi!", objArray88, throwable89);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException90);
        org.apache.commons.math.ode.IntegratorException integratorException92 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException91);
        mathException84.addSuppressed((java.lang.Throwable) mathException91);
        org.apache.commons.math.ode.DerivativeException derivativeException94 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException91);
        java.io.IOException iOException95 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException91);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray59, (java.lang.Throwable) mathException91);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
    }

    @Test
    public void test12687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12687");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, (double) 0.0f, (double) 10L, (int) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) 1L, (double) (short) 0, (int) (byte) -1);
        boolean boolean33 = switchingFunctionsHandler0.isEmpty();
        boolean boolean34 = switchingFunctionsHandler0.isEmpty();
        double double35 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction36 = null;
        switchingFunctionsHandler0.add(switchingFunction36, (double) 3, (double) '#', (int) '#');
        boolean boolean41 = switchingFunctionsHandler0.isEmpty();
        boolean boolean42 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test12688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12688");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("", objArray5);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray12, throwable13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException14);
        java.lang.Object[] objArray16 = mathException14.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray16, (java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("java.io.IOException: ", objArray5, (java.lang.Throwable) mathException19);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException21);
        java.io.IOException iOException23 = new java.io.IOException("", (java.lang.Throwable) mathException21);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
    }

    @Test
    public void test12689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12689");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) ' ', (double) (short) 0, (int) '#');
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        double double20 = dormandPrince853Integrator4.getMinReduction();
        double double21 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12690");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) '#', 0.2d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction19, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator10.getStepHandler();
        java.lang.String str25 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        stepHandler26.handleStep(stepInterpolator27, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler26.handleStep(stepInterpolator30, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler26);
        int int34 = dormandPrince853Integrator4.getOrder();
        double double35 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double36 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test12691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12691");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        java.io.IOException iOException8 = new java.io.IOException("hi!", (java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = iOException8.getSuppressed();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double16 = dormandPrince853Integrator15.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator15.addSwitchingFunction(switchingFunction17, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double22 = dormandPrince853Integrator15.getSafety();
        double double23 = dormandPrince853Integrator15.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction29, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator28.setMinReduction(100.0d);
        double double36 = dormandPrince853Integrator28.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double42 = dormandPrince853Integrator41.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction43 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction43, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double48 = dormandPrince853Integrator41.getCurrentStepStart();
        dormandPrince853Integrator41.setInitialStepSize((double) 0.0f);
        java.lang.String str51 = dormandPrince853Integrator41.getName();
        java.io.IOException iOException53 = new java.io.IOException("hi!");
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray56, throwable57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException58);
        java.lang.String str60 = mathException59.getPattern();
        java.lang.Object[] objArray61 = mathException59.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException62 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray61);
        double[] doubleArray71 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray74 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray71, doubleArray74);
        java.lang.String str76 = dormandPrince853Integrator75.getName();
        dormandPrince853Integrator75.setMinReduction(0.9d);
        java.lang.String str79 = dormandPrince853Integrator75.getName();
        java.lang.Object[] objArray80 = new java.lang.Object[] { double23, double36, dormandPrince853Integrator41, "hi!", objArray61, dormandPrince853Integrator75 };
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray82, throwable83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray61, (java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) mathException86);
        org.apache.commons.math.ode.IntegratorException integratorException88 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray9);
        java.lang.Object[] objArray89 = integratorException88.getArguments();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException88);
        org.apache.commons.math.ode.IntegratorException integratorException91 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException90);
        java.lang.Object[] objArray92 = integratorException91.getArguments();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str76, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str79, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test12692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12692");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (short) 100, (double) (short) -1, (int) 'a');
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction21, 13.92838827718412d, (double) (short) 10, (-1));
        double double26 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double27 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str28 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.2d + "'", double27 == 0.2d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12693");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        stepHandler32.handleStep(stepInterpolator34, true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
    }

    @Test
    public void test12694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12694");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 14.142135623730951d + "'", double7 == 14.142135623730951d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 14.142135623730951d + "'", double12 == 14.142135623730951d);
    }

    @Test
    public void test12695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12695");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getMinReduction();
        dormandPrince853Integrator12.setMinReduction(17.88854381999832d);
        int int20 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2d + "'", double17 == 0.2d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test12696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12696");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        java.lang.String str17 = dormandPrince853Integrator12.getName();
        java.lang.String str18 = dormandPrince853Integrator12.getName();
        java.lang.String str19 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12697");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', (double) (short) 1, (double) '4', (double) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction10, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator9.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator9.getStepHandler();
        double double18 = dormandPrince853Integrator9.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator29.addSwitchingFunction(switchingFunction30, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator29.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator29.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        stepHandler37.handleStep(stepInterpolator38, false);
        dormandPrince853Integrator23.setStepHandler(stepHandler37);
        dormandPrince853Integrator9.setStepHandler(stepHandler37);
        boolean boolean43 = stepHandler37.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        double double45 = dormandPrince853Integrator4.getMaxGrowth();
        double double46 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.2d + "'", double46 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler47);
    }

    @Test
    public void test12698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12698");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 2, 8.0d, (double) (byte) -1, 0.0d);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction12, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double17 = dormandPrince853Integrator10.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        int int19 = dormandPrince853Integrator10.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction20, (double) (byte) 100, (double) 1, (-1));
        double double25 = dormandPrince853Integrator10.getMinStep();
        double double26 = dormandPrince853Integrator10.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler27);
        dormandPrince853Integrator4.setMaxGrowth((double) '#');
        double double31 = dormandPrince853Integrator4.getMinStep();
        double double32 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.0d + "'", double31 == 2.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
    }

    @Test
    public void test12699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12699");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction11, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double16 = dormandPrince853Integrator9.getSafety();
        double double17 = dormandPrince853Integrator9.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction23, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator22.setMinReduction(100.0d);
        double double30 = dormandPrince853Integrator22.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double36 = dormandPrince853Integrator35.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction37, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double42 = dormandPrince853Integrator35.getCurrentStepStart();
        dormandPrince853Integrator35.setInitialStepSize((double) 0.0f);
        java.lang.String str45 = dormandPrince853Integrator35.getName();
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray50, throwable51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.String str54 = mathException53.getPattern();
        java.lang.Object[] objArray55 = mathException53.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray55);
        double[] doubleArray65 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray68 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray65, doubleArray68);
        java.lang.String str70 = dormandPrince853Integrator69.getName();
        dormandPrince853Integrator69.setMinReduction(0.9d);
        java.lang.String str73 = dormandPrince853Integrator69.getName();
        java.lang.Object[] objArray74 = new java.lang.Object[] { double17, double30, dormandPrince853Integrator35, "hi!", objArray55, dormandPrince853Integrator69 };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray76, throwable77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray55, (java.lang.Throwable) mathException79);
        org.apache.commons.math.ode.IntegratorException integratorException81 = new org.apache.commons.math.ode.IntegratorException("", objArray55);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray55);
        org.apache.commons.math.ode.DerivativeException derivativeException83 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Throwable) mathException82);
        java.lang.Object[] objArray85 = mathException82.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException86 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: hi!", objArray85);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9d + "'", double36 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
    }

    @Test
    public void test12700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12700");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction13, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double18 = dormandPrince853Integrator11.getSafety();
        double double19 = dormandPrince853Integrator11.getMaxGrowth();
        double double20 = dormandPrince853Integrator11.getCurrentStepStart();
        double double21 = dormandPrince853Integrator11.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        stepHandler22.handleStep(stepInterpolator23, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        int int27 = dormandPrince853Integrator4.getOrder();
        double double28 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        java.lang.String str31 = dormandPrince853Integrator4.getName();
        double double32 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(stepHandler33);
        org.junit.Assert.assertNotNull(stepHandler34);
    }

    @Test
    public void test12701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12701");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        double double11 = dormandPrince853Integrator9.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator9.setStepHandler(stepHandler24);
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double31 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(0.9486832980505138d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction34, 1.0d, 97.0d, (-1));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction44, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator43.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler51 = dormandPrince853Integrator43.getStepHandler();
        double double52 = dormandPrince853Integrator43.getMaxStep();
        java.lang.String str53 = dormandPrince853Integrator43.getName();
        double double54 = dormandPrince853Integrator43.getSafety();
        dormandPrince853Integrator43.setMaxGrowth(1.0d);
        double double57 = dormandPrince853Integrator43.getCurrentStepStart();
        double double58 = dormandPrince853Integrator43.getCurrentStepStart();
        double double59 = dormandPrince853Integrator43.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler60);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(stepHandler51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str53, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9d + "'", double54 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(stepHandler60);
    }

    @Test
    public void test12702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12702");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        double double19 = dormandPrince853Integrator12.getCurrentStepStart();
        dormandPrince853Integrator12.setMinReduction((double) (short) 100);
        double double22 = dormandPrince853Integrator12.getCurrentStepStart();
        double double23 = dormandPrince853Integrator12.getMinReduction();
        double double24 = dormandPrince853Integrator12.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
    }

    @Test
    public void test12703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12703");
        double[] doubleArray7 = new double[] { Double.NaN };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray7, doubleArray16);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        switchingFunctionsHandler24.stepAccepted((double) (short) 1, doubleArray38);
        double[] doubleArray48 = new double[] { Double.NaN };
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray48, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray38, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray16, doubleArray38);
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 1.0f, doubleArray38, doubleArray73);
        java.lang.String str79 = dormandPrince853Integrator78.getName();
        double double80 = dormandPrince853Integrator78.getMaxStep();
        double double81 = dormandPrince853Integrator78.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str79, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
    }

    @Test
    public void test12704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12704");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize(0.9d);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test12705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12705");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100.0f, (double) 1, 8.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 0.9486832980505138d, 0.0d, 3);
        double double12 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        stepHandler13.reset();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler13);
    }

    @Test
    public void test12706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12706");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, (double) 0.0f, (double) 10L, (int) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) 1L, (double) (short) 0, (int) (byte) -1);
        boolean boolean33 = switchingFunctionsHandler0.isEmpty();
        boolean boolean34 = switchingFunctionsHandler0.isEmpty();
        double double35 = switchingFunctionsHandler0.getEventTime();
        boolean boolean36 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = switchingFunctionsHandler0.evaluateStep(stepInterpolator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12707");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test12708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12708");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double double19 = switchingFunctionsHandler0.getEventTime();
        boolean boolean20 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        switchingFunctionsHandler24.stepAccepted((double) (short) 1, doubleArray38);
        double[] doubleArray48 = new double[] { Double.NaN };
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray48, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray38, doubleArray48);
        switchingFunctionsHandler0.stepAccepted(0.0d, doubleArray38);
        double double65 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator66 = null;
        boolean boolean67 = switchingFunctionsHandler0.evaluateStep(stepInterpolator66);
        boolean boolean68 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator69 = null;
        boolean boolean70 = switchingFunctionsHandler0.evaluateStep(stepInterpolator69);
        boolean boolean71 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test12709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12709");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double double18 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        boolean boolean20 = switchingFunctionsHandler0.evaluateStep(stepInterpolator19);
        double double21 = switchingFunctionsHandler0.getEventTime();
        boolean boolean22 = switchingFunctionsHandler0.stop();
        double double23 = switchingFunctionsHandler0.getEventTime();
        boolean boolean24 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler0.evaluateStep(stepInterpolator25);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler28 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean29 = switchingFunctionsHandler28.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler28.evaluateStep(stepInterpolator30);
        boolean boolean32 = switchingFunctionsHandler28.isEmpty();
        boolean boolean33 = switchingFunctionsHandler28.stop();
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        double[] doubleArray53 = new double[] { Double.NaN };
        double[] doubleArray62 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray65 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray62, doubleArray65);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray53, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0.0f, doubleArray48, doubleArray53);
        switchingFunctionsHandler28.stepAccepted((double) 100L, doubleArray48);
        boolean boolean70 = switchingFunctionsHandler0.reset((double) 2, doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test12710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12710");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(0.9486832980505138d);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler12 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler14 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        boolean boolean16 = switchingFunctionsHandler14.evaluateStep(stepInterpolator15);
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        switchingFunctionsHandler14.stepAccepted(100.0d, doubleArray26);
        switchingFunctionsHandler12.stepAccepted((double) (short) 1, doubleArray26);
        double[] doubleArray36 = new double[] { Double.NaN };
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray36, doubleArray45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray26, doubleArray36);
        double double52 = dormandPrince853Integrator51.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator57.addSwitchingFunction(switchingFunction58, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator57.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator57.getStepHandler();
        boolean boolean66 = stepHandler65.requiresDenseOutput();
        boolean boolean67 = stepHandler65.requiresDenseOutput();
        boolean boolean68 = stepHandler65.requiresDenseOutput();
        dormandPrince853Integrator51.setStepHandler(stepHandler65);
        stepHandler65.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler65);
        boolean boolean72 = stepHandler65.requiresDenseOutput();
        stepHandler65.reset();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9d + "'", double52 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12711");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.stop();
        double double9 = switchingFunctionsHandler0.getEventTime();
        boolean boolean10 = switchingFunctionsHandler0.stop();
        boolean boolean11 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12712");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        double double19 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, (double) (short) -1, (double) 10.0f, (int) (byte) 10);
        double double25 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str26 = dormandPrince853Integrator4.getName();
        java.lang.String str27 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12713");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction23, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double28 = dormandPrince853Integrator21.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        double double30 = dormandPrince853Integrator21.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler31);
        double double33 = dormandPrince853Integrator12.getMinReduction();
        java.lang.String str34 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction35, 3.0d, 0.6324555320336759d, (int) (short) 0);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction46, (double) 10, (double) 'a', (int) (byte) 10);
        int int51 = dormandPrince853Integrator45.getOrder();
        double double52 = dormandPrince853Integrator45.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator57.addSwitchingFunction(switchingFunction58, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator57.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator57.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator66 = null;
        stepHandler65.handleStep(stepInterpolator66, false);
        stepHandler65.reset();
        dormandPrince853Integrator45.setStepHandler(stepHandler65);
        dormandPrince853Integrator45.setInitialStepSize((double) (short) 0);
        java.lang.String str73 = dormandPrince853Integrator45.getName();
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator45.getStepHandler();
        boolean boolean75 = stepHandler74.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler74);
        boolean boolean77 = stepHandler74.requiresDenseOutput();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler65);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12714");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setSafety((double) (short) 0);
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test12715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12715");
        java.lang.String[] strArray13 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        java.io.IOException iOException18 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13, (java.lang.Throwable) iOException18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray13);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException", strArray13);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test12716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12716");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', (double) (-1.0f), 14.142135623730951d);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler31);
        stepHandler31.reset();
        stepHandler31.reset();
        boolean boolean35 = stepHandler31.requiresDenseOutput();
        boolean boolean36 = stepHandler31.requiresDenseOutput();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12717");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        int int14 = dormandPrince853Integrator4.getOrder();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        double double16 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator18 = null;
        stepHandler17.handleStep(stepInterpolator18, true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test12718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12718");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (-1L), (double) 100, 3);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 0L);
        double double21 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double22 = dormandPrince853Integrator4.getMaxGrowth();
        double double23 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test12719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12719");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (short) -1, (double) 0L, 0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10.0f, (double) 1L, (int) (short) 10);
        double double11 = dormandPrince853Integrator4.getMinReduction();
        int int12 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test12720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12720");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.String str9 = mathException8.getPattern();
        java.lang.Object[] objArray10 = mathException8.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException8);
        java.io.IOException iOException12 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException8);
        java.lang.Throwable[] throwableArray13 = mathException8.getSuppressed();
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.lang.String str19 = mathException18.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException18);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) iOException21);
        java.io.IOException iOException23 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException23);
        org.apache.commons.math.ode.IntegratorException integratorException25 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException23);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException23);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test12721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12721");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', 0.9486832980505138d, (double) (byte) 0, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, 0.0d, 4.47213595499958d, 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test12722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12722");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 10.0d, (double) (byte) 100, 0.2d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12723");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', (double) 0, (double) 10, (double) 100L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getCurrentStepStart();
        java.lang.String str11 = dormandPrince853Integrator9.getName();
        double double12 = dormandPrince853Integrator9.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator9.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler13);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double20 = dormandPrince853Integrator19.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction21, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double26 = dormandPrince853Integrator19.getCurrentStepStart();
        java.lang.String str27 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator19.getStepHandler();
        double double29 = dormandPrince853Integrator19.getCurrentStepStart();
        double double30 = dormandPrince853Integrator19.getCurrentSignedStepsize();
        double double31 = dormandPrince853Integrator19.getCurrentStepStart();
        int int32 = dormandPrince853Integrator19.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction33, 0.2d, (double) (byte) -1, (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction43 = null;
        dormandPrince853Integrator42.addSwitchingFunction(switchingFunction43, (double) 10, (double) 'a', (int) (byte) 10);
        int int48 = dormandPrince853Integrator42.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler49);
        dormandPrince853Integrator4.setStepHandler(stepHandler49);
        double double52 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test12724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12724");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test12725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12725");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray6);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) derivativeException12);
        java.lang.Throwable[] throwableArray14 = derivativeException12.getSuppressed();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test12726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12726");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 0);
        double[] doubleArray21 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray24 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray21, doubleArray24);
        java.lang.String str26 = dormandPrince853Integrator25.getName();
        dormandPrince853Integrator25.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        stepHandler29.reset();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
    }

    @Test
    public void test12727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12727");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean3 = switchingFunctionsHandler2.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler5 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        boolean boolean7 = switchingFunctionsHandler5.evaluateStep(stepInterpolator6);
        double[] doubleArray17 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray20 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray17, doubleArray20);
        switchingFunctionsHandler5.stepAccepted(100.0d, doubleArray17);
        switchingFunctionsHandler2.stepAccepted((double) (short) 10, doubleArray17);
        boolean boolean24 = switchingFunctionsHandler2.isEmpty();
        boolean boolean25 = switchingFunctionsHandler2.isEmpty();
        double[] doubleArray34 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray43 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray46 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray43, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray34, doubleArray43);
        boolean boolean49 = switchingFunctionsHandler2.reset((double) (short) 0, doubleArray34);
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        double[] doubleArray77 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray86 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray89 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray86, doubleArray89);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray77, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray55, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1L), doubleArray34, doubleArray55);
        java.lang.String str94 = dormandPrince853Integrator93.getName();
        dormandPrince853Integrator93.setMinReduction((double) 100L);
        double double97 = dormandPrince853Integrator93.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str94, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test12728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12728");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxGrowth();
        double double32 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str33 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction34, 0.9486832980505138d, (double) '#', (-1));
        dormandPrince853Integrator4.setSafety(2.1355799447448818d);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12729");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator18 = null;
        stepHandler17.handleStep(stepInterpolator18, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        stepHandler17.handleStep(stepInterpolator21, true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test12730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12730");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray6);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray13, throwable14);
        java.io.IOException iOException16 = new java.io.IOException("hi!", (java.lang.Throwable) mathException15);
        java.io.IOException iOException17 = new java.io.IOException("hi!", (java.lang.Throwable) iOException16);
        java.io.IOException iOException19 = new java.io.IOException("");
        iOException16.addSuppressed((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6, (java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: java.io.IOException", (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException21);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test12731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12731");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        boolean boolean42 = switchingFunctionsHandler0.reset((double) 100, doubleArray36);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction43 = null;
        switchingFunctionsHandler0.add(switchingFunction43, 0.0d, (double) 1.0f, 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        switchingFunctionsHandler0.add(switchingFunction48, 3.0d, (double) (short) -1, 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        switchingFunctionsHandler0.add(switchingFunction53, (double) (-1), 35.0d, 2);
        double[] doubleArray59 = null;
        boolean boolean60 = switchingFunctionsHandler0.reset((double) (byte) 10, doubleArray59);
        boolean boolean61 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test12732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12732");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(14.142135623730951d, (double) '#', 5.885661912765424d, 6.5147610572485615d);
    }

    @Test
    public void test12733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12733");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray6);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray21, throwable22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray16, (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("java.io.IOException", objArray10, (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.Throwable[] throwableArray29 = mathException27.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray29);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException30);
        java.lang.String str33 = mathException30.getPattern();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)" + "'", str33, "org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12734");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double double19 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean22 = switchingFunctionsHandler21.stop();
        double double23 = switchingFunctionsHandler21.getEventTime();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        switchingFunctionsHandler21.stepAccepted(0.2d, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.reset((double) '4', doubleArray28);
        boolean boolean45 = switchingFunctionsHandler0.stop();
        boolean boolean46 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator47 = null;
        boolean boolean48 = switchingFunctionsHandler0.evaluateStep(stepInterpolator47);
        boolean boolean49 = switchingFunctionsHandler0.stop();
        boolean boolean50 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test12735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12735");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("", strArray3);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException7);
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: hi!", strArray15);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", strArray15);
        derivativeException7.addSuppressed((java.lang.Throwable) derivativeException20);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test12736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12736");
        java.io.IOException iOException2 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!");
        java.io.IOException iOException3 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException2);
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException2);
    }

    @Test
    public void test12737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12737");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray5);
        java.lang.Object[] objArray11 = integratorException10.getArguments();
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) integratorException10);
        java.lang.Object[] objArray13 = integratorException10.getArguments();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test12738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12738");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) '4', 100.0d, (double) 10.0f);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth(4.161791450287817d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 7.211102550927978d + "'", double5 == 7.211102550927978d);
    }

    @Test
    public void test12739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12739");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.ode.IntegratorException integratorException8 = new org.apache.commons.math.ode.IntegratorException(throwable6);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) integratorException8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) integratorException8);
        java.io.IOException iOException11 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException8);
        java.lang.Throwable[] throwableArray12 = integratorException8.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray12);
        java.lang.Object[] objArray14 = integratorException13.getArguments();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray14);
        java.io.IOException iOException16 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException15);
        java.lang.String str18 = derivativeException17.toString();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: " + "'", str18, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test12740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12740");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator12.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction20, (double) 'a', (double) 0.0f, (int) (short) 10);
        double double25 = dormandPrince853Integrator12.getMaxGrowth();
        dormandPrince853Integrator12.setMinReduction(8.0d);
        java.lang.String str28 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator12.getStepHandler();
        int int30 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
    }

    @Test
    public void test12741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12741");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray6);
        java.lang.Object[] objArray11 = mathException10.getArguments();
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("", strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", strArray17);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", objArray11, (java.lang.Throwable) derivativeException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test12742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12742");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5.916079783099616d + "'", double31 == 5.916079783099616d);
    }

    @Test
    public void test12743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12743");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray11, throwable12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException13);
        java.lang.String str15 = mathException14.getPattern();
        java.lang.Object[] objArray16 = mathException14.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException17 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray16);
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("", objArray16);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) integratorException18);
        mathException7.addSuppressed((java.lang.Throwable) integratorException18);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException18);
        java.io.IOException iOException22 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) derivativeException21);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) derivativeException21);
        java.lang.Class<?> wildcardClass24 = derivativeException21.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test12744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12744");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test12745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12745");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException(throwable2);
        org.apache.commons.math.ode.IntegratorException integratorException4 = new org.apache.commons.math.ode.IntegratorException(throwable2);
        java.lang.Object[] objArray5 = integratorException4.getArguments();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray5);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray18, throwable19);
        java.io.IOException iOException21 = new java.io.IOException("hi!", (java.lang.Throwable) mathException20);
        java.lang.String str22 = mathException20.getPattern();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", objArray5, (java.lang.Throwable) mathException27);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException28);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test12746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12746");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        boolean boolean9 = stepHandler8.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        stepHandler8.handleStep(stepInterpolator10, true);
        boolean boolean13 = stepHandler8.requiresDenseOutput();
        boolean boolean14 = stepHandler8.requiresDenseOutput();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12747");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (short) 0, (-1.0d), 1);
        boolean boolean26 = switchingFunctionsHandler0.isEmpty();
        boolean boolean27 = switchingFunctionsHandler0.isEmpty();
        boolean boolean28 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler32 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean33 = switchingFunctionsHandler32.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler35 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator36 = null;
        boolean boolean37 = switchingFunctionsHandler35.evaluateStep(stepInterpolator36);
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        switchingFunctionsHandler35.stepAccepted(100.0d, doubleArray47);
        switchingFunctionsHandler32.stepAccepted((double) (short) 10, doubleArray47);
        double[] doubleArray54 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 7.211102550927978d, doubleArray47, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(13.92838827718412d, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
    }

    @Test
    public void test12748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12748");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException19.getPattern();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException19);
        java.io.IOException iOException23 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException19);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray8);
        java.io.IOException iOException28 = new java.io.IOException("org.apache.commons.math.MathException: hi!");
        java.lang.Throwable[] throwableArray29 = iOException28.getSuppressed();
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8, (java.lang.Throwable) iOException30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.ode.IntegratorException integratorException34 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: java.io.IOException: ", (java.lang.Object[]) throwableArray32);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test12749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12749");
        java.io.IOException iOException1 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test12750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12750");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setSafety((double) 1);
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12751");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator17.getStepHandler();
        double double24 = dormandPrince853Integrator17.getMaxStep();
        double double25 = dormandPrince853Integrator17.getCurrentStepStart();
        dormandPrince853Integrator17.setMinReduction((-1.0d));
        java.lang.String str28 = dormandPrince853Integrator17.getName();
        dormandPrince853Integrator17.setInitialStepSize((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12752");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        java.lang.String str10 = mathException9.getPattern();
        java.lang.Object[] objArray11 = mathException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("", objArray11);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) integratorException13);
        java.lang.Object[] objArray15 = integratorException13.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("", objArray15);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray27);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray27);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray38);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray38);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray45, throwable46);
        java.io.IOException iOException48 = new java.io.IOException("hi!", (java.lang.Throwable) mathException47);
        java.io.IOException iOException49 = new java.io.IOException("hi!", (java.lang.Throwable) iOException48);
        java.io.IOException iOException51 = new java.io.IOException("");
        iOException48.addSuppressed((java.lang.Throwable) iOException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray38, (java.lang.Throwable) iOException51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray27, (java.lang.Throwable) mathException53);
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray27);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray15, (java.lang.Throwable) derivativeException57);
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Object[]) throwableArray60);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test12753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12753");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (-1.0d), (double) (-1), (double) 100);
        dormandPrince853Integrator4.setMinReduction((double) 1L);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12754");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double13 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator18.addSwitchingFunction(switchingFunction19, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator18.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        stepHandler26.handleStep(stepInterpolator27, false);
        dormandPrince853Integrator12.setStepHandler(stepHandler26);
        dormandPrince853Integrator4.setStepHandler(stepHandler26);
        java.lang.Class<?> wildcardClass32 = stepHandler26.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test12755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12755");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        boolean boolean23 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        boolean boolean25 = switchingFunctionsHandler0.evaluateStep(stepInterpolator24);
        boolean boolean26 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, (double) 10L, 1.4142135623730951d, (int) '#');
        double double32 = switchingFunctionsHandler0.getEventTime();
        boolean boolean33 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12756");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.String str9 = mathException8.getPattern();
        java.lang.Object[] objArray10 = mathException8.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException8);
        java.io.IOException iOException12 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException8);
        java.io.IOException iOException14 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException8);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException19.getPattern();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        java.lang.String str22 = mathException19.getPattern();
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) mathException19);
        java.lang.Object[] objArray24 = mathException19.getArguments();
        mathException8.addSuppressed((java.lang.Throwable) mathException19);
        java.lang.String str26 = mathException8.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException8);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test12757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12757");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        double[] doubleArray7 = new double[] { Double.NaN };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray7, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(0.2d, doubleArray7);
        boolean boolean23 = switchingFunctionsHandler0.stop();
        boolean boolean24 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        switchingFunctionsHandler0.add(switchingFunction25, 1.7320508075688772d, 2.0d, 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12758");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        java.io.IOException iOException15 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10, (java.lang.Throwable) iOException15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        java.lang.Throwable[] throwableArray18 = derivativeException17.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException17);
        java.lang.Throwable[] throwableArray20 = integratorException19.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray20);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: java.io.IOException", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) mathException32);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray36);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray36);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: java.io.IOException", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) derivativeException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray20);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray49);
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray49);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray57, throwable58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        java.lang.String str61 = mathException60.getPattern();
        java.lang.Object[] objArray62 = mathException60.getArguments();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException60);
        java.io.IOException iOException64 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException60);
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray49);
        java.io.IOException iOException69 = new java.io.IOException("org.apache.commons.math.MathException: hi!");
        java.lang.Throwable[] throwableArray70 = iOException69.getSuppressed();
        java.io.IOException iOException71 = new java.io.IOException((java.lang.Throwable) iOException69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray49, (java.lang.Throwable) iOException71);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!");
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException76);
        java.io.IOException iOException79 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!");
        mathException77.addSuppressed((java.lang.Throwable) iOException79);
        org.apache.commons.math.ode.IntegratorException integratorException81 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray73, (java.lang.Throwable) integratorException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) mathException82);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test12759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12759");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator17.getStepHandler();
        java.lang.String str20 = dormandPrince853Integrator17.getName();
        double double21 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction22, 13.92838827718412d, (double) 2, 0);
        double double27 = dormandPrince853Integrator17.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator17.getStepHandler();
        double double29 = dormandPrince853Integrator17.getMinReduction();
        java.lang.String str30 = dormandPrince853Integrator17.getName();
        double double31 = dormandPrince853Integrator17.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.2d + "'", double31 == 0.2d);
    }

    @Test
    public void test12760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12760");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray7, throwable8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.String str11 = mathException10.getPattern();
        java.lang.Object[] objArray12 = mathException10.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray12);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("", objArray12);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException19.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray12, (java.lang.Throwable) derivativeException21);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray12);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray30);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("", strArray30);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray30);
        java.io.IOException iOException35 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray30, (java.lang.Throwable) iOException35);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException("", strArray30);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray30);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray12, (java.lang.Throwable) mathException38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException", (java.lang.Throwable) integratorException40);
        java.lang.String str42 = integratorException40.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException40);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException40);
        java.lang.Throwable[] throwableArray45 = integratorException40.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test12761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12761");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray7, throwable8);
        java.io.IOException iOException10 = new java.io.IOException("hi!", (java.lang.Throwable) mathException9);
        java.lang.String str11 = mathException9.getPattern();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray13);
        java.io.IOException iOException18 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)");
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) iOException18);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test12762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12762");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        int int21 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test12763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12763");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double21 = dormandPrince853Integrator20.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction22, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double27 = dormandPrince853Integrator20.getSafety();
        double double28 = dormandPrince853Integrator20.getMaxGrowth();
        dormandPrince853Integrator20.setInitialStepSize((double) '#');
        double double31 = dormandPrince853Integrator20.getCurrentStepStart();
        double double32 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler33);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction35, 52.0d, 42.661458015403085d, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.9d + "'", double27 == 0.9d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler33);
    }

    @Test
    public void test12764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12764");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        double double1 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction2 = null;
        switchingFunctionsHandler0.add(switchingFunction2, (double) 1, 35.0d, (int) (byte) 10);
        boolean boolean7 = switchingFunctionsHandler0.stop();
        boolean boolean8 = switchingFunctionsHandler0.stop();
        boolean boolean9 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler13 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean14 = switchingFunctionsHandler13.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler16 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        boolean boolean18 = switchingFunctionsHandler16.evaluateStep(stepInterpolator17);
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        switchingFunctionsHandler16.stepAccepted(100.0d, doubleArray28);
        switchingFunctionsHandler13.stepAccepted((double) (short) 10, doubleArray28);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean37 = switchingFunctionsHandler36.stop();
        double double38 = switchingFunctionsHandler36.getEventTime();
        double[] doubleArray43 = new double[] { Double.NaN };
        double[] doubleArray52 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray55 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray52, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray43, doubleArray52);
        switchingFunctionsHandler36.stepAccepted(0.2d, doubleArray43);
        boolean boolean59 = switchingFunctionsHandler13.reset((double) (byte) -1, doubleArray43);
        double[] doubleArray67 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray76 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray79 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray76, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray67, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (-1L), doubleArray43, doubleArray76);
        boolean boolean83 = switchingFunctionsHandler0.reset(2.2493653007613963d, doubleArray76);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test12765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12765");
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        double[] doubleArray20 = new double[] { Double.NaN };
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray20, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (short) 10, doubleArray12, doubleArray20);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler38 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean39 = switchingFunctionsHandler38.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler41 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator42 = null;
        boolean boolean43 = switchingFunctionsHandler41.evaluateStep(stepInterpolator42);
        double[] doubleArray53 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray56 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray53, doubleArray56);
        switchingFunctionsHandler41.stepAccepted(100.0d, doubleArray53);
        switchingFunctionsHandler38.stepAccepted((double) (short) 10, doubleArray53);
        double[] doubleArray60 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 7.211102550927978d, doubleArray53, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.4997884186649117d, 18.708286933869708d, doubleArray12, doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.9, 0.0]");
    }

    @Test
    public void test12766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12766");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) 100, 1.0d, (double) '#');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
    }

    @Test
    public void test12767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12767");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) (-1L), (double) (byte) 10, 0.2d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        java.lang.Class<?> wildcardClass8 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test12768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12768");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray5);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        java.io.IOException iOException17 = new java.io.IOException("hi!", (java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) iOException17);
        java.lang.Throwable[] throwableArray21 = iOException17.getSuppressed();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test12769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12769");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        boolean boolean4 = switchingFunctionsHandler0.isEmpty();
        double double5 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        switchingFunctionsHandler0.add(switchingFunction6, (double) (byte) 1, (double) 0, 0);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler12 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean13 = switchingFunctionsHandler12.stop();
        double double14 = switchingFunctionsHandler12.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler16 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        boolean boolean18 = switchingFunctionsHandler16.evaluateStep(stepInterpolator17);
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        switchingFunctionsHandler16.stepAccepted(100.0d, doubleArray28);
        switchingFunctionsHandler12.stepAccepted(10.0d, doubleArray28);
        boolean boolean35 = switchingFunctionsHandler0.reset(4.47213595499958d, doubleArray28);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler37 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler39 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        boolean boolean41 = switchingFunctionsHandler39.evaluateStep(stepInterpolator40);
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        switchingFunctionsHandler39.stepAccepted(100.0d, doubleArray51);
        switchingFunctionsHandler37.stepAccepted((double) (short) 1, doubleArray51);
        double[] doubleArray66 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray75 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray78 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray75, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray66, doubleArray75);
        boolean boolean81 = switchingFunctionsHandler37.reset((double) (-1L), doubleArray66);
        boolean boolean82 = switchingFunctionsHandler0.reset((double) (-1.0f), doubleArray66);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test12770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12770");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator4.getStepHandler();
        double double33 = dormandPrince853Integrator4.getSafety();
        double double34 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((-0.0d));
        double double37 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler38);
    }

    @Test
    public void test12771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12771");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        double double11 = dormandPrince853Integrator9.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator9.setStepHandler(stepHandler24);
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double31 = dormandPrince853Integrator4.getMaxStep();
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        java.lang.String str45 = dormandPrince853Integrator44.getName();
        dormandPrince853Integrator44.setSafety((double) 0L);
        dormandPrince853Integrator44.setMaxGrowth((double) 'a');
        int int50 = dormandPrince853Integrator44.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction51, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator44.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction63, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator62.setMinReduction(100.0d);
        double double70 = dormandPrince853Integrator62.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction71 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction71, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler76 = dormandPrince853Integrator62.getStepHandler();
        java.lang.String str77 = dormandPrince853Integrator62.getName();
        org.apache.commons.math.ode.StepHandler stepHandler78 = dormandPrince853Integrator62.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler78);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator80 = null;
        stepHandler78.handleStep(stepInterpolator80, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator83 = null;
        stepHandler78.handleStep(stepInterpolator83, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler78);
        stepHandler78.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator88 = null;
        stepHandler78.handleStep(stepInterpolator88, true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler78);
    }

    @Test
    public void test12772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12772");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, (double) 0.0f, (double) 10L, (int) (short) 100);
        boolean boolean28 = switchingFunctionsHandler0.stop();
        boolean boolean29 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = switchingFunctionsHandler0.evaluateStep(stepInterpolator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test12773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12773");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler6 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        boolean boolean8 = switchingFunctionsHandler6.evaluateStep(stepInterpolator7);
        double[] doubleArray18 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray21 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray18, doubleArray21);
        switchingFunctionsHandler6.stepAccepted(100.0d, doubleArray18);
        switchingFunctionsHandler4.stepAccepted((double) (short) 1, doubleArray18);
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray18, doubleArray28);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler44 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean45 = switchingFunctionsHandler44.stop();
        double double46 = switchingFunctionsHandler44.getEventTime();
        double[] doubleArray51 = new double[] { Double.NaN };
        double[] doubleArray60 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray63 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray60, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray51, doubleArray60);
        switchingFunctionsHandler44.stepAccepted(0.2d, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) -1, doubleArray18, doubleArray51);
        int int68 = dormandPrince853Integrator67.getOrder();
        double double69 = dormandPrince853Integrator67.getCurrentSignedStepsize();
        dormandPrince853Integrator67.setSafety(3.430936289925951d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction72 = null;
        dormandPrince853Integrator67.addSwitchingFunction(switchingFunction72, (double) 1, 4.0d, (int) (short) -1);
        org.apache.commons.math.ode.StepHandler stepHandler77 = dormandPrince853Integrator67.getStepHandler();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-0.0d) + "'", double69 == (-0.0d));
        org.junit.Assert.assertNotNull(stepHandler77);
    }

    @Test
    public void test12774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12774");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ");
        java.io.IOException iOException3 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException2);
    }

    @Test
    public void test12775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12775");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8);
        java.io.IOException iOException13 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8, (java.lang.Throwable) iOException13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray8);
        java.lang.Throwable[] throwableArray18 = derivativeException17.getSuppressed();
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) derivativeException17);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("", strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25);
        org.apache.commons.math.ode.IntegratorException integratorException29 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray25);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray32, throwable33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException34);
        java.lang.Object[] objArray36 = mathException34.getArguments();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray36, (java.lang.Throwable) mathException39);
        java.lang.String str41 = mathException40.getPattern();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray25, (java.lang.Throwable) mathException40);
        derivativeException17.addSuppressed((java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray44 = mathException40.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException45 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray44);
        org.apache.commons.math.ode.IntegratorException integratorException46 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException45);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str41, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test12776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12776");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety(7.211102550927978d);
        java.lang.Class<?> wildcardClass19 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test12777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12777");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.732075599071396d, 5.477225575051661d, 17.320508075688775d, 0.2d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.521218853280617d + "'", double5 == 4.521218853280617d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12778");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 1L, (double) (byte) -1, (double) 2);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test12779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12779");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray7);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        java.io.IOException iOException17 = new java.io.IOException("hi!", (java.lang.Throwable) mathException16);
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) iOException17);
        java.io.IOException iOException20 = new java.io.IOException("");
        iOException17.addSuppressed((java.lang.Throwable) iOException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7, (java.lang.Throwable) iOException20);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray27, throwable28);
        java.io.IOException iOException30 = new java.io.IOException("hi!", (java.lang.Throwable) mathException29);
        java.io.IOException iOException31 = new java.io.IOException("hi!", (java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException31);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray36, throwable37);
        java.io.IOException iOException39 = new java.io.IOException("hi!", (java.lang.Throwable) mathException38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException39);
        iOException31.addSuppressed((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray7, (java.lang.Throwable) mathException41);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", strArray7);
        java.lang.Throwable[] throwableArray46 = derivativeException45.getSuppressed();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test12780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12780");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        java.io.IOException iOException15 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10, (java.lang.Throwable) iOException15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException", strArray10);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) derivativeException20);
        java.io.IOException iOException22 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: java.io.IOException: org.apache.commons.math.MathException", (java.lang.Throwable) derivativeException20);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test12781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12781");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 1);
        double[] doubleArray20 = new double[] { Double.NaN };
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray20, doubleArray29);
        double[] doubleArray42 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray42, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray20, doubleArray42);
        org.apache.commons.math.ode.StepHandler stepHandler58 = dormandPrince853Integrator57.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator59 = null;
        stepHandler58.handleStep(stepInterpolator59, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler58);
        double double63 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler58);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.9d + "'", double63 == 0.9d);
    }

    @Test
    public void test12782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12782");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray6);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) derivativeException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) derivativeException12);
        java.lang.String str15 = derivativeException12.getPattern();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException" + "'", str15, "java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test12783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12783");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler2.stepAccepted((double) (short) 1, doubleArray16);
        double double23 = switchingFunctionsHandler2.getEventTime();
        double double24 = switchingFunctionsHandler2.getEventTime();
        double double25 = switchingFunctionsHandler2.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler27 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean28 = switchingFunctionsHandler27.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler30 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        boolean boolean32 = switchingFunctionsHandler30.evaluateStep(stepInterpolator31);
        double[] doubleArray42 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray45 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray42, doubleArray45);
        switchingFunctionsHandler30.stepAccepted(100.0d, doubleArray42);
        switchingFunctionsHandler27.stepAccepted((double) (short) 10, doubleArray42);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler50 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean51 = switchingFunctionsHandler50.stop();
        double double52 = switchingFunctionsHandler50.getEventTime();
        double[] doubleArray57 = new double[] { Double.NaN };
        double[] doubleArray66 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray69 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray66, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray57, doubleArray66);
        switchingFunctionsHandler50.stepAccepted(0.2d, doubleArray57);
        boolean boolean73 = switchingFunctionsHandler27.reset((double) (byte) -1, doubleArray57);
        switchingFunctionsHandler2.stepAccepted(8.0d, doubleArray57);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler75 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean76 = switchingFunctionsHandler75.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler78 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator79 = null;
        boolean boolean80 = switchingFunctionsHandler78.evaluateStep(stepInterpolator79);
        double[] doubleArray90 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray93 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray90, doubleArray93);
        switchingFunctionsHandler78.stepAccepted(100.0d, doubleArray90);
        switchingFunctionsHandler75.stepAccepted((double) (short) 10, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.6324555320336759d, (double) '#', doubleArray57, doubleArray90);
        dormandPrince853Integrator97.setMinReduction(4.161791450287817d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.9, 0.0]");
    }

    @Test
    public void test12784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12784");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("", strArray9);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        java.io.IOException iOException18 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray9, (java.lang.Throwable) mathException19);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray24, throwable25);
        java.io.IOException iOException27 = new java.io.IOException("hi!", (java.lang.Throwable) mathException26);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray9, (java.lang.Throwable) iOException27);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray9);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray35, throwable36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        java.lang.String str39 = mathException38.getPattern();
        java.lang.Object[] objArray40 = mathException38.getArguments();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException38);
        java.lang.String str42 = mathException38.getPattern();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray9, (java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray56);
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException("", strArray56);
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray56);
        java.io.IOException iOException61 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray56, (java.lang.Throwable) iOException61);
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException("", strArray56);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray56);
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray56);
        org.apache.commons.math.ode.IntegratorException integratorException66 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray56);
        org.apache.commons.math.ode.IntegratorException integratorException67 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray56);
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray56);
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray56);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray44, (java.lang.Throwable) derivativeException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", (java.lang.Throwable) mathException70);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test12785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12785");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double21 = dormandPrince853Integrator20.getMaxStep();
        java.lang.String str22 = dormandPrince853Integrator20.getName();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str26 = dormandPrince853Integrator4.getName();
        double double27 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (-1));
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
    }

    @Test
    public void test12786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12786");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray4);
        java.lang.Object[] objArray8 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray8);
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray19, throwable20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray14, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("java.io.IOException", objArray8, (java.lang.Throwable) mathException21);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) mathException21);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray29, throwable30);
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) mathException31);
        org.apache.commons.math.ode.IntegratorException integratorException33 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException32);
        java.lang.String str34 = integratorException33.getPattern();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException35);
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException38);
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray45);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray45);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray52, throwable53);
        java.io.IOException iOException55 = new java.io.IOException("hi!", (java.lang.Throwable) mathException54);
        java.io.IOException iOException56 = new java.io.IOException("hi!", (java.lang.Throwable) iOException55);
        java.io.IOException iOException58 = new java.io.IOException("");
        iOException55.addSuppressed((java.lang.Throwable) iOException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray45, (java.lang.Throwable) iOException58);
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray65, throwable66);
        java.io.IOException iOException68 = new java.io.IOException("hi!", (java.lang.Throwable) mathException67);
        java.io.IOException iOException69 = new java.io.IOException("hi!", (java.lang.Throwable) iOException68);
        java.io.IOException iOException70 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException69);
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray74, throwable75);
        java.io.IOException iOException77 = new java.io.IOException("hi!", (java.lang.Throwable) mathException76);
        org.apache.commons.math.ode.IntegratorException integratorException78 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException77);
        iOException69.addSuppressed((java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray45, (java.lang.Throwable) mathException79);
        java.lang.String str82 = mathException81.getPattern();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        integratorException39.addSuppressed((java.lang.Throwable) mathException83);
        iOException25.addSuppressed((java.lang.Throwable) integratorException39);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.math.MathException" + "'", str82, "org.apache.commons.math.MathException");
    }

    @Test
    public void test12787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12787");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        double double4 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler0.evaluateStep(stepInterpolator5);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler8 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean9 = switchingFunctionsHandler8.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        boolean boolean11 = switchingFunctionsHandler8.evaluateStep(stepInterpolator10);
        boolean boolean12 = switchingFunctionsHandler8.isEmpty();
        boolean boolean13 = switchingFunctionsHandler8.stop();
        double[] doubleArray25 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray28 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray25, doubleArray28);
        double[] doubleArray33 = new double[] { Double.NaN };
        double[] doubleArray42 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray45 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray42, doubleArray45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray33, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0.0f, doubleArray28, doubleArray33);
        switchingFunctionsHandler8.stepAccepted((double) 100L, doubleArray28);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        switchingFunctionsHandler8.add(switchingFunction50, (double) 100L, (double) (byte) -1, (int) (short) 1);
        boolean boolean55 = switchingFunctionsHandler8.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction56 = null;
        switchingFunctionsHandler8.add(switchingFunction56, 0.0d, 13.92838827718412d, (int) (byte) -1);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler62 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean63 = switchingFunctionsHandler62.stop();
        double double64 = switchingFunctionsHandler62.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction65 = null;
        switchingFunctionsHandler62.add(switchingFunction65, (double) (byte) 0, (double) 10.0f, 1);
        double double70 = switchingFunctionsHandler62.getEventTime();
        double[] doubleArray80 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray83 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray80, doubleArray83);
        boolean boolean85 = switchingFunctionsHandler62.reset(5.623413251903491d, doubleArray83);
        boolean boolean86 = switchingFunctionsHandler8.reset((-1.0d), doubleArray83);
        switchingFunctionsHandler0.stepAccepted(18.708286933869708d, doubleArray83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test12788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12788");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, 100.0d, (double) 100L, (double) '4');
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test12789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12789");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (-1.0d), (double) (-1), (int) '#');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 3);
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12790");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        stepHandler11.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        stepHandler11.handleStep(stepInterpolator13, true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
    }

    @Test
    public void test12791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12791");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        boolean boolean37 = switchingFunctionsHandler0.reset(100.0d, doubleArray22);
        double double38 = switchingFunctionsHandler0.getEventTime();
        boolean boolean39 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        boolean boolean41 = switchingFunctionsHandler0.evaluateStep(stepInterpolator40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        switchingFunctionsHandler0.add(switchingFunction42, (double) 1L, 2.0d, 100);
        double double47 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test12792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12792");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        boolean boolean33 = stepHandler29.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler29);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction35, (double) 0L, (double) (-1L), (int) (short) 100);
        int int40 = dormandPrince853Integrator12.getOrder();
        double double41 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double47 = dormandPrince853Integrator46.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator46.addSwitchingFunction(switchingFunction48, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double53 = dormandPrince853Integrator46.getCurrentStepStart();
        dormandPrince853Integrator46.setInitialStepSize((double) 0.0f);
        java.lang.String str56 = dormandPrince853Integrator46.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction57 = null;
        dormandPrince853Integrator46.addSwitchingFunction(switchingFunction57, Double.NaN, (double) 100.0f, (int) (byte) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction67 = null;
        dormandPrince853Integrator66.addSwitchingFunction(switchingFunction67, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator66.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator66.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator75 = null;
        stepHandler74.handleStep(stepInterpolator75, false);
        boolean boolean78 = stepHandler74.requiresDenseOutput();
        dormandPrince853Integrator46.setStepHandler(stepHandler74);
        boolean boolean80 = stepHandler74.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler74);
        java.lang.String str82 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction83 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction83, (double) 10L, 5.477225575051661d, (int) (short) 100);
        java.lang.Class<?> wildcardClass88 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9486832980505138d + "'", double41 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.9d + "'", double47 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str56, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test12793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12793");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        java.io.IOException iOException9 = new java.io.IOException("hi!", (java.lang.Throwable) mathException8);
        java.io.IOException iOException10 = new java.io.IOException("hi!", (java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException10);
        java.lang.Throwable[] throwableArray12 = iOException11.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException11);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException19);
        derivativeException13.addSuppressed((java.lang.Throwable) derivativeException20);
        java.lang.Object[] objArray22 = derivativeException20.getArguments();
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray22, throwable23);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray29, throwable30);
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) mathException31);
        java.io.IOException iOException33 = new java.io.IOException("hi!", (java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException33);
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        java.lang.Throwable throwable39 = null;
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray38, throwable39);
        java.io.IOException iOException41 = new java.io.IOException("hi!", (java.lang.Throwable) mathException40);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException41);
        iOException33.addSuppressed((java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray22, (java.lang.Throwable) iOException33);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray48, throwable49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException50);
        java.lang.String str52 = mathException51.getPattern();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException51);
        java.lang.Object[] objArray54 = mathException53.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException53);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", throwable60);
        java.lang.Throwable[] throwableArray62 = mathException61.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray62);
        org.apache.commons.math.ode.IntegratorException integratorException64 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException63);
        java.lang.Object[] objArray65 = integratorException64.getArguments();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", objArray65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException66);
        mathException53.addSuppressed((java.lang.Throwable) mathException66);
        java.lang.Object[] objArray69 = mathException66.getArguments();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: hi!", objArray69);
        iOException33.addSuppressed((java.lang.Throwable) mathException70);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
    }

    @Test
    public void test12794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12794");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        dormandPrince853Integrator12.setSafety((double) (-1.0f));
        double double18 = dormandPrince853Integrator12.getSafety();
        java.lang.String str19 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator12.getStepHandler();
        stepHandler20.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator22 = null;
        stepHandler20.handleStep(stepInterpolator22, true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler20);
    }

    @Test
    public void test12795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12795");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(17.320508075688775d, 1.4142135623730951d, 13.92838827718412d, (double) (short) -1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test12796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12796");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (-1.0f));
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double17 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction18, (double) 3, 100.0d, 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test12797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12797");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("java.io.IOException");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException", strArray5);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        mathException1.addSuppressed((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException8);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException11);
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test12798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12798");
        double[] doubleArray5 = new double[] { Double.NaN };
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray5, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler22 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        switchingFunctionsHandler22.stepAccepted((double) (short) 1, doubleArray36);
        double[] doubleArray46 = new double[] { Double.NaN };
        double[] doubleArray55 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray58 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray55, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray46, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray36, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) '#', doubleArray14, doubleArray36);
        double double63 = dormandPrince853Integrator62.getCurrentStepStart();
        dormandPrince853Integrator62.setMinReduction((double) 100L);
        double double66 = dormandPrince853Integrator62.getSafety();
        dormandPrince853Integrator62.setMaxGrowth(0.0d);
        double double69 = dormandPrince853Integrator62.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction75 = null;
        dormandPrince853Integrator74.addSwitchingFunction(switchingFunction75, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator74.setMinReduction(100.0d);
        double double82 = dormandPrince853Integrator74.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction83 = null;
        dormandPrince853Integrator74.addSwitchingFunction(switchingFunction83, (double) 3, (double) (-1L), (int) (byte) -1);
        double double88 = dormandPrince853Integrator74.getCurrentSignedStepsize();
        dormandPrince853Integrator74.setMaxGrowth(0.0d);
        dormandPrince853Integrator74.setMinReduction(5.916079783099616d);
        org.apache.commons.math.ode.StepHandler stepHandler93 = dormandPrince853Integrator74.getStepHandler();
        dormandPrince853Integrator62.setStepHandler(stepHandler93);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.9d + "'", double66 == 0.9d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.9d + "'", double69 == 0.9d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler93);
    }

    @Test
    public void test12799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12799");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        boolean boolean12 = switchingFunctionsHandler10.evaluateStep(stepInterpolator11);
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        switchingFunctionsHandler10.stepAccepted(100.0d, doubleArray22);
        double[] doubleArray32 = new double[] { Double.NaN };
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray32, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler10.reset(100.0d, doubleArray32);
        boolean boolean48 = switchingFunctionsHandler0.reset((double) (-1), doubleArray32);
        boolean boolean49 = switchingFunctionsHandler0.isEmpty();
        double double50 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test12800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12800");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test12801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12801");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        boolean boolean4 = switchingFunctionsHandler0.isEmpty();
        double double5 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        switchingFunctionsHandler0.add(switchingFunction6, (double) 0L, 0.0d, 1);
        boolean boolean11 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12802");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        int int19 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, (double) (-1L), (double) (byte) 1, (int) (short) 1);
        double double25 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) 10);
        double double28 = dormandPrince853Integrator4.getSafety();
        double double29 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator4.getStepHandler();
        stepHandler30.reset();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(stepHandler30);
    }

    @Test
    public void test12803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12803");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        int int7 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(1.4997884186649117d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test12804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12804");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator17.getStepHandler();
        double double20 = dormandPrince853Integrator17.getMaxGrowth();
        double double21 = dormandPrince853Integrator17.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double27 = dormandPrince853Integrator26.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction28, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double33 = dormandPrince853Integrator26.getCurrentStepStart();
        double double34 = dormandPrince853Integrator26.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator17.setStepHandler(stepHandler35);
        double double37 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double43 = dormandPrince853Integrator42.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator42.addSwitchingFunction(switchingFunction44, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double49 = dormandPrince853Integrator42.getCurrentStepStart();
        java.lang.String str50 = dormandPrince853Integrator42.getName();
        java.lang.String str51 = dormandPrince853Integrator42.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator42.addSwitchingFunction(switchingFunction52, (double) ' ', (double) (short) 0, (int) '#');
        double double57 = dormandPrince853Integrator42.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator42.addSwitchingFunction(switchingFunction58, 1.0d, (double) 2, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler63 = dormandPrince853Integrator42.getStepHandler();
        boolean boolean64 = stepHandler63.requiresDenseOutput();
        dormandPrince853Integrator17.setStepHandler(stepHandler63);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction66 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction66, 0.0d, (-0.0d), (int) (byte) -1);
        java.lang.String str71 = dormandPrince853Integrator17.getName();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.9d + "'", double27 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9d + "'", double43 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(stepHandler63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str71, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12805");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.String str8 = mathException7.getPattern();
        java.lang.Object[] objArray9 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException7);
        java.io.IOException iOException11 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray12 = mathException7.getSuppressed();
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        java.lang.String str18 = mathException17.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException17);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) iOException20);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray23);
        iOException20.addSuppressed((java.lang.Throwable) derivativeException24);
        java.lang.Throwable[] throwableArray26 = iOException20.getSuppressed();
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray32);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException36);
        java.io.IOException iOException38 = new java.io.IOException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException37);
        java.lang.String[] strArray44 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray44);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray44);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray44);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) derivativeException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        org.apache.commons.math.ode.IntegratorException integratorException51 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException49);
        java.lang.String[] strArray54 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException", strArray54);
        org.apache.commons.math.ode.DerivativeException derivativeException56 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", strArray54);
        integratorException51.addSuppressed((java.lang.Throwable) derivativeException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException56);
        java.lang.String str59 = mathException58.getPattern();
        iOException38.addSuppressed((java.lang.Throwable) mathException58);
        iOException20.addSuppressed((java.lang.Throwable) iOException38);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException38);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!" + "'", str59, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test12806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12806");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.Object[] objArray6 = mathException4.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray6, (java.lang.Throwable) mathException9);
        java.lang.String str11 = mathException9.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str11, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test12807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12807");
        java.io.IOException iOException6 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException");
        java.io.IOException iOException7 = new java.io.IOException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = derivativeException8.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", "org.apache.commons.math.ode.DerivativeException: " };
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) derivativeException15);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", strArray26);
        java.lang.Throwable[] throwableArray36 = derivativeException35.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) derivativeException35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        java.io.IOException iOException39 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException", (java.lang.Throwable) mathException38);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    @Test
    public void test12808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12808");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize(0.6324555320336759d);
        double double26 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double27 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test12809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12809");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        java.io.IOException iOException9 = new java.io.IOException("hi!", (java.lang.Throwable) mathException8);
        java.lang.Throwable[] throwableArray10 = iOException9.getSuppressed();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double17 = dormandPrince853Integrator16.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction18, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double23 = dormandPrince853Integrator16.getSafety();
        double double24 = dormandPrince853Integrator16.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator29.addSwitchingFunction(switchingFunction30, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator29.setMinReduction(100.0d);
        double double37 = dormandPrince853Integrator29.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double43 = dormandPrince853Integrator42.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator42.addSwitchingFunction(switchingFunction44, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double49 = dormandPrince853Integrator42.getCurrentStepStart();
        dormandPrince853Integrator42.setInitialStepSize((double) 0.0f);
        java.lang.String str52 = dormandPrince853Integrator42.getName();
        java.io.IOException iOException54 = new java.io.IOException("hi!");
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray57, throwable58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        java.lang.String str61 = mathException60.getPattern();
        java.lang.Object[] objArray62 = mathException60.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException63 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray62);
        double[] doubleArray72 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray75 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray72, doubleArray75);
        java.lang.String str77 = dormandPrince853Integrator76.getName();
        dormandPrince853Integrator76.setMinReduction(0.9d);
        java.lang.String str80 = dormandPrince853Integrator76.getName();
        java.lang.Object[] objArray81 = new java.lang.Object[] { double24, double37, dormandPrince853Integrator42, "hi!", objArray62, dormandPrince853Integrator76 };
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray83, throwable84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray62, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) mathException87);
        org.apache.commons.math.ode.IntegratorException integratorException89 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.ode.IntegratorException integratorException90 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) integratorException90);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9d + "'", double43 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str52, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str80, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
    }

    @Test
    public void test12810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12810");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, Double.NaN, 3.0d, (double) (-1));
        dormandPrince853Integrator4.setMinReduction(5.885661912765424d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, 14.142135623730951d, 1.0d, 35.0d);
        double double12 = dormandPrince853Integrator11.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        java.lang.String str26 = dormandPrince853Integrator17.getName();
        double double27 = dormandPrince853Integrator17.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double33 = dormandPrince853Integrator32.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator32.addSwitchingFunction(switchingFunction34, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double39 = dormandPrince853Integrator32.getCurrentStepStart();
        java.lang.String str40 = dormandPrince853Integrator32.getName();
        org.apache.commons.math.ode.StepHandler stepHandler41 = dormandPrince853Integrator32.getStepHandler();
        dormandPrince853Integrator17.setStepHandler(stepHandler41);
        stepHandler41.reset();
        boolean boolean44 = stepHandler41.requiresDenseOutput();
        stepHandler41.reset();
        boolean boolean46 = stepHandler41.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator47 = null;
        stepHandler41.handleStep(stepInterpolator47, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler41);
        dormandPrince853Integrator4.setStepHandler(stepHandler41);
        boolean boolean52 = stepHandler41.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test12811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12811");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double double19 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean22 = switchingFunctionsHandler21.stop();
        double double23 = switchingFunctionsHandler21.getEventTime();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        switchingFunctionsHandler21.stepAccepted(0.2d, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.reset((double) '4', doubleArray28);
        double[] doubleArray54 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray57 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray54, doubleArray57);
        boolean boolean59 = switchingFunctionsHandler0.reset((double) (-1), doubleArray57);
        boolean boolean60 = switchingFunctionsHandler0.stop();
        boolean boolean61 = switchingFunctionsHandler0.stop();
        boolean boolean62 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test12812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12812");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        int int18 = dormandPrince853Integrator12.getOrder();
        dormandPrince853Integrator12.setInitialStepSize((double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator12.setMaxGrowth(17.88854381999832d);
        double double24 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9486832980505138d + "'", double17 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9486832980505138d + "'", double24 == 0.9486832980505138d);
    }

    @Test
    public void test12813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12813");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler24);
        stepHandler24.reset();
        stepHandler24.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        stepHandler24.handleStep(stepInterpolator28, false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler24);
    }

    @Test
    public void test12814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12814");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        double double1 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction2 = null;
        switchingFunctionsHandler0.add(switchingFunction2, (double) 1, 35.0d, (int) (byte) 10);
        boolean boolean7 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = switchingFunctionsHandler0.evaluateStep(stepInterpolator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test12815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12815");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 35.0d, 17.320508075688775d, (-0.0d));
        dormandPrince853Integrator4.setSafety((double) (byte) 1);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test12816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12816");
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator22 = null;
        boolean boolean23 = switchingFunctionsHandler21.evaluateStep(stepInterpolator22);
        double[] doubleArray33 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray36 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray33, doubleArray36);
        switchingFunctionsHandler21.stepAccepted(100.0d, doubleArray33);
        switchingFunctionsHandler19.stepAccepted((double) (short) 1, doubleArray33);
        double[] doubleArray43 = new double[] { Double.NaN };
        double[] doubleArray52 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray55 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray52, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray43, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray33, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, (double) (-1.0f), doubleArray12, doubleArray33);
        double[] doubleArray61 = new double[] { (-1.0d) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 3.760603093086394d, doubleArray12, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction68 = null;
        dormandPrince853Integrator67.addSwitchingFunction(switchingFunction68, (double) 10, (double) 'a', (int) (byte) 10);
        int int73 = dormandPrince853Integrator67.getOrder();
        double double74 = dormandPrince853Integrator67.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction80 = null;
        dormandPrince853Integrator79.addSwitchingFunction(switchingFunction80, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator79.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler87 = dormandPrince853Integrator79.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator88 = null;
        stepHandler87.handleStep(stepInterpolator88, false);
        stepHandler87.reset();
        dormandPrince853Integrator67.setStepHandler(stepHandler87);
        org.apache.commons.math.ode.StepHandler stepHandler93 = dormandPrince853Integrator67.getStepHandler();
        dormandPrince853Integrator62.setStepHandler(stepHandler93);
        double double95 = dormandPrince853Integrator62.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler87);
        org.junit.Assert.assertNotNull(stepHandler93);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test12817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12817");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) (-1), (double) 1.0f, (int) '#');
        dormandPrince853Integrator4.setInitialStepSize((-1.0d));
    }

    @Test
    public void test12818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12818");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        double double23 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        switchingFunctionsHandler0.add(switchingFunction24, (double) 0, 2.0d, (int) (byte) -1);
        boolean boolean29 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        switchingFunctionsHandler0.add(switchingFunction30, 17.320508075688775d, (double) 8, 100);
        boolean boolean35 = switchingFunctionsHandler0.isEmpty();
        boolean boolean36 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12819");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth(0.9486832980505138d);
        double[] doubleArray12 = new double[] { Double.NaN };
        double[] doubleArray21 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray24 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray21, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray12, doubleArray21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        double double34 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str35 = dormandPrince853Integrator4.getName();
        double double36 = dormandPrince853Integrator4.getMaxGrowth();
        double double37 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9486832980505138d + "'", double36 == 0.9486832980505138d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test12820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12820");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) '#', 0.2d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction19, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator10.getStepHandler();
        java.lang.String str25 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        stepHandler26.handleStep(stepInterpolator27, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler26.handleStep(stepInterpolator30, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler26);
        int int34 = dormandPrince853Integrator4.getOrder();
        double double35 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str36 = dormandPrince853Integrator4.getName();
        double double37 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double38 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test12821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12821");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (-1.0d), (double) (-1), (int) '#');
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction((double) 2);
        dormandPrince853Integrator4.setSafety(17.320508075688775d);
        int int20 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction21, 97.0d, 31.810829150682025d, (int) (short) 0);
        double double26 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test12822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12822");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int12 = dormandPrince853Integrator4.getOrder();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
    }

    @Test
    public void test12823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12823");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(5.916079783099616d);
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double20 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction21, (double) 'a', 4.161791450287817d, (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.916079783099616d + "'", double20 == 5.916079783099616d);
    }

    @Test
    public void test12824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12824");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        java.lang.String str30 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        int int33 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 0);
        double double36 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9d + "'", double36 == 0.9d);
    }

    @Test
    public void test12825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12825");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException(throwable1);
        java.lang.Throwable[] throwableArray3 = derivativeException2.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test12826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12826");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 1);
        int int15 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray19 = new double[] { Double.NaN };
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray19, doubleArray28);
        java.lang.String str34 = dormandPrince853Integrator33.getName();
        java.lang.String str35 = dormandPrince853Integrator33.getName();
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator33.getStepHandler();
        boolean boolean37 = stepHandler36.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler36);
        double double39 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test12827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12827");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, 2.2493653007613963d, 31.810829150682025d, 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test12828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12828");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray5);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray12, throwable13);
        java.io.IOException iOException15 = new java.io.IOException("hi!", (java.lang.Throwable) mathException14);
        java.io.IOException iOException16 = new java.io.IOException("hi!", (java.lang.Throwable) iOException15);
        java.io.IOException iOException18 = new java.io.IOException("");
        iOException15.addSuppressed((java.lang.Throwable) iOException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray5, (java.lang.Throwable) iOException18);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray25, throwable26);
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) mathException27);
        java.io.IOException iOException29 = new java.io.IOException("hi!", (java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException29);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray34, throwable35);
        java.io.IOException iOException37 = new java.io.IOException("hi!", (java.lang.Throwable) mathException36);
        org.apache.commons.math.ode.IntegratorException integratorException38 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException37);
        iOException29.addSuppressed((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException41);
        java.io.IOException iOException43 = new java.io.IOException((java.lang.Throwable) mathException42);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray49, throwable50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.Object[] objArray54 = mathException52.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray54);
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("", objArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException57);
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException57);
        mathException42.addSuppressed((java.lang.Throwable) mathException57);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray63, throwable64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.String str67 = mathException66.getPattern();
        java.lang.Object[] objArray68 = mathException66.getArguments();
        java.lang.String str69 = mathException66.getPattern();
        java.io.IOException iOException70 = new java.io.IOException((java.lang.Throwable) mathException66);
        java.io.IOException iOException71 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException70);
        java.io.IOException iOException72 = new java.io.IOException((java.lang.Throwable) iOException70);
        mathException42.addSuppressed((java.lang.Throwable) iOException70);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
    }

    @Test
    public void test12829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12829");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) mathException5);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException8);
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray15);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray22, throwable23);
        java.io.IOException iOException25 = new java.io.IOException("hi!", (java.lang.Throwable) mathException24);
        java.io.IOException iOException26 = new java.io.IOException("hi!", (java.lang.Throwable) iOException25);
        java.io.IOException iOException28 = new java.io.IOException("");
        iOException25.addSuppressed((java.lang.Throwable) iOException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray15, (java.lang.Throwable) iOException28);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray35, throwable36);
        java.io.IOException iOException38 = new java.io.IOException("hi!", (java.lang.Throwable) mathException37);
        java.io.IOException iOException39 = new java.io.IOException("hi!", (java.lang.Throwable) iOException38);
        java.io.IOException iOException40 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException39);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray44, throwable45);
        java.io.IOException iOException47 = new java.io.IOException("hi!", (java.lang.Throwable) mathException46);
        org.apache.commons.math.ode.IntegratorException integratorException48 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException47);
        iOException39.addSuppressed((java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException49);
        mathException9.addSuppressed((java.lang.Throwable) mathException51);
        java.io.IOException iOException53 = new java.io.IOException((java.lang.Throwable) mathException9);
        java.io.IOException iOException54 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException53);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
    }

    @Test
    public void test12830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12830");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.String str8 = mathException7.getPattern();
        java.lang.Object[] objArray9 = mathException7.getArguments();
        java.lang.String str10 = mathException7.getPattern();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray12 = mathException7.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray17, throwable18);
        java.io.IOException iOException20 = new java.io.IOException("hi!", (java.lang.Throwable) mathException19);
        java.io.IOException iOException21 = new java.io.IOException("hi!", (java.lang.Throwable) iOException20);
        integratorException13.addSuppressed((java.lang.Throwable) iOException20);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException20);
        java.lang.Throwable[] throwableArray24 = iOException20.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("java.io.IOException: ", (java.lang.Object[]) throwableArray24);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray38);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray38);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("", strArray38);
        java.io.IOException iOException50 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.MathException");
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) iOException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray38, (java.lang.Throwable) mathException52);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray57, throwable58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        java.lang.String str61 = mathException60.getPattern();
        java.lang.Object[] objArray62 = mathException60.getArguments();
        java.lang.String str63 = mathException60.getPattern();
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) mathException60);
        java.io.IOException iOException65 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException64);
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray68, throwable69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException70);
        java.lang.String str72 = mathException71.getPattern();
        java.lang.Object[] objArray73 = mathException71.getArguments();
        java.lang.String str74 = mathException71.getPattern();
        java.io.IOException iOException75 = new java.io.IOException((java.lang.Throwable) mathException71);
        java.io.IOException iOException76 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException75);
        iOException65.addSuppressed((java.lang.Throwable) iOException75);
        java.io.IOException iOException78 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException75);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray38, (java.lang.Throwable) iOException75);
        java.io.IOException iOException80 = new java.io.IOException("java.io.IOException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) iOException80);
        java.io.IOException iOException82 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException81);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
    }

    @Test
    public void test12831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12831");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        boolean boolean4 = switchingFunctionsHandler0.isEmpty();
        boolean boolean5 = switchingFunctionsHandler0.stop();
        boolean boolean6 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        boolean boolean8 = switchingFunctionsHandler0.evaluateStep(stepInterpolator7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12832");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double double19 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean22 = switchingFunctionsHandler21.stop();
        double double23 = switchingFunctionsHandler21.getEventTime();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        switchingFunctionsHandler21.stepAccepted(0.2d, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.reset((double) '4', doubleArray28);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler48 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler50 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        boolean boolean52 = switchingFunctionsHandler50.evaluateStep(stepInterpolator51);
        double[] doubleArray62 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray65 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray62, doubleArray65);
        switchingFunctionsHandler50.stepAccepted(100.0d, doubleArray62);
        switchingFunctionsHandler48.stepAccepted((double) (short) 1, doubleArray62);
        double[] doubleArray72 = new double[] { Double.NaN };
        double[] doubleArray81 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray84 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray81, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray72, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray62, doubleArray72);
        switchingFunctionsHandler0.stepAccepted((double) '#', doubleArray72);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator89 = null;
        boolean boolean90 = switchingFunctionsHandler0.evaluateStep(stepInterpolator89);
        boolean boolean91 = switchingFunctionsHandler0.stop();
        boolean boolean92 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction93 = null;
        switchingFunctionsHandler0.add(switchingFunction93, 3.1622776601683795d, 4.0d, (int) ' ');
        boolean boolean98 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12833");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, 31.810829150682025d, 7.952707287670506d, (int) (short) 100);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test12834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12834");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 1.0d, (double) 100.0f, (double) (-1.0f));
        dormandPrince853Integrator4.setSafety(0.9486832980505138d);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 100);
    }

    @Test
    public void test12835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12835");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        java.lang.String str20 = dormandPrince853Integrator4.getName();
        double double21 = dormandPrince853Integrator4.getMinReduction();
        int int22 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test12836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12836");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        double double16 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction18, 3.430936289925951d, 4.161791450287817d, 3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12837");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.6324555320336759d, 4.521218853280617d, (double) (-1), (double) 100.0f);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.521218853280617d + "'", double5 == 4.521218853280617d);
    }

    @Test
    public void test12838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12838");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10, 0.0d, (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double[] doubleArray23 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray26 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray23, doubleArray26);
        java.lang.String str28 = dormandPrince853Integrator27.getName();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        double double30 = dormandPrince853Integrator27.getCurrentSignedStepsize();
        double double31 = dormandPrince853Integrator27.getMinReduction();
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        java.lang.String str45 = dormandPrince853Integrator44.getName();
        dormandPrince853Integrator44.setMinReduction(0.9d);
        java.lang.String str48 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction54, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator53.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator53.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator62 = null;
        stepHandler61.handleStep(stepInterpolator62, false);
        boolean boolean65 = stepHandler61.requiresDenseOutput();
        dormandPrince853Integrator44.setStepHandler(stepHandler61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction72 = null;
        dormandPrince853Integrator71.addSwitchingFunction(switchingFunction72, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator71.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler79 = dormandPrince853Integrator71.getStepHandler();
        boolean boolean80 = stepHandler79.requiresDenseOutput();
        boolean boolean81 = stepHandler79.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator82 = null;
        stepHandler79.handleStep(stepInterpolator82, true);
        dormandPrince853Integrator44.setStepHandler(stepHandler79);
        dormandPrince853Integrator27.setStepHandler(stepHandler79);
        dormandPrince853Integrator4.setStepHandler(stepHandler79);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.9486832980505138d + "'", double30 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.2d + "'", double31 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(stepHandler79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test12839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12839");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", throwable4);
        java.lang.String str7 = mathException6.getPattern();
        java.lang.Object[] objArray8 = mathException6.getArguments();
        java.lang.String str9 = mathException6.getPattern();
        java.lang.Object[] objArray10 = mathException6.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: hi!", objArray10);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", throwable13);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", objArray10, (java.lang.Throwable) mathException14);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str7, "org.apache.commons.math.ode.DerivativeException: hi!");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str9, "org.apache.commons.math.ode.DerivativeException: hi!");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test12840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12840");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        int int19 = dormandPrince853Integrator4.getOrder();
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        double double21 = dormandPrince853Integrator4.getMaxGrowth();
        int int22 = dormandPrince853Integrator4.getOrder();
        java.lang.String str23 = dormandPrince853Integrator4.getName();
        double double24 = dormandPrince853Integrator4.getCurrentStepStart();
        double double25 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str26 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12841");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(4.47213595499958d, 3.430936289925951d, 55.3841974787333d, (double) (byte) -1);
    }

    @Test
    public void test12842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12842");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        double double18 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator17.getCurrentStepStart();
        double double20 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        int int21 = dormandPrince853Integrator17.getOrder();
        double double22 = dormandPrince853Integrator17.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test12843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12843");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler2.stepAccepted((double) (short) 1, doubleArray16);
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray16, doubleArray26);
        double double42 = dormandPrince853Integrator41.getSafety();
        double double43 = dormandPrince853Integrator41.getCurrentStepStart();
        double double44 = dormandPrince853Integrator41.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction45, (double) 10L, Double.NaN, (int) (byte) 10);
        double double50 = dormandPrince853Integrator41.getMaxStep();
        double double51 = dormandPrince853Integrator41.getSafety();
        dormandPrince853Integrator41.setMaxGrowth((double) ' ');
        double double54 = dormandPrince853Integrator41.getSafety();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9d + "'", double51 == 0.9d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9d + "'", double54 == 0.9d);
    }

    @Test
    public void test12844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12844");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 3, (double) 100L, (double) (short) 100, 0.2d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
    }

    @Test
    public void test12845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12845");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        dormandPrince853Integrator12.setSafety((double) (-1.0f));
        double double18 = dormandPrince853Integrator12.getSafety();
        double double19 = dormandPrince853Integrator12.getMinReduction();
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        java.lang.String str21 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12846");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) derivativeException10);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) mathException18);
        org.apache.commons.math.ode.IntegratorException integratorException20 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException21);
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray28);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray35, throwable36);
        java.io.IOException iOException38 = new java.io.IOException("hi!", (java.lang.Throwable) mathException37);
        java.io.IOException iOException39 = new java.io.IOException("hi!", (java.lang.Throwable) iOException38);
        java.io.IOException iOException41 = new java.io.IOException("");
        iOException38.addSuppressed((java.lang.Throwable) iOException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray28, (java.lang.Throwable) iOException41);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray48, throwable49);
        java.io.IOException iOException51 = new java.io.IOException("hi!", (java.lang.Throwable) mathException50);
        java.io.IOException iOException52 = new java.io.IOException("hi!", (java.lang.Throwable) iOException51);
        java.io.IOException iOException53 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException52);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray57, throwable58);
        java.io.IOException iOException60 = new java.io.IOException("hi!", (java.lang.Throwable) mathException59);
        org.apache.commons.math.ode.IntegratorException integratorException61 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException60);
        iOException52.addSuppressed((java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray28, (java.lang.Throwable) mathException62);
        mathException22.addSuppressed((java.lang.Throwable) mathException64);
        java.io.IOException iOException66 = new java.io.IOException((java.lang.Throwable) mathException22);
        java.lang.Throwable[] throwableArray67 = mathException22.getSuppressed();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray67);
        derivativeException10.addSuppressed((java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) derivativeException10);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException70);
        java.io.IOException iOException72 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException70);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test12847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12847");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
    }

    @Test
    public void test12848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12848");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler9 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        boolean boolean11 = switchingFunctionsHandler9.evaluateStep(stepInterpolator10);
        double[] doubleArray21 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray24 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray21, doubleArray24);
        switchingFunctionsHandler9.stepAccepted(100.0d, doubleArray21);
        boolean boolean27 = switchingFunctionsHandler9.isEmpty();
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        boolean boolean42 = switchingFunctionsHandler9.reset(10.0d, doubleArray40);
        double double43 = switchingFunctionsHandler9.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler45 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator46 = null;
        boolean boolean47 = switchingFunctionsHandler45.evaluateStep(stepInterpolator46);
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        switchingFunctionsHandler45.stepAccepted(100.0d, doubleArray57);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        switchingFunctionsHandler45.add(switchingFunction63, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean68 = switchingFunctionsHandler45.stop();
        double[] doubleArray73 = new double[] { Double.NaN };
        double[] doubleArray82 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray85 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray82, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray73, doubleArray82);
        boolean boolean88 = switchingFunctionsHandler45.reset((double) 1L, doubleArray73);
        switchingFunctionsHandler9.stepAccepted((double) 0, doubleArray73);
        boolean boolean90 = switchingFunctionsHandler0.reset((double) (-1.0f), doubleArray73);
        boolean boolean91 = switchingFunctionsHandler0.stop();
        double double92 = switchingFunctionsHandler0.getEventTime();
        boolean boolean93 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator94 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = switchingFunctionsHandler0.evaluateStep(stepInterpolator94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12849");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        boolean boolean33 = switchingFunctionsHandler0.reset(10.0d, doubleArray31);
        boolean boolean34 = switchingFunctionsHandler0.stop();
        double double35 = switchingFunctionsHandler0.getEventTime();
        double double36 = switchingFunctionsHandler0.getEventTime();
        boolean boolean37 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        boolean boolean39 = switchingFunctionsHandler0.evaluateStep(stepInterpolator38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test12850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12850");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator12.setInitialStepSize((double) (byte) 1);
        double double21 = dormandPrince853Integrator12.getMinReduction();
        java.lang.String str22 = dormandPrince853Integrator12.getName();
        double double23 = dormandPrince853Integrator12.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test12851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12851");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) '4');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12852");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray13, throwable14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        java.lang.String str17 = mathException16.getPattern();
        java.lang.Object[] objArray18 = mathException16.getArguments();
        java.lang.String str19 = mathException16.getPattern();
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) mathException16);
        java.lang.Object[] objArray21 = mathException16.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray21);
        java.lang.Object[] objArray23 = integratorException22.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException24 = new org.apache.commons.math.ode.IntegratorException("", objArray23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException");
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", objArray23, (java.lang.Throwable) mathException26);
        java.lang.String[] strArray32 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray32);
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray23, (java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException37);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) integratorException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", objArray3, (java.lang.Throwable) integratorException39);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException41);
        java.io.IOException iOException43 = new java.io.IOException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException41);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(strArray32);
    }

    @Test
    public void test12853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12853");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.stop();
        double double9 = switchingFunctionsHandler0.getEventTime();
        boolean boolean10 = switchingFunctionsHandler0.isEmpty();
        double double11 = switchingFunctionsHandler0.getEventTime();
        double double12 = switchingFunctionsHandler0.getEventTime();
        double double13 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        switchingFunctionsHandler0.add(switchingFunction14, (double) ' ', 31.622776601683793d, (int) (byte) 0);
        boolean boolean19 = switchingFunctionsHandler0.isEmpty();
        boolean boolean20 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12854");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray8);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) mathException17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException("");
        iOException18.addSuppressed((java.lang.Throwable) iOException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray8, (java.lang.Throwable) iOException21);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray28, throwable29);
        java.io.IOException iOException31 = new java.io.IOException("hi!", (java.lang.Throwable) mathException30);
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) iOException31);
        java.io.IOException iOException33 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray37, throwable38);
        java.io.IOException iOException40 = new java.io.IOException("hi!", (java.lang.Throwable) mathException39);
        org.apache.commons.math.ode.IntegratorException integratorException41 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException40);
        iOException32.addSuppressed((java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException42);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", strArray8);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray48, throwable49);
        org.apache.commons.math.ode.IntegratorException integratorException51 = new org.apache.commons.math.ode.IntegratorException(throwable49);
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) integratorException51);
        java.io.IOException iOException54 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException54);
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray58, throwable59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException60);
        java.io.IOException iOException62 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException62);
        mathException55.addSuppressed((java.lang.Throwable) mathException63);
        org.apache.commons.math.ode.IntegratorException integratorException65 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException63);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException63);
        iOException52.addSuppressed((java.lang.Throwable) derivativeException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException52);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException68);
        java.lang.Throwable[] throwableArray70 = mathException68.getSuppressed();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test12855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12855");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException(throwable2);
        java.lang.Throwable[] throwableArray4 = derivativeException3.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Throwable) integratorException5);
        org.apache.commons.math.ode.IntegratorException integratorException7 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException7);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test12856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12856");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth(3.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (short) 0, 0.0d, (double) (-1L));
        double double21 = dormandPrince853Integrator20.getMinReduction();
        java.lang.String str22 = dormandPrince853Integrator20.getName();
        int int23 = dormandPrince853Integrator20.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction29, (double) 10, (double) 'a', (int) (byte) 10);
        int int34 = dormandPrince853Integrator28.getOrder();
        dormandPrince853Integrator28.setMaxGrowth((double) 10L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction37, (double) 100.0f, 14.142135623730951d, (int) (short) 100);
        double double42 = dormandPrince853Integrator28.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator28.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler43);
        dormandPrince853Integrator4.setStepHandler(stepHandler43);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(stepHandler43);
    }

    @Test
    public void test12857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12857");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction34, 14.142135623730951d, 0.2d, (int) (short) 10);
        java.lang.String str39 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth(17.320508075688775d);
        java.lang.String str42 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str39, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str42, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12858");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction(31.810829150682025d);
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test12859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12859");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (short) 0, 0.0d, (double) (-1L));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        java.lang.String str19 = dormandPrince853Integrator18.getName();
        double[] doubleArray23 = new double[] { Double.NaN };
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray23, doubleArray32);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator18.setStepHandler(stepHandler38);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double46 = dormandPrince853Integrator45.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction47 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction47, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double52 = dormandPrince853Integrator45.getCurrentStepStart();
        java.lang.String str53 = dormandPrince853Integrator45.getName();
        java.lang.String str54 = dormandPrince853Integrator45.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction55 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction55, (double) ' ', (double) (short) 0, (int) '#');
        double double60 = dormandPrince853Integrator45.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction61, 1.0d, (double) 2, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler66 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator18.setStepHandler(stepHandler66);
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator69 = null;
        stepHandler68.handleStep(stepInterpolator69, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler68);
        java.lang.String str73 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double79 = dormandPrince853Integrator78.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction80 = null;
        dormandPrince853Integrator78.addSwitchingFunction(switchingFunction80, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double85 = dormandPrince853Integrator78.getCurrentStepStart();
        java.lang.String str86 = dormandPrince853Integrator78.getName();
        java.lang.String str87 = dormandPrince853Integrator78.getName();
        double double88 = dormandPrince853Integrator78.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler89 = dormandPrince853Integrator78.getStepHandler();
        boolean boolean90 = stepHandler89.requiresDenseOutput();
        boolean boolean91 = stepHandler89.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler89);
        boolean boolean93 = stepHandler89.requiresDenseOutput();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str53, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str54, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(stepHandler66);
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.9d + "'", double79 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str86, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str87, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(stepHandler89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12860");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12861");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 10.0f, (double) 10.0f, (double) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) 2);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction13, (double) 10, (double) 'a', (int) (byte) 10);
        int int18 = dormandPrince853Integrator12.getOrder();
        double double19 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double20 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        int int21 = dormandPrince853Integrator12.getOrder();
        double double22 = dormandPrince853Integrator12.getMinReduction();
        int int23 = dormandPrince853Integrator12.getOrder();
        int int24 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator29.addSwitchingFunction(switchingFunction30, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator29.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator29.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        stepHandler37.handleStep(stepInterpolator38, false);
        stepHandler37.reset();
        dormandPrince853Integrator12.setStepHandler(stepHandler37);
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        boolean boolean44 = stepHandler37.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator45 = null;
        stepHandler37.handleStep(stepInterpolator45, true);
        stepHandler37.reset();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.2d + "'", double22 == 0.2d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test12862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12862");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double7 = dormandPrince853Integrator6.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction8, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double13 = dormandPrince853Integrator6.getSafety();
        double double14 = dormandPrince853Integrator6.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction20, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator19.setMinReduction(100.0d);
        double double27 = dormandPrince853Integrator19.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double33 = dormandPrince853Integrator32.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator32.addSwitchingFunction(switchingFunction34, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double39 = dormandPrince853Integrator32.getCurrentStepStart();
        dormandPrince853Integrator32.setInitialStepSize((double) 0.0f);
        java.lang.String str42 = dormandPrince853Integrator32.getName();
        java.io.IOException iOException44 = new java.io.IOException("hi!");
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray47, throwable48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        java.lang.String str51 = mathException50.getPattern();
        java.lang.Object[] objArray52 = mathException50.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray52);
        double[] doubleArray62 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray65 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray62, doubleArray65);
        java.lang.String str67 = dormandPrince853Integrator66.getName();
        dormandPrince853Integrator66.setMinReduction(0.9d);
        java.lang.String str70 = dormandPrince853Integrator66.getName();
        java.lang.Object[] objArray71 = new java.lang.Object[] { double14, double27, dormandPrince853Integrator32, "hi!", objArray52, dormandPrince853Integrator66 };
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray73, throwable74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray52, (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException77);
        java.io.IOException iOException79 = new java.io.IOException((java.lang.Throwable) mathException77);
        java.io.IOException iOException80 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Throwable) mathException77);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str42, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str67, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
    }

    @Test
    public void test12863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12863");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setSafety((double) 8);
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 1.0d, (double) 100.0f, (double) (-1.0f));
        double double28 = dormandPrince853Integrator27.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double34 = dormandPrince853Integrator33.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator33.addSwitchingFunction(switchingFunction35, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double40 = dormandPrince853Integrator33.getCurrentStepStart();
        dormandPrince853Integrator33.setInitialStepSize((double) 0.0f);
        java.lang.String str43 = dormandPrince853Integrator33.getName();
        java.lang.String str44 = dormandPrince853Integrator33.getName();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator33.getStepHandler();
        dormandPrince853Integrator27.setStepHandler(stepHandler45);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator47 = null;
        stepHandler45.handleStep(stepInterpolator47, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler45);
        java.lang.String str51 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.2d + "'", double28 == 0.2d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9d + "'", double34 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12864");
        java.io.IOException iOException2 = new java.io.IOException("org.apache.commons.math.MathException: hi!");
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) iOException4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.String str9 = mathException7.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException" + "'", str9, "org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
    }

    @Test
    public void test12865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12865");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator12.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator30.setMinReduction(100.0d);
        double double38 = dormandPrince853Integrator30.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction39, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator30.getStepHandler();
        java.lang.String str45 = dormandPrince853Integrator30.getName();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler46);
        double double48 = dormandPrince853Integrator12.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction54, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator53.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator53.getStepHandler();
        boolean boolean62 = stepHandler61.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator63 = null;
        stepHandler61.handleStep(stepInterpolator63, false);
        dormandPrince853Integrator12.setStepHandler(stepHandler61);
        boolean boolean67 = stepHandler61.requiresDenseOutput();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test12866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12866");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double20 = dormandPrince853Integrator19.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction21, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double26 = dormandPrince853Integrator19.getSafety();
        double double27 = dormandPrince853Integrator19.getMaxGrowth();
        double double28 = dormandPrince853Integrator19.getCurrentStepStart();
        double double29 = dormandPrince853Integrator19.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator19.getStepHandler();
        double double31 = dormandPrince853Integrator19.getMaxGrowth();
        dormandPrince853Integrator19.setInitialStepSize((double) (byte) 0);
        int int34 = dormandPrince853Integrator19.getOrder();
        double double35 = dormandPrince853Integrator19.getSafety();
        int int36 = dormandPrince853Integrator19.getOrder();
        double double37 = dormandPrince853Integrator19.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator19.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        java.lang.String str40 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.9d + "'", double35 == 0.9d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12867");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        boolean boolean33 = switchingFunctionsHandler0.reset(10.0d, doubleArray31);
        double double34 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator35 = null;
        boolean boolean36 = switchingFunctionsHandler0.evaluateStep(stepInterpolator35);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        switchingFunctionsHandler0.add(switchingFunction37, 1.4997884186649117d, 0.6324555320336759d, (-1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12868");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth(0.9486832980505138d);
        double[] doubleArray12 = new double[] { Double.NaN };
        double[] doubleArray21 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray24 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray21, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray12, doubleArray21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        boolean boolean34 = stepHandler32.requiresDenseOutput();
        stepHandler32.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator36 = null;
        stepHandler32.handleStep(stepInterpolator36, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        stepHandler32.handleStep(stepInterpolator39, false);
        boolean boolean42 = stepHandler32.requiresDenseOutput();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test12869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12869");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray10, throwable11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException12);
        java.lang.String str14 = mathException13.getPattern();
        java.lang.Object[] objArray15 = mathException13.getArguments();
        java.lang.String str16 = mathException13.getPattern();
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) mathException13);
        java.lang.Object[] objArray18 = mathException13.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException19 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray18);
        java.lang.Object[] objArray20 = integratorException19.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("", objArray20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", objArray20, (java.lang.Throwable) mathException23);
        java.lang.String[] strArray29 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray29);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray29);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray20, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException34);
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) integratorException36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray42, throwable43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException44);
        java.lang.String str46 = mathException45.getPattern();
        java.lang.Object[] objArray47 = mathException45.getArguments();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException45);
        java.io.IOException iOException49 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException45);
        java.io.IOException iOException50 = new java.io.IOException((java.lang.Throwable) iOException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) iOException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray38);
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray58, throwable59);
        java.io.IOException iOException61 = new java.io.IOException("hi!", (java.lang.Throwable) mathException60);
        java.io.IOException iOException62 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException60);
        java.io.IOException iOException63 = new java.io.IOException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException62);
        java.io.IOException iOException64 = new java.io.IOException("", (java.lang.Throwable) iOException62);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException62);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) mathException65);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
    }

    @Test
    public void test12870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12870");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double13 = dormandPrince853Integrator4.getSafety();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler15 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler15);
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12871");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), (double) 1L, (double) 2, (double) 'a');
    }

    @Test
    public void test12872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12872");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.Object[] objArray7 = mathException5.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("");
        java.lang.String str10 = mathException9.getPattern();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray7, (java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test12873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12873");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        boolean boolean42 = switchingFunctionsHandler0.reset((double) 100, doubleArray36);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction43 = null;
        switchingFunctionsHandler0.add(switchingFunction43, 0.0d, (double) 1.0f, 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        switchingFunctionsHandler0.add(switchingFunction48, (double) (short) 10, (double) (-1), 8);
        boolean boolean53 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        switchingFunctionsHandler0.add(switchingFunction54, (double) (-1L), (double) (-1.0f), 100);
        boolean boolean59 = switchingFunctionsHandler0.stop();
        boolean boolean60 = switchingFunctionsHandler0.stop();
        double double61 = switchingFunctionsHandler0.getEventTime();
        boolean boolean62 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test12874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12874");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(97.0d);
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction(2.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 7.211102550927978d, (double) 10, (int) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        stepHandler22.handleStep(stepInterpolator23, true);
        stepHandler22.reset();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertNotNull(stepHandler22);
    }

    @Test
    public void test12875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12875");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        double double21 = switchingFunctionsHandler0.getEventTime();
        boolean boolean22 = switchingFunctionsHandler0.stop();
        double[] doubleArray24 = null;
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray24);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        switchingFunctionsHandler0.add(switchingFunction26, 31.810829150682025d, 0.2d, (int) ' ');
        double double31 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test12876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12876");
        java.io.IOException iOException2 = new java.io.IOException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: ");
        org.apache.commons.math.ode.DerivativeException derivativeException3 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = derivativeException3.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException5 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray4);
        java.lang.Throwable throwable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            integratorException5.addSuppressed(throwable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test12877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12877");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        dormandPrince853Integrator12.setMinReduction(10.0d);
        double double20 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double21 = dormandPrince853Integrator12.getMinStep();
        double double22 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double23 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9486832980505138d + "'", double20 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9486832980505138d + "'", double22 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9486832980505138d + "'", double23 == 0.9486832980505138d);
    }

    @Test
    public void test12878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12878");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.String str8 = mathException7.getPattern();
        java.lang.Object[] objArray9 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) integratorException11);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException13);
        java.lang.Object[] objArray15 = integratorException14.getArguments();
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.math.MathException", "org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", "org.apache.commons.math.ode.IntegratorException", "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", "org.apache.commons.math.ode.IntegratorException: ", "org.apache.commons.math.MathException: hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray27);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: java.io.IOException: hi!", (java.lang.Object[]) strArray27);
        java.lang.String[] strArray40 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray40);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("", strArray40);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray40);
        java.io.IOException iOException45 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray40, (java.lang.Throwable) iOException45);
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException("", strArray40);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray40);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray40);
        org.apache.commons.math.ode.IntegratorException integratorException50 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray40);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray56, throwable57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException58);
        java.lang.String str60 = mathException59.getPattern();
        java.lang.Object[] objArray61 = mathException59.getArguments();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException59);
        java.io.IOException iOException63 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException59);
        java.lang.Throwable[] throwableArray64 = mathException59.getSuppressed();
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray66, throwable67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException68);
        java.lang.String str70 = mathException69.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException71 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException69);
        java.io.IOException iOException72 = new java.io.IOException((java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray64, (java.lang.Throwable) iOException72);
        java.io.IOException iOException74 = new java.io.IOException((java.lang.Throwable) iOException72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray40, (java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("java.io.IOException: ", (java.lang.Object[]) strArray27, (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException", objArray15, (java.lang.Throwable) mathException78);
        org.apache.commons.math.ode.IntegratorException integratorException80 = new org.apache.commons.math.ode.IntegratorException("hi!", objArray15);
        java.io.IOException iOException81 = new java.io.IOException((java.lang.Throwable) integratorException80);
        java.lang.Throwable[] throwableArray82 = iOException81.getSuppressed();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test12879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12879");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        java.lang.String str7 = derivativeException4.getPattern();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler9 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        boolean boolean11 = switchingFunctionsHandler9.evaluateStep(stepInterpolator10);
        double[] doubleArray21 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray24 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray21, doubleArray24);
        switchingFunctionsHandler9.stepAccepted(100.0d, doubleArray21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler9.add(switchingFunction27, 100.0d, (double) 0.0f, (int) (byte) 1);
        java.io.IOException iOException33 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator39.setMinReduction(100.0d);
        double double47 = dormandPrince853Integrator39.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction48, (double) 3, (double) (-1L), (int) (byte) -1);
        java.lang.Object[] objArray53 = new java.lang.Object[] { switchingFunctionsHandler9, "hi!", "Dormand-Prince 8 (5, 3)", (-1L) };
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray55, throwable56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException57);
        java.lang.String str59 = mathException58.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", objArray53, (java.lang.Throwable) mathException58);
        derivativeException4.addSuppressed((java.lang.Throwable) mathException58);
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.IntegratorException integratorException64 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException4);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) derivativeException4);
        org.apache.commons.math.ode.DerivativeException derivativeException66 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException65);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str7, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
    }

    @Test
    public void test12880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12880");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray11, throwable12);
        java.io.IOException iOException14 = new java.io.IOException("hi!", (java.lang.Throwable) mathException13);
        java.io.IOException iOException15 = new java.io.IOException("hi!", (java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray3, (java.lang.Throwable) iOException16);
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) mathException17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException17);
        java.lang.String str20 = derivativeException19.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException21);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test12881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12881");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", objArray2);
        java.lang.Object[] objArray6 = mathException5.getArguments();
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException5);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: java.io.IOException", objArray12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", objArray12);
        mathException5.addSuppressed((java.lang.Throwable) mathException15);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test12882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12882");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        boolean boolean20 = switchingFunctionsHandler2.isEmpty();
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        boolean boolean35 = switchingFunctionsHandler2.reset(10.0d, doubleArray33);
        double[] doubleArray39 = new double[] { Double.NaN };
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray39, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray33, doubleArray48);
        dormandPrince853Integrator54.setMinReduction((double) (byte) -1);
        double double57 = dormandPrince853Integrator54.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction63, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator62.setMinReduction(100.0d);
        double double70 = dormandPrince853Integrator62.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction71 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction71, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler76 = dormandPrince853Integrator62.getStepHandler();
        java.lang.String str77 = dormandPrince853Integrator62.getName();
        org.apache.commons.math.ode.StepHandler stepHandler78 = dormandPrince853Integrator62.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator79 = null;
        stepHandler78.handleStep(stepInterpolator79, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator82 = null;
        stepHandler78.handleStep(stepInterpolator82, true);
        dormandPrince853Integrator54.setStepHandler(stepHandler78);
        double double86 = dormandPrince853Integrator54.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction87 = null;
        dormandPrince853Integrator54.addSwitchingFunction(switchingFunction87, 2.0d, (double) 1L, 100);
        double double92 = dormandPrince853Integrator54.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler93 = null;
        dormandPrince853Integrator54.setStepHandler(stepHandler93);
        int int95 = dormandPrince853Integrator54.getOrder();
        java.lang.String str96 = dormandPrince853Integrator54.getName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler78);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 8 + "'", int95 == 8);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str96, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12883");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double18 = dormandPrince853Integrator17.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction19, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double24 = dormandPrince853Integrator17.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction25, (double) 0, (double) 1.0f, 0);
        dormandPrince853Integrator17.setMinReduction((double) (short) -1);
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        java.lang.String str45 = dormandPrince853Integrator44.getName();
        dormandPrince853Integrator44.setMinReduction(0.9d);
        double double48 = dormandPrince853Integrator44.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction54, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator53.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator53.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler61);
        boolean boolean63 = stepHandler61.requiresDenseOutput();
        dormandPrince853Integrator17.setStepHandler(stepHandler61);
        dormandPrince853Integrator4.setStepHandler(stepHandler61);
        double double66 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str67 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str67, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12884");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray6);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray16);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray21, throwable22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray16, (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("java.io.IOException", objArray10, (java.lang.Throwable) mathException23);
        java.lang.String str27 = mathException23.getPattern();
        java.lang.String str28 = mathException23.getPattern();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException23);
        java.lang.Throwable[] throwableArray30 = mathException23.getSuppressed();
        java.io.IOException iOException31 = new java.io.IOException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException23);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test12885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12885");
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray9);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray9);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray9, (java.lang.Throwable) mathException16);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException21 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray9);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray9);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray9);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test12886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12886");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray21);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray28, throwable29);
        java.io.IOException iOException31 = new java.io.IOException("hi!", (java.lang.Throwable) mathException30);
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) iOException31);
        java.io.IOException iOException34 = new java.io.IOException("");
        iOException31.addSuppressed((java.lang.Throwable) iOException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray21, (java.lang.Throwable) iOException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException36);
        org.apache.commons.math.ode.IntegratorException integratorException38 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException40);
        java.lang.String str42 = derivativeException41.toString();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!" + "'", str42, "org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test12887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12887");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        java.lang.String str19 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth(97.0d);
        dormandPrince853Integrator12.setSafety((double) 100L);
        dormandPrince853Integrator12.setInitialStepSize((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12888");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) ' ', (double) (short) 0, (int) '#');
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(14.142135623730951d);
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction23, (double) 100.0f, 0.0d, (-1));
        double double28 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety(1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
    }

    @Test
    public void test12889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12889");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setSafety((double) 1);
        dormandPrince853Integrator4.setSafety(0.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) 10.0f, 0.0d, (int) (byte) 0);
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        double double21 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test12890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12890");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        boolean boolean33 = stepHandler29.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler29);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction35, (double) 0L, (double) (-1L), (int) (short) 100);
        double double40 = dormandPrince853Integrator12.getCurrentStepStart();
        java.lang.String str41 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction42, (double) (short) 100, (double) 100.0f, 0);
        int int47 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str41, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
    }

    @Test
    public void test12891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12891");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getSafety();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 14.142135623730951d + "'", double9 == 14.142135623730951d);
    }

    @Test
    public void test12892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12892");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7, (java.lang.Throwable) iOException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test12893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12893");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getMinStep();
        java.lang.String str19 = dormandPrince853Integrator12.getName();
        double double20 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        java.lang.String str21 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9486832980505138d + "'", double20 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12894");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        boolean boolean33 = stepHandler29.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler29);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction35, (double) 0L, (double) (-1L), (int) (short) 100);
        int int40 = dormandPrince853Integrator12.getOrder();
        double double41 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double47 = dormandPrince853Integrator46.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator46.addSwitchingFunction(switchingFunction48, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double53 = dormandPrince853Integrator46.getCurrentStepStart();
        dormandPrince853Integrator46.setInitialStepSize((double) 0.0f);
        java.lang.String str56 = dormandPrince853Integrator46.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction57 = null;
        dormandPrince853Integrator46.addSwitchingFunction(switchingFunction57, Double.NaN, (double) 100.0f, (int) (byte) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction67 = null;
        dormandPrince853Integrator66.addSwitchingFunction(switchingFunction67, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator66.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator66.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator75 = null;
        stepHandler74.handleStep(stepInterpolator75, false);
        boolean boolean78 = stepHandler74.requiresDenseOutput();
        dormandPrince853Integrator46.setStepHandler(stepHandler74);
        boolean boolean80 = stepHandler74.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler74);
        java.lang.String str82 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction83 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction83, (double) 10L, 5.477225575051661d, (int) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler88 = dormandPrince853Integrator12.getStepHandler();
        java.lang.String str89 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9486832980505138d + "'", double41 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.9d + "'", double47 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str56, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str89, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12895");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        java.io.IOException iOException9 = new java.io.IOException("hi!", (java.lang.Throwable) mathException8);
        java.lang.String str10 = mathException8.getPattern();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException8);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: java.io.IOException", (java.lang.Object[]) throwableArray12);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray20, throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        java.lang.String str24 = mathException23.getPattern();
        java.lang.Object[] objArray25 = mathException23.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray25);
        org.apache.commons.math.ode.IntegratorException integratorException27 = new org.apache.commons.math.ode.IntegratorException("", objArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray25);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException28);
        org.apache.commons.math.ode.IntegratorException integratorException30 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) integratorException30);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test12896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12896");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.String str8 = mathException7.getPattern();
        java.lang.Object[] objArray9 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException7);
        java.io.IOException iOException11 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException7);
        java.io.IOException iOException13 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) integratorException12);
        java.lang.String str14 = integratorException12.toString();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.ode.IntegratorException: hi!" + "'", str14, "org.apache.commons.math.ode.IntegratorException: hi!");
    }

    @Test
    public void test12897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12897");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        double double26 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, 14.142135623730951d, (double) 0.0f, (int) '#');
        boolean boolean32 = switchingFunctionsHandler0.isEmpty();
        double double33 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        switchingFunctionsHandler0.add(switchingFunction34, 17.320508075688775d, (double) (byte) 0, (int) 'a');
        double double39 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        switchingFunctionsHandler0.add(switchingFunction40, 31.810829150682025d, (double) 1, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test12898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12898");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.stop();
        double double9 = switchingFunctionsHandler0.getEventTime();
        double double10 = switchingFunctionsHandler0.getEventTime();
        double double11 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = switchingFunctionsHandler0.evaluateStep(stepInterpolator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test12899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12899");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, (double) '#', 0.6324555320336759d, 7.211102550927978d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test12900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12900");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("", strArray6);
        org.apache.commons.math.ode.IntegratorException integratorException9 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6);
        java.io.IOException iOException11 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray6, (java.lang.Throwable) iOException11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("", strArray6);
        java.lang.Throwable[] throwableArray14 = derivativeException13.getSuppressed();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray14);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test12901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12901");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth(10.0d);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, (double) (-1), (double) ' ', 3);
        int int22 = dormandPrince853Integrator4.getOrder();
        double double23 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test12902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12902");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) mathException5);
        java.io.IOException iOException7 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException5);
        java.lang.String str9 = mathException5.getPattern();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException");
        mathException5.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException5.getSuppressed();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test12903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12903");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        boolean boolean37 = switchingFunctionsHandler0.reset(100.0d, doubleArray22);
        double double38 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        switchingFunctionsHandler0.add(switchingFunction39, 14.142135623730951d, (double) 'a', 100);
        double double44 = switchingFunctionsHandler0.getEventTime();
        boolean boolean45 = switchingFunctionsHandler0.isEmpty();
        double double46 = switchingFunctionsHandler0.getEventTime();
        boolean boolean47 = switchingFunctionsHandler0.isEmpty();
        double double48 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction49 = null;
        switchingFunctionsHandler0.add(switchingFunction49, 32.0d, Double.NaN, (int) '#');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test12904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12904");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        boolean boolean23 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        boolean boolean25 = switchingFunctionsHandler0.evaluateStep(stepInterpolator24);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        boolean boolean27 = switchingFunctionsHandler0.evaluateStep(stepInterpolator26);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12905");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator17.getStepHandler();
        java.lang.String str20 = dormandPrince853Integrator17.getName();
        double double21 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction22, 13.92838827718412d, (double) 2, 0);
        double double27 = dormandPrince853Integrator17.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator17.getStepHandler();
        java.lang.Class<?> wildcardClass29 = dormandPrince853Integrator17.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test12906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12906");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.isEmpty();
        boolean boolean2 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean5 = switchingFunctionsHandler4.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler7 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        boolean boolean9 = switchingFunctionsHandler7.evaluateStep(stepInterpolator8);
        double[] doubleArray19 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray22 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray19, doubleArray22);
        switchingFunctionsHandler7.stepAccepted(100.0d, doubleArray19);
        switchingFunctionsHandler4.stepAccepted((double) (short) 10, doubleArray19);
        boolean boolean26 = switchingFunctionsHandler4.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler28 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        boolean boolean30 = switchingFunctionsHandler28.evaluateStep(stepInterpolator29);
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        switchingFunctionsHandler28.stepAccepted(100.0d, doubleArray40);
        boolean boolean46 = switchingFunctionsHandler4.reset((double) 100, doubleArray40);
        boolean boolean47 = switchingFunctionsHandler0.reset((double) 100.0f, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        switchingFunctionsHandler0.add(switchingFunction48, 3.732075599071396d, (-1.0d), (int) ' ');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test12907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12907");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException");
        org.apache.commons.math.ode.DerivativeException derivativeException2 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) derivativeException2);
    }

    @Test
    public void test12908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12908");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.Object[] objArray7 = mathException5.getArguments();
        java.lang.String str8 = mathException5.getPattern();
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) mathException5);
        java.lang.Object[] objArray10 = mathException5.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException5);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) mathException17);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) iOException18);
        integratorException11.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException11);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException21);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test12909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12909");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (-1.0d), (double) (-1), (int) '#');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 14.142135623730951d, 7.211102550927978d, 2);
        dormandPrince853Integrator4.setSafety(3.760603093086394d);
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12910");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setSafety((double) (short) 0);
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        double[] doubleArray17 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray20 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray17, doubleArray20);
        java.lang.String str22 = dormandPrince853Integrator21.getName();
        dormandPrince853Integrator21.setMinReduction(0.9d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction25, (double) (-1.0f), (double) (byte) 0, (int) (short) -1);
        java.lang.String str30 = dormandPrince853Integrator21.getName();
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler31);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler31);
    }

    @Test
    public void test12911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12911");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray11);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray11);
        java.lang.String[] strArray22 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray22);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray22);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray29, throwable30);
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) mathException31);
        java.io.IOException iOException33 = new java.io.IOException("hi!", (java.lang.Throwable) iOException32);
        java.io.IOException iOException35 = new java.io.IOException("");
        iOException32.addSuppressed((java.lang.Throwable) iOException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray22, (java.lang.Throwable) iOException35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException37);
        org.apache.commons.math.ode.IntegratorException integratorException39 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException41);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException42);
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException43);
        java.lang.Object[] objArray45 = integratorException44.getArguments();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException", (java.lang.Throwable) integratorException44);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
    }

    @Test
    public void test12912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12912");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(3.760603093086394d, 11.892071150027212d, (double) 10, (double) (short) 0);
    }

    @Test
    public void test12913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12913");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray7);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15, throwable16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.lang.String str19 = mathException18.getPattern();
        java.lang.Object[] objArray20 = mathException18.getArguments();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException18);
        java.io.IOException iOException22 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray7, (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException", strArray7);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException27);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test12914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12914");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator12.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator30.setMinReduction(100.0d);
        double double38 = dormandPrince853Integrator30.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction39, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator30.getStepHandler();
        java.lang.String str45 = dormandPrince853Integrator30.getName();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler46);
        double double48 = dormandPrince853Integrator12.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction54, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator53.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator53.getStepHandler();
        boolean boolean62 = stepHandler61.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator63 = null;
        stepHandler61.handleStep(stepInterpolator63, false);
        dormandPrince853Integrator12.setStepHandler(stepHandler61);
        dormandPrince853Integrator12.setMinReduction(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator12.getStepHandler();
        stepHandler69.reset();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(stepHandler69);
    }

    @Test
    public void test12915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12915");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) (byte) 10, Double.NaN, 2.2493653007613963d);
    }

    @Test
    public void test12916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12916");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        java.lang.String str19 = dormandPrince853Integrator12.getName();
        int int20 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) 1L, 0.9d, (double) (-1));
        dormandPrince853Integrator25.setMaxGrowth(14.142135623730951d);
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler28);
        dormandPrince853Integrator12.setInitialStepSize(8.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction32, 31.622776601683793d, 5.623413251903491d, (int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(stepHandler28);
    }

    @Test
    public void test12917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12917");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction13, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double18 = dormandPrince853Integrator11.getSafety();
        double double19 = dormandPrince853Integrator11.getMaxGrowth();
        double double20 = dormandPrince853Integrator11.getCurrentStepStart();
        double double21 = dormandPrince853Integrator11.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        stepHandler22.handleStep(stepInterpolator23, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        int int27 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(2.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction30, 13.92838827718412d, 13.92838827718412d, 0);
        double double35 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2.0d + "'", double35 == 2.0d);
    }

    @Test
    public void test12918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12918");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 1.0f, (double) '#', (int) (short) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, (double) (byte) -1, 0.0d, 0);
        dormandPrince853Integrator4.setInitialStepSize(1.4142135623730951d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test12919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12919");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler0.add(switchingFunction19, (double) 0.0f, (double) (short) 100, (int) (short) 10);
        boolean boolean24 = switchingFunctionsHandler0.stop();
        boolean boolean25 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        switchingFunctionsHandler0.add(switchingFunction26, 98.48857801796105d, (double) 1.0f, (int) (short) 100);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler34 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean35 = switchingFunctionsHandler34.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator36 = null;
        boolean boolean37 = switchingFunctionsHandler34.evaluateStep(stepInterpolator36);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler39 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean40 = switchingFunctionsHandler39.stop();
        double double41 = switchingFunctionsHandler39.getEventTime();
        double[] doubleArray48 = new double[] { Double.NaN };
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray48, doubleArray57);
        double[] doubleArray71 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray74 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray71, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray48, doubleArray71);
        boolean boolean77 = switchingFunctionsHandler39.reset((double) 1, doubleArray48);
        switchingFunctionsHandler34.stepAccepted((double) (short) 0, doubleArray48);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler81 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean82 = switchingFunctionsHandler81.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator83 = null;
        boolean boolean84 = switchingFunctionsHandler81.evaluateStep(stepInterpolator83);
        double[] doubleArray86 = new double[] {};
        switchingFunctionsHandler81.stepAccepted((double) 100L, doubleArray86);
        double[] doubleArray88 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '#', 5.885661912765424d, doubleArray86, doubleArray88);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, 0.0d, doubleArray48, doubleArray88);
        boolean boolean91 = switchingFunctionsHandler0.reset(22.80350850198276d, doubleArray88);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator92 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = switchingFunctionsHandler0.evaluateStep(stepInterpolator92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12920");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray7, throwable8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray7);
        org.apache.commons.math.ode.IntegratorException integratorException11 = new org.apache.commons.math.ode.IntegratorException("", objArray7);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        java.lang.Object[] objArray18 = mathException16.getArguments();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray18, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("java.io.IOException: ", objArray7, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray7);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray7);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException28);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray7, (java.lang.Throwable) mathException28);
        org.apache.commons.math.ode.IntegratorException integratorException32 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException28);
        java.lang.Object[] objArray33 = mathException28.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test12921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12921");
        java.lang.String[] strArray11 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray11);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", strArray11);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray11);
        java.lang.String[] strArray24 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException", strArray24);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", strArray24);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray24);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray11);
        java.lang.Object[] objArray32 = derivativeException31.getArguments();
        java.lang.String[] strArray41 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: hi!", strArray41);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray41);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException48);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("Dormand-Prince 8 (5, 3)", strArray41);
        java.lang.Object[] objArray51 = derivativeException50.getArguments();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("java.io.IOException: ", (java.lang.Throwable) derivativeException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", objArray32, (java.lang.Throwable) mathException52);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray57, throwable58);
        java.io.IOException iOException60 = new java.io.IOException("hi!", (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        java.io.IOException iOException62 = new java.io.IOException("hi!", (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", objArray32, (java.lang.Throwable) mathException59);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
    }

    @Test
    public void test12922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12922");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator23.setMinReduction(100.0d);
        double double31 = dormandPrince853Integrator23.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction32, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator23.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        stepHandler37.handleStep(stepInterpolator38, false);
        dormandPrince853Integrator12.setStepHandler(stepHandler37);
        double double42 = dormandPrince853Integrator12.getMaxStep();
        dormandPrince853Integrator12.setMaxGrowth(55.3841974787333d);
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator12.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler45);
    }

    @Test
    public void test12923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12923");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        int int13 = dormandPrince853Integrator4.getOrder();
        int int14 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(Double.NaN);
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test12924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12924");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), 100.0d, (double) (-1), (double) 8);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        int int6 = dormandPrince853Integrator4.getOrder();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.0d) + "'", double8 == (-0.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler11);
    }

    @Test
    public void test12925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12925");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        int int16 = dormandPrince853Integrator4.getOrder();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) 1L, 35.0d, (int) (byte) 0);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator4.getStepHandler();
        int int25 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test12926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12926");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 5.916079783099616d, (double) 100.0f, (int) '#');
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        int int22 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator4.getStepHandler();
        stepHandler23.reset();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(stepHandler23);
    }

    @Test
    public void test12927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12927");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (-1.0f), 2.0d, (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((double) 2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
    }

    @Test
    public void test12928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12928");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator17.getStepHandler();
        double double20 = dormandPrince853Integrator17.getMaxGrowth();
        double double21 = dormandPrince853Integrator17.getCurrentStepStart();
        dormandPrince853Integrator17.setInitialStepSize((double) (byte) 0);
        java.lang.String str24 = dormandPrince853Integrator17.getName();
        dormandPrince853Integrator17.setInitialStepSize(97.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12929");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, 0.0d, (double) ' ', 0.9486832980505138d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) 100);
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) ' ');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test12930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12930");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        int int16 = dormandPrince853Integrator4.getOrder();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12931");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator12.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator30.setMinReduction(100.0d);
        double double38 = dormandPrince853Integrator30.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction39, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator30.getStepHandler();
        java.lang.String str45 = dormandPrince853Integrator30.getName();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler46);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator48 = null;
        stepHandler46.handleStep(stepInterpolator48, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        stepHandler46.handleStep(stepInterpolator51, false);
        stepHandler46.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator55 = null;
        stepHandler46.handleStep(stepInterpolator55, false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler46);
    }

    @Test
    public void test12932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12932");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety(97.0d);
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test12933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12933");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray10, throwable11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException(throwable11);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) integratorException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!");
        mathException15.addSuppressed((java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: ", (java.lang.Object[]) strArray7, (java.lang.Throwable) mathException15);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException23 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test12934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12934");
        java.lang.String[] strArray15 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray15);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray15);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray26);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray33, throwable34);
        java.io.IOException iOException36 = new java.io.IOException("hi!", (java.lang.Throwable) mathException35);
        java.io.IOException iOException37 = new java.io.IOException("hi!", (java.lang.Throwable) iOException36);
        java.io.IOException iOException39 = new java.io.IOException("");
        iOException36.addSuppressed((java.lang.Throwable) iOException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray26, (java.lang.Throwable) iOException39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException41);
        org.apache.commons.math.ode.IntegratorException integratorException43 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray15);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray15);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray49, throwable50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.Object[] objArray54 = mathException52.getArguments();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException52);
        java.io.IOException iOException56 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException52);
        org.apache.commons.math.ode.IntegratorException integratorException57 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException52);
        java.lang.Object[] objArray58 = mathException52.getArguments();
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", objArray61, throwable62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException63);
        java.lang.String str65 = mathException64.getPattern();
        java.lang.Object[] objArray66 = mathException64.getArguments();
        java.lang.String str67 = mathException64.getPattern();
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) mathException64);
        java.lang.Object[] objArray69 = mathException64.getArguments();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", objArray58, (java.lang.Throwable) mathException70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException70);
        org.apache.commons.math.ode.DerivativeException derivativeException73 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: hi!", strArray15);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray15);
        org.apache.commons.math.ode.DerivativeException derivativeException79 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: java.io.IOException: hi!", strArray15);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray15);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
    }

    @Test
    public void test12935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12935");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, 2.2493653007613963d, 0.0d, (int) ' ');
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
    }

    @Test
    public void test12936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12936");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (short) 0, 0.0d, (double) (-1L));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler10);
    }

    @Test
    public void test12937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12937");
        java.lang.String[] strArray14 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        java.lang.String[] strArray25 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray25);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray32, throwable33);
        java.io.IOException iOException35 = new java.io.IOException("hi!", (java.lang.Throwable) mathException34);
        java.io.IOException iOException36 = new java.io.IOException("hi!", (java.lang.Throwable) iOException35);
        java.io.IOException iOException38 = new java.io.IOException("");
        iOException35.addSuppressed((java.lang.Throwable) iOException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray25, (java.lang.Throwable) iOException38);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray14, (java.lang.Throwable) mathException40);
        org.apache.commons.math.ode.IntegratorException integratorException42 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray14);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray14);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray48, throwable49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException50);
        java.lang.String str52 = mathException51.getPattern();
        java.lang.Object[] objArray53 = mathException51.getArguments();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException51);
        java.io.IOException iOException55 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException51);
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException51);
        java.lang.Object[] objArray57 = mathException51.getArguments();
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray60, throwable61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException62);
        java.lang.String str64 = mathException63.getPattern();
        java.lang.Object[] objArray65 = mathException63.getArguments();
        java.lang.String str66 = mathException63.getPattern();
        java.io.IOException iOException67 = new java.io.IOException((java.lang.Throwable) mathException63);
        java.lang.Object[] objArray68 = mathException63.getArguments();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", objArray68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", objArray57, (java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray14, (java.lang.Throwable) mathException69);
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException73 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException", strArray14);
        org.apache.commons.math.ode.IntegratorException integratorException74 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) strArray14);
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", strArray14);
        java.lang.String str76 = derivativeException75.getPattern();
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)" + "'", str76, "org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12938");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray6, throwable7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        java.lang.String str10 = mathException9.getPattern();
        java.lang.Object[] objArray11 = mathException9.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray11);
        org.apache.commons.math.ode.IntegratorException integratorException13 = new org.apache.commons.math.ode.IntegratorException("", objArray11);
        java.io.IOException iOException14 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException13);
        java.io.IOException iOException16 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException13);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test12939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12939");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray7);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test12940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12940");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator24.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        stepHandler32.handleStep(stepInterpolator33, false);
        dormandPrince853Integrator18.setStepHandler(stepHandler32);
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        java.lang.String str50 = dormandPrince853Integrator49.getName();
        dormandPrince853Integrator49.setSafety((double) 0L);
        dormandPrince853Integrator49.setMaxGrowth((double) 'a');
        int int55 = dormandPrince853Integrator49.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction56 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction56, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator49.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction68 = null;
        dormandPrince853Integrator67.addSwitchingFunction(switchingFunction68, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator67.setMinReduction(100.0d);
        double double75 = dormandPrince853Integrator67.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction76 = null;
        dormandPrince853Integrator67.addSwitchingFunction(switchingFunction76, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler81 = dormandPrince853Integrator67.getStepHandler();
        java.lang.String str82 = dormandPrince853Integrator67.getName();
        org.apache.commons.math.ode.StepHandler stepHandler83 = dormandPrince853Integrator67.getStepHandler();
        dormandPrince853Integrator49.setStepHandler(stepHandler83);
        dormandPrince853Integrator18.setStepHandler(stepHandler83);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator86 = null;
        stepHandler83.handleStep(stepInterpolator86, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler83);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator90 = null;
        stepHandler83.handleStep(stepInterpolator90, true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler83);
    }

    @Test
    public void test12941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12941");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 0.0f, (double) (byte) 100, (double) (short) -1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test12942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12942");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler0.evaluateStep(stepInterpolator3);
        boolean boolean5 = switchingFunctionsHandler0.stop();
        boolean boolean6 = switchingFunctionsHandler0.isEmpty();
        boolean boolean7 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        boolean boolean9 = switchingFunctionsHandler0.evaluateStep(stepInterpolator8);
        boolean boolean10 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        switchingFunctionsHandler0.add(switchingFunction11, (double) 10.0f, 3.0d, 1);
        boolean boolean16 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test12943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12943");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        boolean boolean33 = stepHandler29.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler29);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction35, (double) (-1), (double) 100L, (int) (byte) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double45 = dormandPrince853Integrator44.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction46, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double51 = dormandPrince853Integrator44.getSafety();
        double double52 = dormandPrince853Integrator44.getCurrentSignedStepsize();
        int int53 = dormandPrince853Integrator44.getOrder();
        double double54 = dormandPrince853Integrator44.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double60 = dormandPrince853Integrator59.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        dormandPrince853Integrator59.addSwitchingFunction(switchingFunction61, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double66 = dormandPrince853Integrator59.getSafety();
        double double67 = dormandPrince853Integrator59.getMaxGrowth();
        double double68 = dormandPrince853Integrator59.getCurrentStepStart();
        double double69 = dormandPrince853Integrator59.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler70 = dormandPrince853Integrator59.getStepHandler();
        double double71 = dormandPrince853Integrator59.getMaxGrowth();
        dormandPrince853Integrator59.setInitialStepSize((double) (byte) 0);
        int int74 = dormandPrince853Integrator59.getOrder();
        double double75 = dormandPrince853Integrator59.getSafety();
        int int76 = dormandPrince853Integrator59.getOrder();
        double double77 = dormandPrince853Integrator59.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler78 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler78);
        dormandPrince853Integrator12.setStepHandler(stepHandler78);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.9d + "'", double45 == 0.9d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9d + "'", double51 == 0.9d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9d + "'", double60 == 0.9d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.9d + "'", double66 == 0.9d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.2d + "'", double69 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.9d + "'", double75 == 0.9d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler78);
    }

    @Test
    public void test12944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12944");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray8);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        java.io.IOException iOException16 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) derivativeException15);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test12945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12945");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("");
        java.lang.String str6 = mathException5.getPattern();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.Throwable[] throwableArray8 = mathException7.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("hi!", (java.lang.Object[]) throwableArray8);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray12, throwable13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException(throwable13);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) integratorException15);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) integratorException15);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray19, throwable20);
        org.apache.commons.math.ode.IntegratorException integratorException22 = new org.apache.commons.math.ode.IntegratorException(throwable20);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) integratorException22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException23);
        integratorException15.addSuppressed((java.lang.Throwable) derivativeException24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) derivativeException24);
        org.apache.commons.math.ode.IntegratorException integratorException28 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray8);
        java.lang.String str29 = integratorException28.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException" + "'", str29, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException");
    }

    @Test
    public void test12946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12946");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getSafety();
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test12947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12947");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setSafety((double) 1L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction18, (double) 0, (double) 3, (int) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction23, 0.0d, 17.88854381999832d, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler15);
    }

    @Test
    public void test12948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12948");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double28 = dormandPrince853Integrator27.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator27.addSwitchingFunction(switchingFunction29, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator38.addSwitchingFunction(switchingFunction39, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator38.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator38.getStepHandler();
        boolean boolean47 = stepHandler46.requiresDenseOutput();
        boolean boolean48 = stepHandler46.requiresDenseOutput();
        dormandPrince853Integrator27.setStepHandler(stepHandler46);
        dormandPrince853Integrator22.setStepHandler(stepHandler46);
        double double51 = dormandPrince853Integrator22.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator22.getStepHandler();
        java.lang.String str53 = dormandPrince853Integrator22.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double59 = dormandPrince853Integrator58.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction60 = null;
        dormandPrince853Integrator58.addSwitchingFunction(switchingFunction60, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double65 = dormandPrince853Integrator58.getSafety();
        double double66 = dormandPrince853Integrator58.getCurrentSignedStepsize();
        int int67 = dormandPrince853Integrator58.getOrder();
        double double68 = dormandPrince853Integrator58.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double74 = dormandPrince853Integrator73.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction75 = null;
        dormandPrince853Integrator73.addSwitchingFunction(switchingFunction75, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double80 = dormandPrince853Integrator73.getSafety();
        double double81 = dormandPrince853Integrator73.getMaxGrowth();
        double double82 = dormandPrince853Integrator73.getCurrentStepStart();
        double double83 = dormandPrince853Integrator73.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler84 = dormandPrince853Integrator73.getStepHandler();
        double double85 = dormandPrince853Integrator73.getMaxGrowth();
        dormandPrince853Integrator73.setInitialStepSize((double) (byte) 0);
        int int88 = dormandPrince853Integrator73.getOrder();
        double double89 = dormandPrince853Integrator73.getSafety();
        int int90 = dormandPrince853Integrator73.getOrder();
        double double91 = dormandPrince853Integrator73.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler92 = dormandPrince853Integrator73.getStepHandler();
        dormandPrince853Integrator58.setStepHandler(stepHandler92);
        dormandPrince853Integrator22.setStepHandler(stepHandler92);
        dormandPrince853Integrator4.setStepHandler(stepHandler92);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator96 = null;
        stepHandler92.handleStep(stepInterpolator96, true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str53, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9d + "'", double59 == 0.9d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.9d + "'", double65 == 0.9d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.9d + "'", double74 == 0.9d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.9d + "'", double80 == 0.9d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.2d + "'", double83 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.9d + "'", double89 == 0.9d);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler92);
    }

    @Test
    public void test12949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12949");
        double[] doubleArray7 = new double[] { Double.NaN };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray7, doubleArray16);
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray7, doubleArray30);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        boolean boolean54 = switchingFunctionsHandler36.isEmpty();
        double double55 = switchingFunctionsHandler36.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean58 = switchingFunctionsHandler57.stop();
        double double59 = switchingFunctionsHandler57.getEventTime();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        switchingFunctionsHandler57.stepAccepted(0.2d, doubleArray64);
        boolean boolean80 = switchingFunctionsHandler36.reset((double) '4', doubleArray64);
        double[] doubleArray90 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray93 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray90, doubleArray93);
        boolean boolean95 = switchingFunctionsHandler36.reset((double) (-1), doubleArray93);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 100.0d, doubleArray7, doubleArray93);
        int int97 = dormandPrince853Integrator96.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler98 = dormandPrince853Integrator96.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 8 + "'", int97 == 8);
        org.junit.Assert.assertNotNull(stepHandler98);
    }

    @Test
    public void test12950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12950");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException(throwable1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test12951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12951");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety(97.0d);
        double double15 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 0.2d, Double.NaN, (int) (byte) -1);
        double double21 = dormandPrince853Integrator4.getMinStep();
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test12952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12952");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.String str7 = mathException6.getPattern();
        java.lang.Object[] objArray8 = mathException6.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException6);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray11 = iOException10.getSuppressed();
        java.lang.String[] strArray17 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray17);
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray17);
        java.lang.Throwable[] throwableArray23 = derivativeException22.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException24);
        org.apache.commons.math.ode.IntegratorException integratorException26 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) integratorException26);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test12953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12953");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(11.801859293002996d, 0.0d, 11.892071150027212d, (double) 10.0f);
    }

    @Test
    public void test12954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12954");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 5.477225575051661d, 3.1622776601683795d, 31.810829150682025d);
    }

    @Test
    public void test12955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12955");
        java.io.IOException iOException1 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test12956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12956");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double double19 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean22 = switchingFunctionsHandler21.stop();
        double double23 = switchingFunctionsHandler21.getEventTime();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        switchingFunctionsHandler21.stepAccepted(0.2d, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.reset((double) '4', doubleArray28);
        double[] doubleArray54 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray57 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray54, doubleArray57);
        boolean boolean59 = switchingFunctionsHandler0.reset((double) (-1), doubleArray57);
        boolean boolean60 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator61 = null;
        boolean boolean62 = switchingFunctionsHandler0.evaluateStep(stepInterpolator61);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator63 = null;
        boolean boolean64 = switchingFunctionsHandler0.evaluateStep(stepInterpolator63);
        boolean boolean65 = switchingFunctionsHandler0.isEmpty();
        boolean boolean66 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test12957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12957");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', 0.0d, (double) (short) 0, 2.0d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        java.lang.Class<?> wildcardClass7 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test12958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12958");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, 0.0d, 0.6324555320336759d, 17.320508075688775d);
        dormandPrince853Integrator4.setMinReduction(0.0d);
    }

    @Test
    public void test12959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12959");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, Double.NaN, (double) 100.0f, (int) (byte) 0);
        double double20 = dormandPrince853Integrator4.getSafety();
        int int21 = dormandPrince853Integrator4.getOrder();
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        stepHandler23.handleStep(stepInterpolator24, false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler23);
    }

    @Test
    public void test12960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12960");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(5.916079783099616d);
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double20 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.916079783099616d + "'", double20 == 5.916079783099616d);
        org.junit.Assert.assertNotNull(stepHandler21);
    }

    @Test
    public void test12961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12961");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.ode.IntegratorException integratorException6 = new org.apache.commons.math.ode.IntegratorException(throwable4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) integratorException6);
        java.io.IOException iOException9 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException6);
        java.lang.Throwable[] throwableArray10 = integratorException6.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException6);
        java.lang.String str12 = mathException11.getPattern();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)" + "'", str12, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12962");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 1.0d, (double) (short) -1, 0);
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test12963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12963");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.String str7 = mathException6.getPattern();
        java.lang.Object[] objArray8 = mathException6.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("");
        java.lang.String str11 = mathException10.getPattern();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray8, (java.lang.Throwable) mathException10);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray18, throwable19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray18);
        java.lang.Object[] objArray22 = mathException21.getArguments();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray22);
        java.lang.String[] strArray28 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray33, throwable34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray28, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("java.io.IOException", objArray22, (java.lang.Throwable) mathException35);
        java.lang.String str39 = mathException35.getPattern();
        java.lang.String str40 = mathException35.getPattern();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException35);
        mathException10.addSuppressed((java.lang.Throwable) mathException35);
        java.lang.Object[] objArray43 = mathException35.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException44 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", objArray43);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
    }

    @Test
    public void test12964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12964");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', (double) 10, 17.320508075688775d, (double) 3);
        dormandPrince853Integrator4.setMinReduction(0.9486832980505138d);
    }

    @Test
    public void test12965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12965");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        double double18 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator17.getCurrentStepStart();
        double double20 = dormandPrince853Integrator17.getMinReduction();
        dormandPrince853Integrator17.setInitialStepSize((double) (short) 10);
        java.lang.String str23 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction29, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator28.setInitialStepSize((double) 1L);
        int int36 = dormandPrince853Integrator28.getOrder();
        double double37 = dormandPrince853Integrator28.getCurrentStepStart();
        double double38 = dormandPrince853Integrator28.getCurrentSignedStepsize();
        dormandPrince853Integrator28.setMinReduction(97.0d);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler43 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler45 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator46 = null;
        boolean boolean47 = switchingFunctionsHandler45.evaluateStep(stepInterpolator46);
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        switchingFunctionsHandler45.stepAccepted(100.0d, doubleArray57);
        switchingFunctionsHandler43.stepAccepted((double) (short) 1, doubleArray57);
        double[] doubleArray67 = new double[] { Double.NaN };
        double[] doubleArray76 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray79 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray76, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray67, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray57, doubleArray67);
        double double83 = dormandPrince853Integrator82.getSafety();
        double double84 = dormandPrince853Integrator82.getCurrentStepStart();
        dormandPrince853Integrator82.setInitialStepSize((double) 100L);
        double double87 = dormandPrince853Integrator82.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 10.0d, Double.NaN, 17.320508075688775d);
        org.apache.commons.math.ode.StepHandler stepHandler93 = dormandPrince853Integrator92.getStepHandler();
        dormandPrince853Integrator82.setStepHandler(stepHandler93);
        dormandPrince853Integrator28.setStepHandler(stepHandler93);
        dormandPrince853Integrator17.setStepHandler(stepHandler93);
        double double97 = dormandPrince853Integrator17.getSafety();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.9d + "'", double83 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(stepHandler93);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.9d + "'", double97 == 0.9d);
    }

    @Test
    public void test12966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12966");
        java.lang.String[] strArray7 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray7);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray14, throwable15);
        java.io.IOException iOException17 = new java.io.IOException("hi!", (java.lang.Throwable) mathException16);
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) iOException17);
        java.io.IOException iOException20 = new java.io.IOException("");
        iOException17.addSuppressed((java.lang.Throwable) iOException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray7, (java.lang.Throwable) iOException20);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray27, throwable28);
        java.io.IOException iOException30 = new java.io.IOException("hi!", (java.lang.Throwable) mathException29);
        java.io.IOException iOException31 = new java.io.IOException("hi!", (java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException31);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray36, throwable37);
        java.io.IOException iOException39 = new java.io.IOException("hi!", (java.lang.Throwable) mathException38);
        org.apache.commons.math.ode.IntegratorException integratorException40 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException39);
        iOException31.addSuppressed((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) strArray7, (java.lang.Throwable) mathException41);
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", strArray7);
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException45);
        java.lang.Object[] objArray47 = derivativeException46.getArguments();
        java.lang.Class<?> wildcardClass48 = objArray47.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test12967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12967");
        double[] doubleArray2 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        boolean boolean21 = switchingFunctionsHandler3.isEmpty();
        double double22 = switchingFunctionsHandler3.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean25 = switchingFunctionsHandler24.stop();
        double double26 = switchingFunctionsHandler24.getEventTime();
        double[] doubleArray31 = new double[] { Double.NaN };
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray31, doubleArray40);
        switchingFunctionsHandler24.stepAccepted(0.2d, doubleArray31);
        boolean boolean47 = switchingFunctionsHandler3.reset((double) '4', doubleArray31);
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        boolean boolean62 = switchingFunctionsHandler3.reset((double) (-1), doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (byte) 10, doubleArray2, doubleArray60);
        double double64 = dormandPrince853Integrator63.getCurrentStepStart();
        double double65 = dormandPrince853Integrator63.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test12968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12968");
        java.lang.String[] strArray5 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray5);
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", strArray5);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) derivativeException9);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) derivativeException9);
        java.lang.Object[] objArray12 = derivativeException9.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: java.io.IOException: ", objArray12);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test12969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12969");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        dormandPrince853Integrator4.setMaxGrowth(3.0d);
        double double22 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
    }

    @Test
    public void test12970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12970");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray18, throwable19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException20);
        java.lang.String str22 = mathException21.getPattern();
        java.lang.Object[] objArray23 = mathException21.getArguments();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException21);
        java.io.IOException iOException25 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray32, throwable33);
        java.io.IOException iOException35 = new java.io.IOException("hi!", (java.lang.Throwable) mathException34);
        org.apache.commons.math.ode.IntegratorException integratorException36 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException35);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException35);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Object[]) strArray10, (java.lang.Throwable) derivativeException38);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray10);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray44, throwable45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray44);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException47);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException47);
        java.io.IOException iOException54 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException");
        java.io.IOException iOException55 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) strArray10, (java.lang.Throwable) iOException54);
        java.lang.Object[] objArray57 = mathException56.getArguments();
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray57, throwable58);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
    }

    @Test
    public void test12971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12971");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str10 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertNotNull(stepHandler12);
    }

    @Test
    public void test12972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12972");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray4);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray4);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray12, throwable13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException14);
        java.lang.String str16 = mathException15.getPattern();
        java.lang.Object[] objArray17 = mathException15.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException15);
        java.io.IOException iOException19 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray4, (java.lang.Throwable) mathException15);
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) mathException15);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException22);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test12973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12973");
        java.io.IOException iOException1 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException1);
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.io.IOException iOException9 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException9);
        mathException2.addSuppressed((java.lang.Throwable) mathException10);
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException10);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) derivativeException13);
        java.lang.String str15 = derivativeException13.getPattern();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException13);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str15, "org.apache.commons.math.ode.DerivativeException: hi!");
    }

    @Test
    public void test12974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12974");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction16, (double) (-1.0f), (double) (byte) 0, (int) (short) -1);
        int int21 = dormandPrince853Integrator12.getOrder();
        java.lang.String str22 = dormandPrince853Integrator12.getName();
        java.lang.String str23 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12975");
        java.io.IOException iOException1 = new java.io.IOException("org.apache.commons.math.ode.IntegratorException: java.io.IOException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12976");
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray10);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray21);
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray21);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray28, throwable29);
        java.io.IOException iOException31 = new java.io.IOException("hi!", (java.lang.Throwable) mathException30);
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) iOException31);
        java.io.IOException iOException34 = new java.io.IOException("");
        iOException31.addSuppressed((java.lang.Throwable) iOException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray21, (java.lang.Throwable) iOException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException36);
        org.apache.commons.math.ode.IntegratorException integratorException38 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray10);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray10);
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) mathException39);
        java.io.IOException iOException41 = new java.io.IOException((java.lang.Throwable) iOException40);
        java.io.IOException iOException42 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) iOException40);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test12977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12977");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        double double9 = dormandPrince853Integrator4.getMinStep();
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, 11.585065449428521d, 18.708286933869708d, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test12978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12978");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction32, (double) (byte) -1, (double) (short) 0, (-1));
        java.lang.String str37 = dormandPrince853Integrator4.getName();
        double double38 = dormandPrince853Integrator4.getMaxStep();
        double double39 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction40, (double) 0, (double) (byte) 100, (int) (short) 10);
        double double45 = dormandPrince853Integrator4.getCurrentStepStart();
        double double46 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test12979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12979");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getMinStep();
        double double17 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        dormandPrince853Integrator22.setMaxGrowth(0.0d);
        double double25 = dormandPrince853Integrator22.getMinReduction();
        dormandPrince853Integrator22.setMinReduction(35.0d);
        int int28 = dormandPrince853Integrator22.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        java.lang.String str44 = dormandPrince853Integrator43.getName();
        dormandPrince853Integrator43.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator43.setMinReduction(100.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction50, (double) 0, (double) 10, (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator43.getStepHandler();
        stepHandler55.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler55);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2d + "'", double25 == 0.2d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertNotNull(stepHandler55);
    }

    @Test
    public void test12980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12980");
        java.lang.String[] strArray6 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray6);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray6);
        java.lang.Throwable[] throwableArray11 = derivativeException10.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException12 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) derivativeException10);
        java.lang.Throwable[] throwableArray13 = integratorException12.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException14 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", (java.lang.Object[]) throwableArray13);
        org.apache.commons.math.ode.IntegratorException integratorException15 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray13);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test12981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12981");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', (double) (-1.0f), 14.142135623730951d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, 98.48857801796105d, (double) 100L, (int) (byte) 1);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 17.88854381999832d + "'", double8 == 17.88854381999832d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test12982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12982");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        stepHandler29.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        double double35 = dormandPrince853Integrator4.getCurrentStepStart();
        int int36 = dormandPrince853Integrator4.getOrder();
        int int37 = dormandPrince853Integrator4.getOrder();
        double double38 = dormandPrince853Integrator4.getCurrentStepStart();
        double double39 = dormandPrince853Integrator4.getCurrentStepStart();
        double double40 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction41, 1.7320508075688772d, 31.622776601683793d, (int) (byte) 1);
        double double46 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.2d + "'", double40 == 0.2d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test12983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12983");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.Object[] objArray7 = mathException5.getArguments();
        java.lang.String str8 = mathException5.getPattern();
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) mathException5);
        java.io.IOException iOException10 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException9);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException13);
        iOException9.addSuppressed((java.lang.Throwable) mathException13);
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException9);
        java.lang.String str17 = integratorException16.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) integratorException16);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str17, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test12984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12984");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray7, throwable8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.String str11 = mathException10.getPattern();
        java.lang.Object[] objArray12 = mathException10.getArguments();
        java.lang.String str13 = mathException10.getPattern();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray15 = mathException10.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException16 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray15);
        java.lang.Object[] objArray17 = integratorException16.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException18 = new org.apache.commons.math.ode.IntegratorException("", objArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", objArray17, (java.lang.Throwable) mathException20);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray26);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray17, (java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Object[] objArray34 = mathException31.getArguments();
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: hi!", strArray39);
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray39);
        java.lang.Throwable[] throwableArray44 = derivativeException43.getSuppressed();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("java.io.IOException: ", objArray34, (java.lang.Throwable) derivativeException43);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test12985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12985");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 10L, 0);
        dormandPrince853Integrator12.setInitialStepSize((-0.0d));
        double[] doubleArray34 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray37 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray34, doubleArray37);
        java.lang.String str39 = dormandPrince853Integrator38.getName();
        dormandPrince853Integrator38.setSafety((double) 0L);
        dormandPrince853Integrator38.setMaxGrowth((double) 'a');
        int int44 = dormandPrince853Integrator38.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator38.addSwitchingFunction(switchingFunction45, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator38.setInitialStepSize((double) '4');
        double double52 = dormandPrince853Integrator38.getCurrentSignedStepsize();
        int int53 = dormandPrince853Integrator38.getOrder();
        dormandPrince853Integrator38.setMaxGrowth(10.0d);
        org.apache.commons.math.ode.StepHandler stepHandler56 = dormandPrince853Integrator38.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler56);
        dormandPrince853Integrator12.setMinReduction(31.622776601683793d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str39, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9486832980505138d + "'", double52 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(stepHandler56);
    }

    @Test
    public void test12986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12986");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 1.0f, 8);
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        java.lang.String str26 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test12987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12987");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        java.lang.String str17 = dormandPrince853Integrator12.getName();
        double double18 = dormandPrince853Integrator12.getSafety();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test12988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12988");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException4 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("", strArray3);
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException", strArray3);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) derivativeException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test12989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12989");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (byte) 100, 11.892071150027212d, (double) (-1L));
    }

    @Test
    public void test12990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12990");
        java.io.IOException iOException1 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException");
    }

    @Test
    public void test12991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12991");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        dormandPrince853Integrator12.setSafety((double) (-1.0f));
        dormandPrince853Integrator12.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator24.getStepHandler();
        boolean boolean33 = stepHandler32.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        stepHandler32.handleStep(stepInterpolator34, false);
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        double double38 = dormandPrince853Integrator12.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
    }

    @Test
    public void test12992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12992");
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16, throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.String str20 = mathException19.getPattern();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException19);
        java.io.IOException iOException23 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException19);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.IntegratorException: ", strArray8);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", strArray8);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException34 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray33);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException37);
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.IntegratorException", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test12993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12993");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        int int13 = dormandPrince853Integrator4.getOrder();
        int int14 = dormandPrince853Integrator4.getOrder();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 4.47213595499958d, 8.0d, (-1));
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test12994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12994");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        int int29 = dormandPrince853Integrator23.getOrder();
        double double30 = dormandPrince853Integrator23.getCurrentSignedStepsize();
        double double31 = dormandPrince853Integrator23.getCurrentSignedStepsize();
        int int32 = dormandPrince853Integrator23.getOrder();
        double double33 = dormandPrince853Integrator23.getMinReduction();
        int int34 = dormandPrince853Integrator23.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        stepHandler35.handleStep(stepInterpolator37, true);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.2d + "'", double33 == 0.2d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test12995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12995");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        double double7 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, 3.760603093086394d, (double) (byte) 10, (int) ' ');
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test12996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12996");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        double double17 = dormandPrince853Integrator12.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction18, (double) 0, (double) 'a', (int) '4');
        double double23 = dormandPrince853Integrator12.getMinReduction();
        double double24 = dormandPrince853Integrator12.getMinReduction();
        int int25 = dormandPrince853Integrator12.getOrder();
        dormandPrince853Integrator12.setInitialStepSize((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test12997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12997");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', (double) (-1.0f), 14.142135623730951d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        int int6 = dormandPrince853Integrator4.getOrder();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test12998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12998");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        java.lang.String str14 = dormandPrince853Integrator12.getName();
        double double15 = dormandPrince853Integrator12.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        double double17 = dormandPrince853Integrator12.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2d + "'", double17 == 0.2d);
    }

    @Test
    public void test12999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12999");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler2.stepAccepted((double) (short) 1, doubleArray16);
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray16, doubleArray26);
        double double42 = dormandPrince853Integrator41.getSafety();
        double double43 = dormandPrince853Integrator41.getCurrentStepStart();
        double double44 = dormandPrince853Integrator41.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction45, (double) 10L, Double.NaN, (int) (byte) 10);
        double double50 = dormandPrince853Integrator41.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction51, 1.7320508075688772d, 0.9486832980505138d, (int) '#');
        double double56 = dormandPrince853Integrator41.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test13000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test13000");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction(97.0d);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator22 = null;
        boolean boolean23 = switchingFunctionsHandler21.evaluateStep(stepInterpolator22);
        double[] doubleArray33 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray36 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray33, doubleArray36);
        switchingFunctionsHandler21.stepAccepted(100.0d, doubleArray33);
        switchingFunctionsHandler19.stepAccepted((double) (short) 1, doubleArray33);
        double[] doubleArray43 = new double[] { Double.NaN };
        double[] doubleArray52 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray55 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray52, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray43, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray33, doubleArray43);
        double double59 = dormandPrince853Integrator58.getSafety();
        double double60 = dormandPrince853Integrator58.getCurrentStepStart();
        dormandPrince853Integrator58.setInitialStepSize((double) 100L);
        double double63 = dormandPrince853Integrator58.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 10.0d, Double.NaN, 17.320508075688775d);
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator68.getStepHandler();
        dormandPrince853Integrator58.setStepHandler(stepHandler69);
        dormandPrince853Integrator4.setStepHandler(stepHandler69);
        double double72 = dormandPrince853Integrator4.getMaxStep();
        double double73 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction74 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction74, 13.92838827718412d, (double) ' ', 2);
        double double79 = dormandPrince853Integrator4.getCurrentStepStart();
        double double80 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9d + "'", double59 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(stepHandler69);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }
}


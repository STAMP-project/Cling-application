import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        int int7 = property5.getMinimumValueOverall();
        java.lang.Object obj8 = null;
        boolean boolean9 = property5.equals(obj8);
        java.lang.String str10 = property5.getAsShortText();
        org.joda.time.DurationField durationField11 = property5.getDurationField();
        int int12 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-292275054) + "'", int7 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292275054) + "'", int12 == (-292275054));
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.getName();
        int int6 = localDate2.get(dateTimeFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        int int9 = localDate2.indexOf(dateTimeFieldType7);
        int int10 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate12 = localDate2.withYear(13);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property15.getDifference(readableInstant17);
        org.joda.time.LocalDate localDate19 = property15.withMaximumValue();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate26 = localDate24.plusMonths(32772);
        org.joda.time.LocalDate localDate27 = localDate19.withFields((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate35.toDateTimeAtMidnight(dateTimeZone41);
        long long47 = dateTimeZone29.getMillisKeepLocal(dateTimeZone41, (long) 9);
        long long50 = dateTimeZone41.convertLocalToUTC(0L, false);
        org.joda.time.DateTime dateTime51 = localDate26.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime52 = localDate12.toDateTimeAtCurrentTime(dateTimeZone41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate54 = localDate12.withDayOfYear(829749);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 829749 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0013-02-11" + "'", str13, "0013-02-11");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 9L + "'", long47 == 9L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-21600000L) + "'", long50 == (-21600000L));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        long long8 = dateTimeField5.addWrapField((long) 2, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial9 = null;
        int int10 = dateTimeField5.getMaximumValue(readablePartial9);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 315532800002L + "'", long8 == 315532800002L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology15.years();
        org.joda.time.DurationField durationField21 = chronology15.eras();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        long long33 = dateTimeField31.roundCeiling(0L);
        java.lang.String str34 = dateTimeField31.toString();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder39 = builder35.setLanguageTag("KR");
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale42 = new java.util.Locale("");
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale42.getScript();
        java.util.Locale.Builder builder45 = builder39.setLocale(locale42);
        int int46 = dateTimeField31.getMaximumShortTextLength(locale42);
        org.joda.time.DurationField durationField47 = dateTimeField31.getLeapDurationField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DateTimeField[year]" + "'", str34, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval10.getStart();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getEnd();
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableInterval10.isBefore(readableInstant13);
        org.joda.time.Chronology chronology15 = mutableInterval10.getChronology();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.Chronology chronology9 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = org.joda.time.YearMonth.parse("kor", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime.Property property12 = dateTime9.millisOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) dateTime9);
        org.joda.time.DateTime.Property property14 = dateTime9.weekOfWeekyear();
        java.util.Locale locale17 = new java.util.Locale("");
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate.Property property20 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property20.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        int int25 = dateTimeField23.get((long) 'u');
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = dateTimeField23.getAsText((long) 5, locale27);
        java.lang.String str29 = locale17.getDisplayVariant(locale27);
        java.lang.String str30 = locale27.getDisplayLanguage();
        java.lang.String str31 = locale27.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = property14.setCopy("French (France)", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"French (France)\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "70" + "'", str28, "70");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587" + "'", str30, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.roundHalfFloor(24332133632770L);
        long long12 = dateTimeField7.add(122L, (long) (-18994));
        boolean boolean14 = dateTimeField7.isLeap(315532801000L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 24330412800000L + "'", long9 == 24330412800000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-599392742399878L) + "'", long12 == (-599392742399878L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate16 = localDate4.minusYears(10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = new java.util.Locale("");
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = new java.util.Locale("");
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale20, locale22, locale23, locale24, locale26, locale28, locale29, locale30, locale32, locale34, locale35, locale36, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet44);
        boolean boolean46 = localDate4.equals((java.lang.Object) strList45);
        org.joda.time.LocalDate localDate48 = localDate4.withWeekyear(20);
        int int49 = localDate4.getDayOfYear();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        org.joda.time.ReadableInstant readableInstant53 = null;
        int int54 = property51.getDifference(readableInstant53);
        org.joda.time.LocalDate localDate55 = property51.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtCurrentTime(dateTimeZone62);
        boolean boolean64 = localDate55.equals((java.lang.Object) dateTime63);
        java.util.Date date65 = localDate55.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType66.getRangeDurationType();
        boolean boolean68 = localDate55.isSupported(dateTimeFieldType66);
        java.lang.String str69 = dateTimeFieldType66.toString();
        org.joda.time.LocalDate.Property property70 = localDate4.property(dateTimeFieldType66);
        org.joda.time.LocalDate localDate72 = localDate4.plusDays(999);
        org.joda.time.Interval interval73 = localDate72.toInterval();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 42 + "'", int49 == 42);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "weekyear" + "'", str69, "weekyear");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(interval73);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        int int16 = localDate5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.minutes();
        boolean boolean23 = localDate21.isSupported(durationFieldType22);
        org.joda.time.LocalDate localDate25 = localDate21.minusDays(57);
        org.joda.time.LocalDate localDate27 = localDate21.plusYears((int) (byte) 10);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        boolean boolean29 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate27.toDateTime(localTime30, dateTimeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.LocalDate localDate43 = localDate35.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfWeek();
        org.joda.time.LocalDate localDate46 = property44.addToCopy(10);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.lang.String str50 = dateTimeZone48.getName(10L);
        java.util.Locale locale54 = new java.util.Locale("70", "hi!");
        java.lang.String str55 = dateTimeZone48.getName((long) '4', locale54);
        org.joda.time.Interval interval56 = localDate46.toInterval(dateTimeZone48);
        org.joda.time.LocalDate localDate58 = localDate46.plusDays(19);
        int int59 = localDate46.getCenturyOfEra();
        org.joda.time.Chronology chronology60 = localDate46.getChronology();
        org.joda.time.DateTime dateTime61 = dateTime32.toDateTime(chronology60);
        org.joda.time.YearMonthDay yearMonthDay62 = dateTime32.toYearMonthDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2099 + "'", int16 == 2099);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+06:00" + "'", str50, "+06:00");
        org.junit.Assert.assertEquals(locale54.toString(), "70_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+06:00" + "'", str55, "+06:00");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate23 = localDate21.plusMonths(32772);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtStartOfDay();
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localDate23, (long) 15);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(0L, chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDate28.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        boolean boolean17 = dateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = interval21.withChronology(chronology22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        boolean boolean35 = interval23.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = interval23.toPeriod();
        org.joda.time.DateTime dateTime38 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 360240000);
        org.joda.time.LocalDate localDate39 = localDate4.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalDate localDate41 = localDate39.withYear(32770);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffset((long) 2022);
        org.joda.time.DateTime dateTime46 = localDate41.toDateTimeAtMidnight(dateTimeZone43);
        int int47 = localDate41.getDayOfMonth();
        org.joda.time.LocalDate.Property property48 = localDate41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder53 = builder51.setInstant((long) 32770);
        java.util.Locale locale57 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        java.util.Calendar.Builder builder58 = builder53.setLocale(locale57);
        java.util.Locale locale60 = new java.util.Locale("");
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale60.getScript();
        java.util.Calendar.Builder builder63 = builder53.setLocale(locale60);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property65 = localDate64.yearOfCentury();
        org.joda.time.LocalDate localDate66 = property65.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean70 = dateTimeZone69.isFixed();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone69);
        org.joda.time.DateTime dateTime72 = localDate66.toDateTimeAtStartOfDay(dateTimeZone69);
        org.joda.time.DateTime dateTime73 = dateTime72.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str75 = dateTimeFieldType74.getName();
        org.joda.time.DateTime.Property property76 = dateTime73.property(dateTimeFieldType74);
        org.joda.time.Interval interval77 = property76.toInterval();
        org.joda.time.DateTimeField dateTimeField78 = property76.getField();
        org.joda.time.DateTime dateTime80 = property76.addToCopy(5);
        org.joda.time.DateTime dateTime82 = dateTime80.withWeekyear(10);
        org.joda.time.DateTime.Property property83 = dateTime80.weekOfWeekyear();
        java.util.Locale locale87 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        int int88 = property83.getMaximumTextLength(locale87);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(locale87);
        java.lang.String str90 = locale60.getDisplayCountry(locale87);
        java.lang.String str91 = dateTimeField49.getAsShortText((-18994), locale60);
        java.lang.String str92 = locale60.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals(locale57.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "weekyear" + "'", str75, "weekyear");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertEquals(locale87.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(calendar89);
// flaky:         org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=1644572454355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=54,MILLISECOND=355,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-18994" + "'", str91, "-18994");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(1969);
        int int16 = dateTime13.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime13.withWeekOfWeekyear(34655543);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34655543 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        boolean boolean23 = dateTimeFormatter22.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter22.getParser();
        boolean boolean25 = dateTimeFormatter22.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter22.withDefaultYear(22596);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = dateTimeFormatter27.parseLocalTime("gregory");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone6);
        int int11 = dateTimeZone6.getOffsetFromLocal((long) 360240000);
        long long13 = dateTimeZone6.previousTransition(2678400000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21600000 + "'", int11 == 21600000);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2678400000L + "'", long13 == 2678400000L);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDate11.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.LocalDate localDate19 = localDate11.plusMonths((int) (short) 1);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate19.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.Interval interval30 = localDate8.toInterval(dateTimeZone27);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.toLanguageTag();
        java.util.Locale locale37 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        java.lang.String str38 = locale32.getDisplayLanguage(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime47.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str50 = dateTimeFieldType49.getName();
        org.joda.time.DateTime.Property property51 = dateTime48.property(dateTimeFieldType49);
        org.joda.time.Interval interval52 = property51.toInterval();
        org.joda.time.DateTimeField dateTimeField53 = property51.getField();
        long long56 = dateTimeField53.add((long) (byte) 10, (-1));
        long long59 = dateTimeField53.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeField53.getAsShortText(70, locale61);
        org.joda.time.DurationField durationField63 = dateTimeField53.getDurationField();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str68 = dateTimeZone66.getName(10L);
        java.util.Locale locale72 = new java.util.Locale("70", "hi!");
        java.lang.String str73 = dateTimeZone66.getName((long) '4', locale72);
        java.lang.String str74 = locale72.toLanguageTag();
        java.lang.String str75 = dateTimeField53.getAsShortText((-360L), locale72);
        java.lang.String str76 = locale37.getDisplayName(locale72);
        boolean boolean77 = locale72.hasExtensions();
        java.lang.String str78 = locale72.getScript();
        java.lang.String str79 = dateTimeZone27.getName((long) (byte) 10, locale72);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-03-11" + "'", str20, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr" + "'", str33, "fr");
        org.junit.Assert.assertEquals(locale37.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "French" + "'", str38, "French");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "weekyear" + "'", str50, "weekyear");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-31449599990L) + "'", long56 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 315705600000L + "'", long59 == 315705600000L);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "70" + "'", str62, "70");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+06:00" + "'", str68, "+06:00");
        org.junit.Assert.assertEquals(locale72.toString(), "70_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+06:00" + "'", str73, "+06:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "und" + "'", str74, "und");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970" + "'", str75, "1970");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "5 jun 798307 11:57:00 gmt (PT0S,1969)" + "'", str76, "5 jun 798307 11:57:00 gmt (PT0S,1969)");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+06:00" + "'", str79, "+06:00");
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDate5.getFieldTypes();
        org.joda.time.LocalDate localDate9 = localDate5.plusDays(17724494);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        int int14 = dateTime11.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDate2.getFields();
        int int12 = localDate2.getYear();
        int int13 = localDate2.size();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtMidnight(dateTimeZone14);
        int int16 = dateTime15.getMonthOfYear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 32770);
        java.util.Calendar calendar25 = builder24.build();
        boolean boolean27 = calendar25.after((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) 'u');
        boolean boolean33 = calendar25.after((java.lang.Object) localDate30);
        boolean boolean34 = dateTimeZone18.equals((java.lang.Object) boolean33);
        java.util.Locale locale39 = new java.util.Locale("hi!", "2022-02-11", "2022-02-11");
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = dateTimeZone18.getName(0L, locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withLocale(locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter6.withPivotYear(86397);
        org.joda.time.Chronology chronology45 = dateTimeFormatter6.getChronolgy();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_2022-02-11_2022-02-11");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+06:00" + "'", str41, "+06:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(chronology45);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.setTimeInMillis((-1L));
        calendar3.set((int) (byte) 1, 17724494, 935, 360240000, 21597);
        java.util.TimeZone timeZone14 = calendar3.getTimeZone();
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth16.toInterval(dateTimeZone17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth16.getFieldTypes();
        org.joda.time.YearMonth.Property property20 = yearMonth16.year();
        java.lang.String str21 = property20.toString();
        org.joda.time.YearMonth yearMonth22 = property20.getYearMonth();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = yearMonth24.toInterval(dateTimeZone25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonth24.getFieldTypes();
        org.joda.time.YearMonth.Property property28 = yearMonth24.year();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = locale29.getCountry();
        int int31 = property28.getMaximumShortTextLength(locale29);
        java.lang.String str32 = property20.getAsShortText(locale29);
        org.joda.time.YearMonth yearMonth34 = property20.setCopy(6);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.withYear(16);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.plusYears((int) (short) 10);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.withYear(1969);
        boolean boolean41 = calendar3.before((java.lang.Object) yearMonth40);
        org.joda.time.YearMonth.Property property42 = yearMonth40.monthOfYear();
        java.lang.String str43 = property42.getAsShortText();
        java.lang.String str44 = property42.getName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=17724494,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=935,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=360240000,MINUTE=21597,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[year]" + "'", str21, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FR" + "'", str30, "FR");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970" + "'", str32, "1970");
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Jan" + "'", str43, "Jan");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "monthOfYear" + "'", str44, "monthOfYear");
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 2000);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(32772);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 32772);
        org.joda.time.DateTime.Property property14 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime11.plusYears(1970);
        long long17 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime11.plusMinutes(99);
        org.joda.time.DateTime dateTime20 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property23.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str26 = property23.getAsString();
        org.joda.time.LocalDate localDate27 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate28 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        boolean boolean35 = localDate33.isSupported(durationFieldType34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        boolean boolean46 = dateTime44.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = interval50.withChronology(chronology51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property63 = dateTime62.year();
        boolean boolean64 = interval52.contains((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Period period65 = interval52.toPeriod();
        org.joda.time.DateTime dateTime67 = dateTime44.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 360240000);
        org.joda.time.LocalDate localDate68 = localDate33.plus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.LocalDate localDate70 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 56170);
        boolean boolean71 = localDate1.isBefore((org.joda.time.ReadablePartial) localDate28);
        int int72 = localDate1.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 34854681L + "'", long17 == 34854681L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "22" + "'", str26, "22");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        int int25 = dateTime20.getHourOfDay();
        boolean boolean26 = dateTime20.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime20.toYearMonthDay();
        org.joda.time.DateTime dateTime29 = dateTime20.minus(1050308164619000L);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(20);
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int36 = dateTimeZone34.getOffsetFromLocal((long) 6);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime31.toMutableDateTime(dateTimeZone34);
        long long40 = dateTimeZone34.convertLocalToUTC(0L, true);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21600000 + "'", int36 == 21600000);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-21600000L) + "'", long40 == (-21600000L));
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        long long11 = dateTime7.getMillis();
        int int12 = dateTime7.getWeekyear();
        org.joda.time.DateTime.Property property13 = dateTime7.yearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        java.util.Locale locale18 = dateTimeFormatter16.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter16.withPivotYear((int) 'a');
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property23.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        int int28 = dateTimeField26.get((long) 'u');
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = dateTimeField26.getAsText((long) 5, locale30);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeField26.getAsShortText(100, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter16.withLocale(locale33);
        java.lang.String str36 = locale33.getDisplayLanguage();
        java.lang.String str37 = locale33.getDisplayLanguage();
        int int38 = property13.getMaximumShortTextLength(locale33);
        int int39 = property13.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-21600000L) + "'", long11 == (-21600000L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(dateTimeZone17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 70 + "'", int28 == 70);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "70" + "'", str31, "70");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "French" + "'", str36, "French");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "French" + "'", str37, "French");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.DateTime.Property property27 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = property27.roundFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime28.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTime dateTime38 = localDate35.toDateTimeAtMidnight(dateTimeZone37);
        int int39 = dateTime38.getMonthOfYear();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        long long45 = dateTimeZone30.getMillisKeepLocal(dateTimeZone41, (long) 7);
        org.joda.time.DateTime dateTime46 = dateTime14.toDateTime(dateTimeZone41);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.DateTime dateTime49 = property47.withMinimumValue();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean56 = dateTimeZone55.isFixed();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone55);
        org.joda.time.DateTime dateTime58 = localDate52.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime59 = dateTime58.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str61 = dateTimeFieldType60.getName();
        org.joda.time.DateTime.Property property62 = dateTime59.property(dateTimeFieldType60);
        org.joda.time.DateTime dateTime63 = property62.roundFloorCopy();
        org.joda.time.DateTime.Property property64 = dateTime63.dayOfWeek();
        org.joda.time.DateTime dateTime65 = property64.getDateTime();
        boolean boolean66 = dateTime49.equals((java.lang.Object) dateTime65);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 7L + "'", long45 == 7L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "weekyear" + "'", str61, "weekyear");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = yearMonth2.toInterval(dateTimeZone3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonth2.getFieldTypes();
        org.joda.time.YearMonth.Property property6 = yearMonth2.year();
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean18 = period16.isSupported(durationFieldType17);
        org.joda.time.YearMonth yearMonth20 = yearMonth8.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 32770);
        org.joda.time.YearMonth yearMonth21 = yearMonth2.minus((org.joda.time.ReadablePeriod) period16);
        java.lang.String str23 = yearMonth21.toString("2022-03-11");
        boolean boolean24 = locale0.equals((java.lang.Object) str23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-03-11" + "'", str23, "2022-03-11");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(localTime13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.DateTime.Property property27 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = property27.roundFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime28.getZone();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = dateTime14.withZone(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property34.getDifference(readableInstant36);
        org.joda.time.LocalDate localDate38 = property34.withMaximumValue();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        int int41 = localDate40.getYearOfEra();
        int int42 = localDate40.getYearOfCentury();
        int[] intArray43 = localDate40.getValues();
        org.joda.time.LocalDate localDate45 = localDate40.withYearOfEra(28800000);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone48);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateTime dateTime53 = localDate50.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean58 = dateTimeZone57.isFixed();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int62 = dateTimeZone60.getOffsetFromLocal((long) 6);
        long long64 = dateTimeZone57.getMillisKeepLocal(dateTimeZone60, (long) 10);
        org.joda.time.DateTime dateTime65 = dateTime55.withZone(dateTimeZone60);
        org.joda.time.DateTime.Property property66 = dateTime65.weekOfWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime65.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime70 = dateTime65.plusMillis(6);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property72 = localDate71.yearOfCentury();
        org.joda.time.LocalDate localDate73 = property72.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean77 = dateTimeZone76.isFixed();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone76);
        org.joda.time.DateTime dateTime79 = localDate73.toDateTimeAtStartOfDay(dateTimeZone76);
        boolean boolean80 = dateTime79.isBeforeNow();
        int int81 = dateTime79.getDayOfMonth();
        org.joda.time.DateTime dateTime83 = dateTime79.minusYears(48);
        int int84 = dateTime65.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = dateTime65.withMillis((long) 86397);
        org.joda.time.DateTime dateTime88 = dateTime65.withYear(1980);
        org.joda.time.DateTime.Property property89 = dateTime88.dayOfMonth();
        org.joda.time.DateTime dateTime90 = localDate40.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean91 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21600000 + "'", int62 == 21600000);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 11 + "'", int81 == 11);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        boolean boolean7 = interval5.containsNow();
        org.joda.time.DateTime dateTime8 = interval5.getStart();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 20, (long) 86397);
        boolean boolean12 = interval5.isBefore((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTime dateTime13 = interval11.getStart();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = yearMonth15.toInterval(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Interval interval19 = interval17.withPeriodAfterStart(readablePeriod18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        java.util.Date date28 = new java.util.Date((int) (short) 0, (-1), (-292275054), (int) (byte) 10, (int) 'u');
        boolean boolean29 = period21.equals((java.lang.Object) (-292275054));
        org.joda.time.Period period30 = period21.toPeriod();
        org.joda.time.Interval interval31 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = period30.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod33 = period30.toMutablePeriod();
        org.joda.time.Period period34 = period30.toPeriod();
        java.lang.String str35 = period34.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Jun 05 11:57:00 UTC 798307");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0S" + "'", str35, "PT0S");
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        java.lang.Object obj17 = null;
        boolean boolean18 = interval16.equals(obj17);
        org.joda.time.MutableInterval mutableInterval19 = interval16.toMutableInterval();
        boolean boolean21 = mutableInterval19.isAfter((-9223313660493402616L));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        int int8 = property5.getMaximumValue();
        int int9 = property5.getMinimumValue();
        org.joda.time.YearMonth yearMonth11 = property5.addToCopy(11);
        java.lang.String str12 = property5.getAsText();
        java.lang.String str13 = property5.getName();
        java.lang.String str14 = property5.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "year" + "'", str13, "year");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[year]" + "'", str14, "Property[year]");
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        java.util.Date date5 = new java.util.Date(25, 79, 56429, 100, 1957);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 01 12:37:00 UTC 2086");
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval6.toMutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        boolean boolean16 = mutableInterval7.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Interval interval18 = interval14.gap(readableInterval17);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = yearMonth21.toInterval(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Interval interval25 = interval23.withPeriodAfterStart(readablePeriod24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        boolean boolean29 = interval25.contains((long) 2);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = yearMonth31.toInterval(dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Interval interval35 = interval33.withPeriodAfterStart(readablePeriod34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval35.toPeriod(periodType36);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.Period period39 = interval25.toPeriod(periodType38);
        boolean boolean40 = mutableInterval19.isAfter((org.joda.time.ReadableInterval) interval25);
        boolean boolean42 = mutableInterval19.isAfter(1050308164619000L);
        long long43 = mutableInterval19.getStartMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-21600000L) + "'", long43 == (-21600000L));
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        boolean boolean17 = dateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = interval21.withChronology(chronology22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        boolean boolean35 = interval23.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = interval23.toPeriod();
        org.joda.time.DateTime dateTime38 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 360240000);
        org.joda.time.LocalDate localDate39 = localDate4.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalDate localDate41 = localDate39.withYear(32770);
        org.joda.time.DateMidnight dateMidnight42 = localDate41.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        boolean boolean49 = localDate47.isSupported(durationFieldType48);
        org.joda.time.LocalDate.Property property50 = localDate47.centuryOfEra();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        long long60 = property50.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime.Property property61 = dateTime59.secondOfMinute();
        org.joda.time.DateTime dateTime63 = property61.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime64 = dateTime63.toDateTimeISO();
        int int65 = dateTime64.getEra();
        int int66 = dateMidnight42.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTime dateTime16 = property12.addToCopy(5);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear(10);
        org.joda.time.DateTime.Property property19 = dateTime16.weekOfWeekyear();
        java.util.Locale locale23 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        int int24 = property19.getMaximumTextLength(locale23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale23);
        calendar25.setTimeInMillis(5076000000L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale23.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=5076000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = property24.setCopy("FR");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"FR\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minusMonths((int) (short) 1);
        org.joda.time.YearMonth.Property property6 = yearMonth1.year();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        int int8 = property6.getMaximumShortTextLength(locale7);
        java.lang.String str9 = property6.getAsShortText();
        org.joda.time.YearMonth yearMonth11 = property6.setCopy((int) (byte) 100);
        org.joda.time.YearMonth yearMonth13 = property6.setCopy(796407);
        java.lang.String str14 = property6.toString();
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth16.toInterval(dateTimeZone17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth16.getFieldTypes();
        org.joda.time.YearMonth.Property property20 = yearMonth16.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = yearMonth16.toString(dateTimeFormatter21);
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = yearMonth24.toInterval(dateTimeZone25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonth24.getFieldTypes();
        org.joda.time.YearMonth.Property property28 = yearMonth24.year();
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = yearMonth32.toInterval(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Interval interval36 = interval34.withPeriodAfterStart(readablePeriod35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = interval36.toPeriod(periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean40 = period38.isSupported(durationFieldType39);
        org.joda.time.YearMonth yearMonth42 = yearMonth30.withPeriodAdded((org.joda.time.ReadablePeriod) period38, 32770);
        org.joda.time.YearMonth yearMonth43 = yearMonth24.minus((org.joda.time.ReadablePeriod) period38);
        boolean boolean44 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Chronology chronology45 = yearMonth43.getChronology();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekOfWeekyear();
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Interval interval52 = yearMonth50.toInterval(dateTimeZone51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = yearMonth50.getFieldTypes();
        org.joda.time.YearMonth.Property property54 = yearMonth50.year();
        java.lang.String str55 = property54.toString();
        org.joda.time.YearMonth yearMonth56 = property54.getYearMonth();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = property54.getAsText(locale57);
        java.util.Locale locale60 = locale57.stripExtensions();
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = dateTimeField47.getAsShortText(63399288, locale60);
        java.lang.String str63 = locale60.getISO3Country();
        int int64 = property6.getMaximumShortTextLength(locale60);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[year]" + "'", str14, "Property[year]");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01" + "'", str22, "1970-01");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Property[year]" + "'", str55, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "63399288" + "'", str62, "63399288");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ITA" + "'", str63, "ITA");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property1.getFieldType();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = locale8.stripExtensions();
        int int11 = property1.getMaximumTextLength(locale8);
        org.joda.time.DateTimeField dateTimeField12 = property1.getField();
        int int13 = dateTimeField12.getMinimumValue();
        boolean boolean15 = dateTimeField12.isLeap((-58790469600000L));
        long long18 = dateTimeField12.add(309303202800000L, (long) 1980);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FR" + "'", str9, "FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 371785954800000L + "'", long18 == 371785954800000L);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        java.util.Locale locale1 = new java.util.Locale("10-Dec-1969 6:00:00 PM");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str13 = dateTimeFieldType12.getName();
        org.joda.time.DateTime.Property property14 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        long long19 = dateTimeField16.add((long) (byte) 10, (-1));
        long long22 = dateTimeField16.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeField16.getAsShortText(70, locale24);
        org.joda.time.DurationField durationField26 = dateTimeField16.getDurationField();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getName(10L);
        java.util.Locale locale35 = new java.util.Locale("70", "hi!");
        java.lang.String str36 = dateTimeZone29.getName((long) '4', locale35);
        java.lang.String str37 = locale35.toLanguageTag();
        java.lang.String str38 = dateTimeField16.getAsShortText((-360L), locale35);
        java.util.Set<java.lang.Character> charSet39 = locale35.getExtensionKeys();
        java.lang.String str40 = locale1.getDisplayCountry(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = locale1.getUnicodeLocaleType("11.02.2099 00:00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 11.02.2099 00:00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "10-dec-1969 6:00:00 pm");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weekyear" + "'", str13, "weekyear");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-31449599990L) + "'", long19 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 315705600000L + "'", long22 == 315705600000L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "70" + "'", str25, "70");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+06:00" + "'", str31, "+06:00");
        org.junit.Assert.assertEquals(locale35.toString(), "70_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+06:00" + "'", str36, "+06:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970" + "'", str38, "1970");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        java.util.Date date3 = new java.util.Date(56156, (int) '#', 42);
        int int4 = date3.getTimezoneOffset();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 11 00:00:00 UTC 58059");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(16);
        int int12 = property5.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth14 = property5.setCopy("era");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"era\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate16 = localDate4.minusYears(10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = new java.util.Locale("");
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = new java.util.Locale("");
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale20, locale22, locale23, locale24, locale26, locale28, locale29, locale30, locale32, locale34, locale35, locale36, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet44);
        boolean boolean46 = localDate4.equals((java.lang.Object) strList45);
        org.joda.time.LocalDate localDate48 = localDate4.withWeekyear(20);
        org.joda.time.LocalDate.Property property49 = localDate4.dayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate4.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = property2.getDifference(readableInstant4);
        org.joda.time.LocalDate localDate6 = property2.withMaximumValue();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths(32772);
        org.joda.time.LocalDate localDate14 = localDate6.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate.Property property17 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        long long23 = dateTimeField20.addWrapField((long) 2, (int) (byte) 10);
        int int25 = dateTimeField20.getMaximumValue((long) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField20.getType();
        boolean boolean27 = localDate13.isSupported(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getDurationType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate.Property property33 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property33.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str36 = property33.getAsString();
        org.joda.time.LocalDate localDate37 = property33.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone40);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.minutes();
        boolean boolean44 = localDate42.isSupported(durationFieldType43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime53.toMutableDateTime();
        boolean boolean55 = dateTime53.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = interval59.withChronology(chronology60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property63 = localDate62.yearOfCentury();
        org.joda.time.LocalDate localDate64 = property63.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone67);
        org.joda.time.DateTime dateTime70 = localDate64.toDateTimeAtStartOfDay(dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime70.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property72 = dateTime71.year();
        boolean boolean73 = interval61.contains((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Period period74 = interval61.toPeriod();
        org.joda.time.DateTime dateTime76 = dateTime53.withPeriodAdded((org.joda.time.ReadablePeriod) period74, 360240000);
        org.joda.time.LocalDate localDate77 = localDate42.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.LocalDate localDate78 = localDate37.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Chronology chronology79 = localDate37.getChronology();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType26.getField(chronology79);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((-31474424657L), chronology79);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 315532800002L + "'", long23 == 315532800002L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "22" + "'", str36, "22");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(21597772);
        long long4 = dateTimeZone1.convertLocalToUTC((-1L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-21597773L) + "'", long4 == (-21597773L));
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.util.Calendar calendar11 = dateTime8.toCalendar(locale9);
        boolean boolean12 = calendar11.isWeekDateSupported();
        int int14 = calendar11.getActualMaximum((int) (byte) 0);
        java.lang.String str15 = calendar11.getCalendarType();
        calendar11.clear(16);
        boolean boolean18 = calendar11.isWeekDateSupported();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        org.joda.time.DateTime dateTime11 = interval5.getEnd();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonth13.toInterval(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonth13.getFieldTypes();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.withYear((int) (short) 100);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        boolean boolean28 = interval24.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval29 = interval24.toMutableInterval();
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonth33.toInterval(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Interval interval37 = interval35.withPeriodAfterStart(readablePeriod36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean41 = period39.isSupported(durationFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth31.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 32770);
        org.joda.time.PeriodType periodType44 = period39.getPeriodType();
        boolean boolean45 = interval24.equals((java.lang.Object) period39);
        org.joda.time.YearMonth yearMonth46 = yearMonth18.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Interval interval47 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime48 = interval47.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minus((-1632961261000L));
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        int int4 = localDate3.getMonthOfYear();
        java.util.Locale locale7 = new java.util.Locale("");
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        int int15 = dateTimeField13.get((long) 'u');
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.lang.String str18 = dateTimeField13.getAsText((long) 5, locale17);
        java.lang.String str19 = locale7.getDisplayVariant(locale17);
        java.lang.String str20 = locale17.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localDate3.toString("10 Dec 1969 18:00:00 GMT", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "70" + "'", str18, "70");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese" + "'", str20, "Chinese");
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronolgy();
        org.joda.time.DurationField durationField24 = chronology23.halfdays();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        int int27 = localDate25.getYear();
        org.joda.time.LocalDate localDate29 = localDate25.minusWeeks(456809);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate37.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = localDate34.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str56 = dateTimeFieldType55.getName();
        org.joda.time.DateTime.Property property57 = dateTime54.property(dateTimeFieldType55);
        org.joda.time.DateTime dateTime58 = property57.roundFloorCopy();
        org.joda.time.DateTime.Property property59 = dateTime58.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime58.getZone();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone63);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.DateTime dateTime68 = localDate65.toDateTimeAtMidnight(dateTimeZone67);
        int int69 = dateTime68.getMonthOfYear();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.DateTime dateTime72 = dateTime68.toDateTime(dateTimeZone71);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone71);
        long long75 = dateTimeZone60.getMillisKeepLocal(dateTimeZone71, (long) 7);
        org.joda.time.DateTime dateTime76 = dateTime44.toDateTime(dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight77 = localDate25.toDateMidnight(dateTimeZone71);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "weekyear" + "'", str56, "weekyear");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 7L + "'", long75 == 7L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime32.year();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.DateTime.Property property46 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime49 = dateTime32.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillis((long) 32772);
        org.joda.time.DateTime dateTime61 = dateTime59.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime63 = dateTime61.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = interval67.withChronology(chronology68);
        org.joda.time.Duration duration70 = interval67.toDuration();
        org.joda.time.DateTime dateTime71 = dateTime63.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime73 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) 'u');
        int int74 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime73);
        java.util.Locale locale79 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        java.lang.String str80 = dateTimeZone20.getName((long) '#', locale79);
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone20);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 21600000 + "'", int74 == 21600000);
        org.junit.Assert.assertEquals(locale79.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+06:00" + "'", str80, "+06:00");
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate22.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.getName();
        org.joda.time.DateTime.Property property45 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime46.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTime dateTime56 = localDate53.toDateTimeAtMidnight(dateTimeZone55);
        int int57 = dateTime56.getMonthOfYear();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime(dateTimeZone59);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        long long63 = dateTimeZone48.getMillisKeepLocal(dateTimeZone59, (long) 7);
        org.joda.time.DateTime dateTime64 = dateTime32.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime11.toDateTime(dateTimeZone59);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone59);
        org.joda.time.LocalDate localDate68 = localDate66.plusWeeks(365);
        org.joda.time.DateTime dateTime69 = localDate66.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 7L + "'", long63 == 7L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        calendar3.roll(0, false);
        calendar3.setWeekDate(1969, (int) '4', 6);
        calendar3.set(86397, 21600000, 693);
        int int23 = calendar3.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(24889);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24889 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=54015122066432770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1713641,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=28,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder10 = builder6.setDate(0, (-3599), 22);
        java.util.Calendar.Builder builder14 = builder10.setDate(2012, 479, (-40176));
        java.util.Calendar calendar15 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder17 = builder10.setInstant(1644572327026L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-886291200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1941,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(56170, 2017);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 2017");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setRegion("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ISOChronology[UTC] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.withHourOfDay(15);
        org.joda.time.DateMidnight dateMidnight27 = dateTime20.toDateMidnight();
        org.joda.time.DateTime.Property property28 = dateTime20.secondOfMinute();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime9.minusDays(32772);
        org.joda.time.DateTime.Property property27 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        org.joda.time.DateTime dateTime30 = dateTime28.minusYears((-11865376));
        org.joda.time.DateTime dateTime32 = dateTime28.withMinuteOfHour(28);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.Chronology chronology23 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int25 = dateTimeFormatter24.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter24.withDefaultYear(56171);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime38.year();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str51 = dateTimeFieldType50.getName();
        org.joda.time.DateTime.Property property52 = dateTime49.property(dateTimeFieldType50);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime55 = dateTime38.minusDays(32772);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.plus(readableDuration56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime55.getZone();
        java.lang.String str60 = dateTimeZone58.getNameKey((long) 100);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(681630699657600000L, dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter27.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology63 = dateTimeFormatter62.getChronology();
        org.joda.time.Chronology chronology64 = dateTimeFormatter62.getChronolgy();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "weekyear" + "'", str51, "weekyear");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNull(chronology63);
        org.junit.Assert.assertNull(chronology64);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        boolean boolean23 = dateTime22.isBeforeNow();
        int int24 = dateTime22.getDayOfYear();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = dateTime22.toString("deu");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 6);
        long long10 = dateTimeZone3.getMillisKeepLocal(dateTimeZone6, (long) 10);
        org.joda.time.Interval interval11 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate14 = localDate0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate0.dayOfWeek();
        org.joda.time.DateTime dateTime16 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) 'u');
        java.lang.String str22 = localDate19.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getName(10L);
        java.util.Locale locale32 = new java.util.Locale("70", "hi!");
        java.lang.String str33 = dateTimeZone26.getName((long) '4', locale32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(12L, dateTimeZone26);
        long long37 = dateTimeZone26.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localDate19.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.Interval interval40 = localDate0.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21600000 + "'", int8 == 21600000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11" + "'", str22, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+06:00" + "'", str28, "+06:00");
        org.junit.Assert.assertEquals(locale32.toString(), "70_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+06:00" + "'", str33, "+06:00");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-31467224657L) + "'", long37 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale4 = new java.util.Locale("yearOfCentury");
        boolean boolean5 = dateTimeZone2.equals((java.lang.Object) locale4);
        java.util.Locale locale8 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "FRA");
        java.lang.String str9 = locale4.getDisplayName(locale8);
        java.lang.String str10 = locale0.getDisplayName(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals(locale4.toString(), "yearofcentury");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "5 jun 798307 11:57:00 gmt_FRA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearofcentury" + "'", str9, "yearofcentury");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        boolean boolean17 = interval5.contains((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        org.joda.time.DateTime.Property property19 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundCeilingCopy();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.withLaterOffsetAtOverlap();
        int int14 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime13.minus((-259200000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime13.withDate(11, 238, 360240000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 238 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getAsShortText();
        int int8 = property5.getMinimumValueOverall();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getDisplayCountry();
        int int11 = property5.getMaximumTextLength(locale9);
        java.lang.String str12 = property5.getAsShortText();
        org.joda.time.YearMonth yearMonth14 = property5.addWrapFieldToCopy((int) (byte) 1);
        java.lang.String str15 = property5.getAsString();
        java.lang.String str16 = property5.getAsString();
        int int17 = property5.get();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970" + "'", str7, "1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-292275054) + "'", int8 == (-292275054));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusWeeks(21600000);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(3);
        int int19 = dateTime18.getDayOfWeek();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = localDate22.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property31 = localDate22.dayOfMonth();
        int int32 = localDate22.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean34 = localDate22.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDate localDate36 = localDate22.plusMonths(86397);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 10);
        org.joda.time.Interval interval48 = localDate38.toInterval(dateTimeZone40);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = dateTime57.getMonthOfYear();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime(dateTimeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property63 = localDate62.yearOfCentury();
        org.joda.time.LocalDate localDate64 = property63.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone67);
        org.joda.time.DateTime dateTime70 = localDate64.toDateTimeAtStartOfDay(dateTimeZone67);
        boolean boolean71 = dateTime70.isBeforeNow();
        int int72 = dateTime70.getDayOfYear();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime.Property property74 = dateTime61.minuteOfDay();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property76 = localDate75.yearOfCentury();
        org.joda.time.LocalDate localDate77 = property76.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean81 = dateTimeZone80.isFixed();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone80);
        org.joda.time.DateTime dateTime83 = localDate77.toDateTimeAtStartOfDay(dateTimeZone80);
        org.joda.time.DateTime dateTime84 = dateTime83.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str86 = dateTimeFieldType85.getName();
        org.joda.time.DateTime.Property property87 = dateTime84.property(dateTimeFieldType85);
        org.joda.time.DateTime dateTime89 = dateTime61.withField(dateTimeFieldType85, 1978);
        org.joda.time.LocalDate.Property property90 = localDate37.property(dateTimeFieldType85);
        boolean boolean91 = localDate22.isSupported(dateTimeFieldType85);
        org.joda.time.DateTime dateTime93 = dateTime18.withField(dateTimeFieldType85, 13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth94 = new org.joda.time.YearMonth((java.lang.Object) dateTimeFieldType85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 42 + "'", int72 == 42);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "weekyear" + "'", str86, "weekyear");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property9.getDifference(readableInstant11);
        org.joda.time.LocalDate localDate13 = property9.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        boolean boolean22 = localDate13.equals((java.lang.Object) dateTime21);
        java.util.Date date23 = localDate13.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        boolean boolean26 = localDate13.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localDate31.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.LocalDate localDate43 = localDate31.minusYears(10);
        boolean boolean44 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate47 = localDate43.withFieldAdded(durationFieldType45, 70);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTime();
        org.joda.time.Chronology chronology58 = dateTime56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.monthOfYear();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property62.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = localDate63.toDateTimeAtStartOfDay(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str72 = dateTimeFieldType71.getName();
        org.joda.time.DateTime.Property property73 = dateTime70.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = property73.roundFloorCopy();
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime74.getZone();
        java.util.TimeZone timeZone77 = dateTimeZone76.toTimeZone();
        org.joda.time.Chronology chronology78 = chronology58.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfHalfday();
        org.joda.time.DurationField durationField80 = chronology78.seconds();
        boolean boolean81 = durationFieldType45.isSupported(chronology78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter6.withChronology(chronology78);
        org.joda.time.DateTimeField dateTimeField83 = chronology78.dayOfYear();
        org.joda.time.DateTimeField dateTimeField84 = chronology78.secondOfMinute();
        boolean boolean86 = dateTimeField84.isLeap(2099L);
        int int88 = dateTimeField84.getMaximumValue(619399353600000L);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyear" + "'", str72, "weekyear");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 59 + "'", int88 == 59);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField7 = durationFieldType1.getField(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(315532800002L, chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int19 = dateTimeZone17.getOffset((long) 2022);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 32770, dateTimeZone17);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str32 = dateTimeFieldType31.getName();
        org.joda.time.DateTime.Property property33 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime34.getZone();
        long long38 = dateTimeZone17.getMillisKeepLocal(dateTimeZone36, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 10);
        long long49 = dateTimeZone17.getMillisKeepLocal(dateTimeZone43, (long) 1970);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter12.withZone(dateTimeZone43);
        java.lang.String str52 = dateTimeZone43.getShortName((long) 796407);
        org.joda.time.Chronology chronology53 = chronology4.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.secondOfDay();
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.lang.String str57 = locale56.getCountry();
        java.lang.String str58 = dateTimeField54.getAsText(34599808L, locale56);
        int int60 = dateTimeField54.getMinimumValue((-4006L));
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property62.getLocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate67 = localDate63.minusYears(11);
        org.joda.time.LocalDate.Property property68 = localDate67.year();
        org.joda.time.LocalDate localDate69 = property68.roundCeilingCopy();
        org.joda.time.LocalDate localDate71 = localDate69.withYearOfEra((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean75 = dateTimeZone74.isFixed();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone74);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.minutes();
        boolean boolean78 = localDate76.isSupported(durationFieldType77);
        org.joda.time.LocalDate localDate80 = localDate76.minusDays(57);
        int[] intArray81 = localDate76.getValues();
        int int82 = dateTimeField54.getMinimumValue((org.joda.time.ReadablePartial) localDate71, intArray81);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21600000 + "'", int19 == 21600000);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "weekyear" + "'", str32, "weekyear");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9L + "'", long38 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1970L + "'", long49 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+06:00" + "'", str52, "+06:00");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "KR" + "'", str57, "KR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "56199" + "'", str58, "56199");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        calendar3.clear(0);
        org.joda.time.YearMonth yearMonth8 = org.joda.time.YearMonth.fromCalendarFields(calendar3);
        calendar3.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            calendar3.clear(39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = yearMonth7.get(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getDurationType();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1969 + "'", int9 == 1969);
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        boolean boolean17 = dateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = interval21.withChronology(chronology22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        boolean boolean35 = interval23.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = interval23.toPeriod();
        org.joda.time.DateTime dateTime38 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 360240000);
        org.joda.time.LocalDate localDate39 = localDate4.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval40 = localDate4.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.DateTime dateTime43 = dateTime41.plus((-21599958L));
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int52 = dateTimeZone50.getOffsetFromLocal((long) 6);
        long long54 = dateTimeZone47.getMillisKeepLocal(dateTimeZone50, (long) 10);
        org.joda.time.Interval interval55 = localDate45.toInterval(dateTimeZone47);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        org.joda.time.LocalDate localDate58 = property57.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone61);
        org.joda.time.DateTime dateTime64 = localDate58.toDateTimeAtStartOfDay(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime64.toMutableDateTime();
        boolean boolean66 = dateTime64.isAfterNow();
        int int67 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime44.toMutableDateTime(dateTimeZone47);
        org.joda.time.DateTime.Property property70 = dateTime44.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = property70.setCopy(56268539);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56268539 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 21600000 + "'", int52 == 21600000);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 21600000 + "'", int67 == 21600000);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str31 = dateTimeFieldType30.getName();
        org.joda.time.DateTime.Property property32 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = property32.roundFloorCopy();
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime33.getZone();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology37 = chronology15.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField38 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology15.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTime dateTime14 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) 32772);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime20 = dateTime16.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter3.withChronology(chronology21);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronolgy();
        java.util.Locale locale27 = new java.util.Locale("3 Apr 1918 23:38:59 GMT", "1 Jan 1970 00:00:00 GMT");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter23.withLocale(locale27);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) 100);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int39 = dateTimeZone37.getOffsetFromLocal((long) 6);
        long long41 = dateTimeZone34.getMillisKeepLocal(dateTimeZone37, (long) 10);
        org.joda.time.Interval interval42 = localDate32.toInterval(dateTimeZone34);
        org.joda.time.DateTime dateTime43 = localDate31.toDateTimeAtMidnight(dateTimeZone34);
        java.lang.String str44 = dateTimeZone34.toString();
        long long46 = dateTimeZone34.nextTransition((long) 0);
        long long48 = dateTimeZone34.previousTransition((long) '4');
        org.joda.time.DateTime dateTime49 = localDate30.toDateTimeAtStartOfDay(dateTimeZone34);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleKeys();
        java.lang.String str53 = dateTimeZone34.getShortName((long) 1970, locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter28.withLocale(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter28.withDefaultYear(6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth57 = org.joda.time.YearMonth.parse("Jan 1, 1970 12:00:32 AM", dateTimeFormatter56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals(locale27.toString(), "3 apr 1918 23:38:59 gmt_1 JAN 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21600000 + "'", int39 == 21600000);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+06:00" + "'", str44, "+06:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+06:00" + "'", str53, "+06:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, 2012, 1978, 1972, 56360);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(4140, (-46800000), 1978, 25, (int) (byte) 0, 0, (-1853), chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfWeek();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.DateMidnight dateMidnight23 = localDate22.toDateMidnight();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate.Property property26 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property26.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField29 = property26.getField();
        int int31 = dateTimeField29.get((long) 'u');
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        int int35 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDate34);
        boolean boolean36 = localDate22.isAfter((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property47 = dateTime46.year();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime56.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str59 = dateTimeFieldType58.getName();
        org.joda.time.DateTime.Property property60 = dateTime57.property(dateTimeFieldType58);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime63 = dateTime46.minusDays(32772);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.plus(readableDuration64);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime63.getZone();
        org.joda.time.DateMidnight dateMidnight67 = localDate34.toDateMidnight(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = dateTime19.withZoneRetainFields(dateTimeZone66);
        int int69 = dateTime19.getMillisOfSecond();
        int int70 = dateTime19.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 99 + "'", int35 == 99);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekyear" + "'", str59, "weekyear");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 772 + "'", int69 == 772);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        boolean boolean15 = localDate13.isSupported(durationFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        long long26 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis(4);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate37.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = localDate34.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTime.Property property45 = dateTime44.year();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str58 = dateTimeFieldType57.getName();
        org.joda.time.DateTime.Property property59 = dateTime56.property(dateTimeFieldType57);
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        org.joda.time.DateTime dateTime63 = property59.addToCopy(5);
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = interval69.withChronology(chronology70);
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.DateTime dateTime73 = dateTime63.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Interval interval74 = interval46.withDurationAfterStart((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTime dateTime75 = dateTime25.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTime dateTime76 = dateTime7.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTime dateTime78 = dateTime7.withDayOfWeek(2);
        java.util.GregorianCalendar gregorianCalendar79 = dateTime78.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar79.roll(11865377, 50627);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "weekyear" + "'", str58, "weekyear");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(gregorianCalendar79);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.setTimeInMillis((-1L));
        calendar3.set((int) (byte) 1, 17724494, 935, 360240000, 21597);
        java.util.TimeZone timeZone14 = calendar3.getTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        boolean boolean16 = calendar15.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = calendar15.isSet(938);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 938");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=17724494,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=935,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=360240000,MINUTE=21597,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572456506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=56,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis(729129599943L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withSecondOfMinute(56297158);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56297158 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate16 = localDate5.plusWeeks(38);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str5 = property2.getAsString();
        org.joda.time.LocalDate localDate6 = property2.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        boolean boolean13 = localDate11.isSupported(durationFieldType12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        boolean boolean24 = dateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = interval28.withChronology(chronology29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime40.year();
        boolean boolean42 = interval30.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period43 = interval30.toPeriod();
        org.joda.time.DateTime dateTime45 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 360240000);
        org.joda.time.LocalDate localDate46 = localDate11.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.LocalDate localDate47 = localDate6.plus((org.joda.time.ReadablePeriod) period43);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str52 = dateTimeZone50.getName(10L);
        java.util.Locale locale56 = new java.util.Locale("70", "hi!");
        java.lang.String str57 = dateTimeZone50.getName((long) '4', locale56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(12L, dateTimeZone50);
        long long61 = dateTimeZone50.convertLocalToUTC((-31445624657L), true);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) localDate6, dateTimeZone50);
        long long64 = dateTimeZone50.nextTransition((long) 131);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+06:00" + "'", str52, "+06:00");
        org.junit.Assert.assertEquals(locale56.toString(), "70_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+06:00" + "'", str57, "+06:00");
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-31467224657L) + "'", long61 == (-31467224657L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 131L + "'", long64 == 131L);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        int int16 = localDate5.getYearOfEra();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        java.lang.String str20 = localDate18.toString();
        boolean boolean21 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDate18.getFieldTypes();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property24.getDifference(readableInstant26);
        org.joda.time.LocalDate localDate28 = property24.withMaximumValue();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate35 = localDate33.plusMonths(32772);
        org.joda.time.LocalDate localDate36 = localDate28.withFields((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.LocalTime localTime39 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtMidnight(dateTimeZone46);
        boolean boolean48 = dateTimeZone46.isFixed();
        java.lang.String str50 = dateTimeZone46.getName(57L);
        org.joda.time.DateTime dateTime51 = localDate38.toDateTime(localTime39, dateTimeZone46);
        org.joda.time.DateTime dateTime52 = localDate35.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight53 = localDate18.toDateMidnight(dateTimeZone46);
        int int54 = localDate18.getDayOfMonth();
        int int55 = localDate18.getDayOfWeek();
        org.joda.time.DateTime dateTime56 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant57 = dateTime56.toInstant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2099 + "'", int16 == 2099);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+06:00" + "'", str50, "+06:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate23 = localDate21.plusMonths(32772);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtStartOfDay();
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localDate23, (long) 15);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) "English (Canada)", chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"English (Canada)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        int int18 = dateTime16.getYear();
        org.joda.time.DateTime.Property property19 = dateTime16.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2099 + "'", int18 == 2099);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTimeAtStartOfDay(dateTimeZone18);
        long long23 = dateTimeZone18.adjustOffset((long) 11, false);
        java.lang.String str25 = dateTimeZone18.getNameKey((-1871L));
        java.lang.String str26 = dateTimeZone18.getID();
        java.lang.String str28 = dateTimeZone18.getNameKey((long) 56156);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone18);
        long long33 = dateTimeZone18.convertLocalToUTC(1772496324759000L, false, (-43199986L));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-03-11" + "'", str11, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 11L + "'", long23 == 11L);
// flaky:         org.junit.Assert.assertNull(str25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+06:00" + "'", str26, "+06:00");
// flaky:         org.junit.Assert.assertNull(str28);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1772496303159000L + "'", long33 == 1772496303159000L);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        int int12 = calendar3.getMinimalDaysInFirstWeek();
        int int13 = calendar3.getFirstDayOfWeek();
        int int14 = calendar3.getWeekYear();
        java.util.Date date15 = calendar3.getTime();
        calendar3.set(48, 34530, (int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=48,MONTH=34530,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=32,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2741 + "'", int14 == 2741);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Jan 20 22:00:32 UTC 2741");
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("2000-02-11");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: Franzo?sisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int19 = dateTimeZone17.getOffset((long) 2022);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 32770, dateTimeZone17);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str32 = dateTimeFieldType31.getName();
        org.joda.time.DateTime.Property property33 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime34.getZone();
        long long38 = dateTimeZone17.getMillisKeepLocal(dateTimeZone36, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 10);
        long long49 = dateTimeZone17.getMillisKeepLocal(dateTimeZone43, (long) 1970);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter12.withZone(dateTimeZone43);
        java.lang.String str52 = dateTimeZone43.getNameKey((long) 34530606);
        java.lang.String str53 = dateTimeZone43.getID();
        java.lang.String str55 = dateTimeZone43.getNameKey((-136045101000L));
        long long57 = dateTimeZone6.getMillisKeepLocal(dateTimeZone43, 3542400000L);
        long long59 = dateTimeZone43.nextTransition((long) 58);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21600000 + "'", int19 == 21600000);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "weekyear" + "'", str32, "weekyear");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9L + "'", long38 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1970L + "'", long49 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+06:00" + "'", str53, "+06:00");
        org.junit.Assert.assertNull(str55);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3542400000L + "'", long57 == 3542400000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 58L + "'", long59 == 58L);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        org.joda.time.DateTime.Property property10 = dateTime7.weekOfWeekyear();
        boolean boolean12 = dateTime7.equals((java.lang.Object) "1970-01");
        org.joda.time.DateTime.Property property13 = dateTime7.secondOfMinute();
        long long14 = property13.remainder();
        org.joda.time.DateTime dateTime15 = property13.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtStartOfDay(dateTimeZone20);
        boolean boolean23 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal(21600052L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21600000 + "'", int26 == 21600000);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime9.minusDays(32772);
        org.joda.time.DateTime.Property property27 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime9.minusYears((-11865376));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withMillisOfSecond(86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.LocalDate localDate9 = localDate6.minusYears(69);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate11 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property16 = localDate13.dayOfMonth();
        int int17 = localDate13.getDayOfWeek();
        org.joda.time.LocalDate.Property property18 = localDate13.dayOfYear();
        java.lang.String str19 = property18.getAsText();
        org.joda.time.LocalDate localDate21 = property18.addToCopy(8);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate.Property property25 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property25.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = property25.getField();
        int int30 = dateTimeField28.get((long) 'u');
        long long33 = dateTimeField28.addWrapField((long) (short) -1, 1);
        java.lang.String str35 = dateTimeField28.getAsText((long) 48);
        java.util.Locale locale38 = new java.util.Locale("");
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate.Property property41 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property41.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = property41.getField();
        int int46 = dateTimeField44.get((long) 'u');
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.lang.String str49 = dateTimeField44.getAsText((long) 5, locale48);
        java.lang.String str50 = locale38.getDisplayVariant(locale48);
        java.lang.String str51 = dateTimeField28.getAsText(34522218L, locale48);
        java.lang.String str52 = locale48.getDisplayName();
        java.lang.String str53 = locale22.getDisplayCountry(locale48);
        java.lang.String str54 = property18.getAsShortText(locale48);
        java.lang.String str55 = locale48.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate56 = property10.setCopy("35252", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35252 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "42" + "'", str19, "42");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 70 + "'", int30 == 70);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 31535999999L + "'", long33 == 31535999999L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "70" + "'", str35, "70");
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 70 + "'", int46 == 70);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "70" + "'", str49, "70");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "70" + "'", str51, "70");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese (Taiwan)" + "'", str52, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "42" + "'", str54, "42");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "TWN" + "'", str55, "TWN");
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(34530606);
        java.lang.String str3 = dateTimeZone1.getShortName((long) 27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+09:35:30.606" + "'", str3, "+09:35:30.606");
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder10 = builder6.setDate(0, (-3599), 22);
        java.util.Calendar.Builder builder14 = builder10.setDate(2012, 479, (-40176));
        java.util.Calendar calendar15 = builder10.build();
        java.util.Date date19 = new java.util.Date((-11865376), 14, 822);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder20 = builder10.setInstant(date19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-886291200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1941,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date19.toString(), "Fri May 31 00:00:00 UTC 11863474");
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        long long20 = dateTimeField14.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeField14.getAsShortText(70, locale22);
        long long26 = dateTimeField14.addWrapField((long) 21600000, 32769);
        boolean boolean27 = dateTimeField14.isLenient();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 315705600000L + "'", long20 == 315705600000L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1034090085600000L + "'", long26 == 1034090085600000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        java.util.Date date0 = new java.util.Date();
        java.lang.Object obj1 = date0.clone();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:40:57 UTC 2022");
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "Fri Feb 11 09:40:57 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "Fri Feb 11 09:40:57 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "Fri Feb 11 09:40:57 UTC 2022");
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(21600000);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 56171, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate.Property property6 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.withMaximumValue();
        org.joda.time.LocalDate localDate8 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = property6.withMinimumValue();
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = interval14.withChronology(chronology15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        boolean boolean28 = interval16.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = interval16.toPeriod();
        java.lang.String str30 = period29.toString();
        int[] intArray32 = chronology10.get((org.joda.time.ReadablePeriod) period29, 83635236564686000L);
        org.joda.time.MutablePeriod mutablePeriod33 = period29.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod34 = period29.toMutablePeriod();
        org.joda.time.Period period35 = period29.toPeriod();
        org.joda.time.DateTime dateTime36 = dateTime3.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology37 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.011S" + "'", str30, "PT0.011S");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 138285774, 5, 4, 51, 26, 0]");
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = yearMonth9.toString(dateTimeFormatter14);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = yearMonth17.getFieldTypes();
        org.joda.time.YearMonth.Property property21 = yearMonth17.year();
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth25.toInterval(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval27.withPeriodAfterStart(readablePeriod28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval29.toPeriod(periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean33 = period31.isSupported(durationFieldType32);
        org.joda.time.YearMonth yearMonth35 = yearMonth23.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 32770);
        org.joda.time.YearMonth yearMonth36 = yearMonth17.minus((org.joda.time.ReadablePeriod) period31);
        boolean boolean37 = yearMonth9.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology38 = yearMonth36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter7.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(2, 35435, 938, 366, 22, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01" + "'", str15, "1970-01");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        boolean boolean17 = dateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = interval21.withChronology(chronology22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        boolean boolean35 = interval23.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = interval23.toPeriod();
        org.joda.time.DateTime dateTime38 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 360240000);
        org.joda.time.LocalDate localDate39 = localDate4.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalDate localDate41 = localDate39.withYear(32770);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property52 = dateTime51.year();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime62);
        int int67 = dateTime62.getHourOfDay();
        boolean boolean68 = dateTime62.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay69 = dateTime62.toYearMonthDay();
        org.joda.time.DateTime dateTime71 = dateTime62.minus(1050308164619000L);
        org.joda.time.DateTime dateTime73 = dateTime71.minusSeconds(20);
        org.joda.time.DateTime.Property property74 = dateTime73.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int78 = dateTimeZone76.getOffsetFromLocal((long) 6);
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime73.toMutableDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime80 = localDate41.toDateTimeAtCurrentTime(dateTimeZone76);
        java.lang.String str81 = localDate41.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 21600000 + "'", int78 == 21600000);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "32770-01-01" + "'", str81, "32770-01-01");
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        boolean boolean17 = interval5.contains((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime20 = property18.roundFloorCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((-34));
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        boolean boolean12 = interval11.isAfterNow();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths(32772);
        org.joda.time.LocalDate localDate21 = localDate17.minusYears((int) (short) 10);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getName(10L);
        org.joda.time.Interval interval26 = localDate17.toInterval(dateTimeZone23);
        boolean boolean27 = interval11.isAfter((org.joda.time.ReadableInterval) interval26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = interval42.withChronology(chronology43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property55 = dateTime54.year();
        boolean boolean56 = interval44.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period57 = interval44.toPeriod();
        org.joda.time.DateTime dateTime59 = dateTime36.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 360240000);
        org.joda.time.Interval interval60 = interval26.withPeriodAfterStart((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property62.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = localDate63.toDateTimeAtStartOfDay(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate71 = dateTime69.toLocalDate();
        org.joda.time.Interval interval72 = localDate71.toInterval();
        boolean boolean73 = interval72.isAfterNow();
        boolean boolean74 = interval26.isBefore((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = interval78.withChronology(chronology79);
        org.joda.time.Duration duration81 = interval78.toDuration();
        org.joda.time.Interval interval82 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration81);
        boolean boolean84 = interval82.isAfter((long) 10);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) 20, (long) 86397);
        org.joda.time.Period period88 = interval87.toPeriod();
        boolean boolean90 = interval87.isBefore(755922022L);
        org.joda.time.Interval interval92 = interval87.withStartMillis((long) 42);
        boolean boolean93 = interval82.isBefore((org.joda.time.ReadableInterval) interval92);
        org.joda.time.Chronology chronology94 = interval92.getChronology();
        boolean boolean96 = interval92.contains((long) 86397772);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+06:00" + "'", str25, "+06:00");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        java.lang.String str30 = yearMonth28.toString();
        org.joda.time.YearMonth yearMonth32 = yearMonth28.minusMonths((-1));
        org.joda.time.YearMonth yearMonth34 = yearMonth32.plusYears(1978);
        int int35 = yearMonth34.size();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01" + "'", str30, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getAsShortText();
        int int8 = property5.getMinimumValueOverall();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getDisplayCountry();
        int int11 = property5.getMaximumTextLength(locale9);
        java.lang.String str12 = property5.getAsShortText();
        org.joda.time.YearMonth yearMonth14 = property5.addWrapFieldToCopy((int) (byte) 1);
        java.lang.String str15 = property5.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property5.getFieldType();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970" + "'", str7, "1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-292275054) + "'", int8 == (-292275054));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "year" + "'", str15, "year");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        int int34 = dateTimeField32.get((long) 'u');
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = dateTimeField32.getAsText((long) 5, locale36);
        int int38 = property24.getMaximumTextLength(locale36);
        java.util.Calendar.Builder builder39 = builder2.setLocale(locale36);
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 32770);
        java.util.Calendar calendar43 = builder42.build();
        boolean boolean45 = calendar43.after((java.lang.Object) 70);
        calendar43.set(10, 32772, (int) (byte) 1, 22, 0);
        long long52 = calendar43.getTimeInMillis();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime66.getZone();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        calendar43.setTimeZone(timeZone69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.Calendar.Builder builder74 = builder39.setTimeZone(timeZone69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder77 = builder39.setWeekDefinition(822, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24332133632770L + "'", long52 == 24332133632770L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr" + "'", str72, "fr");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572457450,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=40,SECOND=57,MILLISECOND=450,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property16.getDifference(readableInstant18);
        org.joda.time.LocalDate localDate20 = property16.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        boolean boolean29 = localDate20.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTime();
        boolean boolean33 = mutableInterval14.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime31.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone37);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTime dateTime42 = localDate39.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getMonthOfYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        boolean boolean56 = dateTime55.isBeforeNow();
        int int57 = dateTime55.getDayOfYear();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime46.minuteOfDay();
        org.joda.time.DateTime dateTime60 = property59.getDateTime();
        java.util.Calendar.Builder builder61 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder63 = builder61.setInstant((long) 32770);
        java.util.Calendar calendar64 = builder63.build();
        boolean boolean66 = calendar64.after((java.lang.Object) 70);
        calendar64.set(10, 32772, (int) (byte) 1, 22, 0);
        long long73 = calendar64.getTimeInMillis();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property75 = localDate74.yearOfCentury();
        org.joda.time.LocalDate localDate76 = property75.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean80 = dateTimeZone79.isFixed();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone79);
        org.joda.time.DateTime dateTime82 = localDate76.toDateTimeAtStartOfDay(dateTimeZone79);
        org.joda.time.DateTime dateTime83 = dateTime82.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str85 = dateTimeFieldType84.getName();
        org.joda.time.DateTime.Property property86 = dateTime83.property(dateTimeFieldType84);
        org.joda.time.DateTime dateTime87 = property86.roundFloorCopy();
        org.joda.time.DateTime.Property property88 = dateTime87.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone89 = dateTime87.getZone();
        java.util.TimeZone timeZone90 = dateTimeZone89.toTimeZone();
        calendar64.setTimeZone(timeZone90);
        java.util.Locale locale92 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone90, locale92);
        java.lang.String str94 = property59.getAsShortText(locale92);
        int int95 = property34.getMaximumShortTextLength(locale92);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 42 + "'", int57 == 42);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 24332133632770L + "'", long73 == 24332133632770L);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "weekyear" + "'", str85, "weekyear");
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar93);
// flaky:         org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=1644572457478,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=40,SECOND=57,MILLISECOND=478,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0" + "'", str94, "0");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField7 = durationFieldType1.getField(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(315532800002L, chronology4);
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDate9.getValue(309);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 309");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int4 = dateTimeZone2.getOffset((long) 2022);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 32770, dateTimeZone2);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime19.getZone();
        long long23 = dateTimeZone2.getMillisKeepLocal(dateTimeZone21, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int30 = dateTimeZone28.getOffsetFromLocal((long) 6);
        long long32 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 10);
        long long34 = dateTimeZone2.getMillisKeepLocal(dateTimeZone28, (long) 1970);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime.Property property36 = dateTime35.monthOfYear();
        org.joda.time.DateTime dateTime37 = property36.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21600000 + "'", int4 == 21600000);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weekyear" + "'", str17, "weekyear");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21600000 + "'", int30 == 21600000);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1970L + "'", long34 == 1970L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        java.util.TimeZone timeZone13 = null;
        calendar3.setTimeZone(timeZone13);
        int int15 = calendar3.getMinimalDaysInFirstWeek();
        int int17 = calendar3.getMaximum((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278994 + "'", int17 == 292278994);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime9.era();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime9.toDateTime(chronology31);
        boolean boolean33 = dateTime9.isBeforeNow();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.DateTime.Property property46 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = property46.roundFloorCopy();
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        boolean boolean50 = property48.equals((java.lang.Object) 13);
        org.joda.time.DateTime dateTime52 = property48.addToCopy((int) (short) 1);
        boolean boolean53 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        java.util.Date date5 = new java.util.Date(414088, 21, 0, 414088, 32770);
        int int6 = date5.getYear();
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jan 17 10:10:00 UTC 416037");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 414137 + "'", int6 == 414137);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate22 = localDate20.plusMonths(32772);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtStartOfDay();
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePartial) localDate22, (long) 15);
        org.joda.time.DateTimeField dateTimeField26 = chronology14.secondOfMinute();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays((int) 'u');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays(70);
        org.joda.time.DateTime dateTime18 = dateTime13.plus((long) 57);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate.Property property21 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property21.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str24 = property21.getAsString();
        int int25 = property21.getMaximumValue();
        org.joda.time.LocalDate localDate26 = property21.roundCeilingCopy();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfEra();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property30.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate33 = property30.roundHalfCeilingCopy();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale34);
        int int36 = property30.getMaximumShortTextLength(locale34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate.Property property39 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property50 = dateTime49.year();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime59.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str62 = dateTimeFieldType61.getName();
        org.joda.time.DateTime.Property property63 = dateTime60.property(dateTimeFieldType61);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property66 = localDate65.yearOfCentury();
        org.joda.time.LocalDate localDate67 = property66.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean71 = dateTimeZone70.isFixed();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone70);
        org.joda.time.DateTime dateTime73 = localDate67.toDateTimeAtStartOfDay(dateTimeZone70);
        org.joda.time.DateTime dateTime74 = dateTime73.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str76 = dateTimeFieldType75.getName();
        org.joda.time.DateTime.Property property77 = dateTime74.property(dateTimeFieldType75);
        int int78 = dateTime49.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime79 = localDate37.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        int int80 = dateTime74.getWeekyear();
        int int81 = property30.getDifference((org.joda.time.ReadableInstant) dateTime74);
        int int82 = dateTime74.getYear();
        org.joda.time.DateTime.Property property83 = dateTime74.secondOfMinute();
        org.joda.time.DateTime dateTime86 = dateTime74.withDurationAdded((long) (-11865376), 2017);
        long long87 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean88 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Instant instant89 = dateTime18.toInstant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "22" + "'", str24, "22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "weekyear" + "'", str62, "weekyear");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "weekyear" + "'", str76, "weekyear");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.DateTime.Property property27 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        org.joda.time.LocalDate localDate29 = dateTime28.toLocalDate();
        int int30 = dateTime28.getDayOfYear();
        int int31 = property11.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Instant instant32 = dateTime28.toInstant();
        boolean boolean34 = instant32.isEqual((long) 107);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 39 + "'", int30 == 39);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        boolean boolean7 = interval3.isAfter(10L);
        boolean boolean9 = interval3.isAfter(24332133632770L);
        long long10 = interval3.getStartMillis();
        org.joda.time.Duration duration11 = interval3.toDuration();
        org.joda.time.Interval interval12 = interval3.toInterval();
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Interval interval18 = interval16.withPeriodAfterStart(readablePeriod17);
        org.joda.time.Interval interval20 = interval16.withStartMillis((long) 32772);
        org.joda.time.DateTime dateTime21 = interval20.getStart();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        boolean boolean23 = interval12.isAfter((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTime dateTime24 = interval20.getEnd();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(2022);
        java.lang.Object obj10 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 32772);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime20.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj10, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        boolean boolean29 = dateTimeField27.isLeap((-1889963999000L));
        int int30 = dateTime7.get(dateTimeField27);
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime();
        java.util.Locale locale33 = new java.util.Locale("10-Dec-1969 6:00:00 PM");
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.DateTime.Property property46 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.DateTimeField dateTimeField48 = property46.getField();
        long long51 = dateTimeField48.add((long) (byte) 10, (-1));
        long long54 = dateTimeField48.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeField48.getAsShortText(70, locale56);
        org.joda.time.DurationField durationField58 = dateTimeField48.getDurationField();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        java.lang.String str63 = dateTimeZone61.getName(10L);
        java.util.Locale locale67 = new java.util.Locale("70", "hi!");
        java.lang.String str68 = dateTimeZone61.getName((long) '4', locale67);
        java.lang.String str69 = locale67.toLanguageTag();
        java.lang.String str70 = dateTimeField48.getAsShortText((-360L), locale67);
        java.util.Set<java.lang.Character> charSet71 = locale67.getExtensionKeys();
        java.lang.String str72 = locale33.getDisplayCountry(locale67);
        java.util.Calendar calendar73 = dateTime31.toCalendar(locale67);
        boolean boolean74 = calendar73.isWeekDateSupported();
        java.util.Date date75 = calendar73.getTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 70 + "'", int30 == 70);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals(locale33.toString(), "10-dec-1969 6:00:00 pm");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-31449599990L) + "'", long51 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 315705600000L + "'", long54 == 315705600000L);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "70" + "'", str57, "70");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertEquals(locale67.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "und" + "'", str69, "und");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970" + "'", str70, "1970");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=34857970,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=57,MILLISECOND=970,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(date75);
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 09:40:57 UTC 1970");
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("java.util.GregorianCalendar[time=-2228,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=57,MILLISECOND=772,ZONE_OFFSET=21600000,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        java.lang.String str4 = yearMonth2.toString();
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval8.withPeriodAfterStart(readablePeriod9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval10.toPeriod(periodType11);
        boolean boolean14 = interval10.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval15 = interval10.toMutableInterval();
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodAfterStart(readablePeriod22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.YearMonth yearMonth29 = yearMonth17.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 32770);
        org.joda.time.PeriodType periodType30 = period25.getPeriodType();
        boolean boolean31 = interval10.equals((java.lang.Object) period25);
        org.joda.time.YearMonth yearMonth33 = yearMonth2.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 6);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("2022-02");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = yearMonth33.toString("cor\351en", locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01" + "'", str4, "1970-01");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone8);
        boolean boolean10 = interval5.overlaps((org.joda.time.ReadableInterval) interval9);
        boolean boolean11 = interval5.isAfterNow();
        java.lang.String str12 = interval5.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(dateTimeZone14);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth25.toInterval(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval27.withPeriodAfterStart(readablePeriod28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval29.toPeriod(periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean33 = period31.isSupported(durationFieldType32);
        int int34 = period23.get(durationFieldType32);
        org.joda.time.YearMonth yearMonth35 = yearMonth15.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Interval interval36 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean38 = period23.equals((java.lang.Object) dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getRangeDurationType();
        java.lang.String str40 = durationFieldType39.toString();
        java.lang.String str41 = durationFieldType39.getName();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str12, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "days" + "'", str40, "days");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "days" + "'", str41, "days");
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        long long20 = dateTimeField14.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeField14.getAsShortText(70, locale22);
        org.joda.time.DurationField durationField24 = dateTimeField14.getDurationField();
        long long27 = dateTimeField14.add(11L, 10L);
        long long29 = dateTimeField14.roundFloor((long) 16);
        boolean boolean31 = dateTimeField14.isLeap((-58471372799000L));
        java.lang.String str32 = dateTimeField14.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 315705600000L + "'", long20 == 315705600000L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 315705600011L + "'", long27 == 315705600011L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-280800000L) + "'", long29 == (-280800000L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DateTimeField[weekyear]" + "'", str32, "DateTimeField[weekyear]");
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtStartOfDay(dateTimeZone20);
        java.lang.Class<?> wildcardClass23 = localDate13.getClass();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMonthOfYear();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 15, dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = property15.addToCopy(56305647);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        org.joda.time.LocalDate.Property property7 = localDate6.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'a');
        org.joda.time.LocalDate localDate12 = localDate10.withYear((int) (short) 1);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth14.getFieldTypes();
        org.joda.time.YearMonth.Property property18 = yearMonth14.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = yearMonth14.toString(dateTimeFormatter19);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth22.toInterval(dateTimeZone23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth22.getFieldTypes();
        org.joda.time.YearMonth.Property property26 = yearMonth22.year();
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = yearMonth30.toInterval(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Interval interval34 = interval32.withPeriodAfterStart(readablePeriod33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval34.toPeriod(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean38 = period36.isSupported(durationFieldType37);
        org.joda.time.YearMonth yearMonth40 = yearMonth28.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 32770);
        org.joda.time.YearMonth yearMonth41 = yearMonth22.minus((org.joda.time.ReadablePeriod) period36);
        boolean boolean42 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology43 = yearMonth41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.DurationField durationField45 = chronology43.weeks();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField48.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localDate10.get(dateTimeFieldType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01" + "'", str20, "1970-01");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (short) -1);
        int int20 = dateTime16.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T15:40:58.400+06:00" + "'", str17, "2022-02-11T15:40:58.400+06:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int7 = dateTimeField5.get((long) 'u');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        int int11 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate10);
        long long14 = dateTimeField5.add((long) (byte) 100, 12);
        long long16 = dateTimeField5.remainder(10L);
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 32772);
        org.joda.time.DateTime dateTime30 = dateTime28.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime32 = dateTime28.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj18, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfHalfday();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate44 = localDate40.minusYears(11);
        int int45 = localDate44.getYear();
        org.joda.time.LocalDate localDate47 = localDate44.plusDays(100);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) localDate47, (int) (byte) 10, locale49);
        java.lang.String str52 = dateTimeField37.getAsText((long) 56156);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale67);
        java.lang.String str69 = locale66.getDisplayLanguage(locale67);
        java.lang.String str70 = property65.getAsShortText(locale66);
        int int71 = dateTimeField37.getMaximumTextLength(locale66);
        java.lang.String str72 = locale66.getISO3Language();
        java.lang.String str73 = dateTimeField5.getAsShortText(9221, locale66);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 378691200100L + "'", long14 == 378691200100L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2011 + "'", int45 == 2011);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "10" + "'", str50, "10");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinese" + "'", str69, "Chinese");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022" + "'", str70, "2022");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zho" + "'", str72, "zho");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "9221" + "'", str73, "9221");
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.Interval interval5 = interval3.withEndMillis((long) (byte) 1);
        boolean boolean7 = interval5.isAfter((long) '4');
        boolean boolean8 = interval5.isBeforeNow();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        java.util.Date date1 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.Date date12 = dateMidnight11.toDate();
        boolean boolean13 = date1.before(date12);
        date12.setHours(52);
        java.lang.Object obj16 = date12.clone();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str10, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Jan 03 04:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "Sat Jan 03 04:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "Sat Jan 03 04:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "Sat Jan 03 04:00:00 UTC 1970");
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 20, (long) 86397);
        org.joda.time.Period period3 = interval2.toPeriod();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.DateTime.Property property27 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime30 = dateTime24.withHourOfDay(15);
        org.joda.time.DateTime.Property property31 = dateTime24.centuryOfEra();
        org.joda.time.Interval interval32 = interval2.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval33 = interval2.toMutableInterval();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableInterval33);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale14);
        java.lang.String str16 = locale13.getDisplayLanguage(locale14);
        java.lang.String str17 = property12.getAsShortText(locale13);
        long long18 = property12.remainder();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese" + "'", str16, "Chinese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3369600000L + "'", long18 == 3369600000L);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        boolean boolean9 = dateTimeField7.isLeap((long) (-3599));
        boolean boolean11 = dateTimeField7.isLeap(2656800000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        int int23 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        int int25 = dateTime22.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTime dateTime33 = localDate30.toDateTimeAtMidnight(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateMidnight dateMidnight35 = dateTime33.toDateMidnight();
        org.joda.time.DateTime.Property property36 = dateTime33.weekOfWeekyear();
        boolean boolean38 = dateTime33.equals((java.lang.Object) "1970-01");
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate.Property property41 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property41.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = property41.getField();
        int int46 = dateTimeField44.get((long) 'u');
        long long49 = dateTimeField44.addWrapField((long) (short) -1, 1);
        int int51 = dateTimeField44.get((long) (byte) 100);
        int int52 = dateTime33.get(dateTimeField44);
        boolean boolean53 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime33);
        int int54 = dateTime33.getMinuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime33.plusMillis(56165);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillis((long) (-9));
        org.joda.time.DateTime dateTime60 = dateTime56.minusDays(0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str34, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 70 + "'", int46 == 70);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 31535999999L + "'", long49 == 31535999999L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 70 + "'", int52 == 70);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 20, (long) 86397);
        org.joda.time.Period period3 = interval2.toPeriod();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval2.withChronology(chronology4);
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = yearMonth7.toInterval(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonth7.getFieldTypes();
        org.joda.time.YearMonth.Property property11 = yearMonth7.year();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getCountry();
        java.util.Locale locale14 = locale12.stripExtensions();
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.YearMonth yearMonth17 = property11.setCopy(16);
        org.joda.time.YearMonth yearMonth19 = property11.addWrapFieldToCopy(22);
        org.joda.time.Interval interval20 = yearMonth19.toInterval();
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth22.toInterval(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval24.withPeriodAfterStart(readablePeriod25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval26.toPeriod(periodType27);
        boolean boolean30 = interval26.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval31 = interval26.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval32 = interval26.toMutableInterval();
        boolean boolean33 = interval20.contains((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration34 = interval26.toDuration();
        boolean boolean35 = interval2.isAfter((org.joda.time.ReadableInterval) interval26);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FR" + "'", str13, "FR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Taiwan");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "taiwan" + "'", str2, "taiwan");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "taiwan" + "'", str4, "taiwan");
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(10, 1970);
        java.util.Calendar calendar4 = builder3.build();
        int int6 = calendar4.getGreatestMinimum(1);
        calendar4.set(412, 56170, 6);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=412,MONTH=56170,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=6,DAY_OF_YEAR=83,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays(70);
        org.joda.time.DateTime.Property property17 = dateTime13.minuteOfDay();
        int int18 = property17.getMinimumValueOverall();
        int int19 = property17.getMinimumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = property5.getAsText(locale8);
        int int11 = property5.getMinimumValueOverall();
        java.lang.String str12 = property5.getAsString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(16);
        org.joda.time.YearMonth yearMonth13 = property5.addWrapFieldToCopy(22);
        org.joda.time.YearMonth yearMonth15 = property5.setCopy((int) (byte) 10);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.withMonthOfYear(8);
        org.joda.time.YearMonth yearMonth19 = yearMonth15.minusYears(1972);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = yearMonth19.getValue(56402621);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56402621");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        java.util.Date date6 = new java.util.Date(10, 99, 1, 70, 99, (int) (byte) -1);
        int int7 = date6.getTimezoneOffset();
        date6.setYear(829749);
        java.util.Date date16 = new java.util.Date(10, 99, 1, 70, 99, (int) (byte) -1);
        java.lang.String str17 = date16.toGMTString();
        int int18 = date16.getDay();
        boolean boolean19 = date6.before(date16);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Apr 03 23:38:59 UTC 831649");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Apr 03 23:38:59 UTC 1918");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3 Apr 1918 23:38:59 GMT" + "'", str17, "3 Apr 1918 23:38:59 GMT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter7.getParser();
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = yearMonth12.toString(dateTimeFormatter17);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = yearMonth20.getFieldTypes();
        org.joda.time.YearMonth.Property property24 = yearMonth20.year();
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = yearMonth28.toInterval(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval30.withPeriodAfterStart(readablePeriod31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval32.toPeriod(periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean36 = period34.isSupported(durationFieldType35);
        org.joda.time.YearMonth yearMonth38 = yearMonth26.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 32770);
        org.joda.time.YearMonth yearMonth39 = yearMonth20.minus((org.joda.time.ReadablePeriod) period34);
        boolean boolean40 = yearMonth12.isAfter((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology41 = yearMonth39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.DurationField durationField43 = chronology41.weeks();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter7.withChronology(chronology41);
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((long) 10, chronology41);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNull(dateTimeParser10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01" + "'", str18, "1970-01");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(10, 1970);
        java.util.Calendar calendar4 = builder3.build();
        int int6 = calendar4.getGreatestMinimum(1);
        calendar4.setTimeInMillis(32772L);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate15 = localDate13.plusMonths(32772);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate22 = localDate20.plusMonths(32772);
        int int23 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate20);
        java.util.Date date24 = localDate20.toDate();
        calendar4.setTime(date24);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate localDate28 = localDate26.plusWeeks(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-58471545600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=117,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Feb 11 00:00:00 UTC 117");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        int int18 = dateTime16.getYear();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.minusHours(21597772);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 32772);
        int int32 = dateTime29.getWeekOfWeekyear();
        int int33 = dateTime29.getSecondOfDay();
        int int34 = dateTime29.getDayOfWeek();
        boolean boolean35 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTime();
        org.joda.time.Chronology chronology48 = dateTime46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.monthOfYear();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime59.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str62 = dateTimeFieldType61.getName();
        org.joda.time.DateTime.Property property63 = dateTime60.property(dateTimeFieldType61);
        org.joda.time.DateTime dateTime64 = property63.roundFloorCopy();
        org.joda.time.DateTime.Property property65 = dateTime64.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime64.getZone();
        java.util.TimeZone timeZone67 = dateTimeZone66.toTimeZone();
        org.joda.time.Chronology chronology68 = chronology48.withZone(dateTimeZone66);
        org.joda.time.DurationField durationField69 = chronology48.seconds();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType37.getField(chronology48);
        org.joda.time.DurationField durationField71 = chronology48.months();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(21600003L, chronology48);
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths(32769);
        org.joda.time.LocalDate.Property property75 = localDate72.year();
        boolean boolean76 = dateTime21.equals((java.lang.Object) property75);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2099 + "'", int18 == 2099);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 34858 + "'", int33 == 34858);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "weekyear" + "'", str62, "weekyear");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        java.util.Date date0 = new java.util.Date();
        date0.setDate(7);
        date0.setDate((-18994));
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Jan 30 09:40:59 UTC 1970");
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfMonth();
        int int4 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate7 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate9 = localDate0.withDayOfMonth(3);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = localDate12.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str21 = dateTimeFieldType20.getName();
        org.joda.time.DateTime.Property property22 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTime dateTime23 = property22.roundFloorCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        boolean boolean26 = property24.equals((java.lang.Object) 13);
        org.joda.time.DateTime dateTime28 = property24.addToCopy((int) (short) 1);
        org.joda.time.DateTime dateTime29 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime31 = dateTime29.plusYears((int) '4');
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property33.getDifference(readableInstant35);
        org.joda.time.LocalDate localDate37 = property33.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone40);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTime dateTime45 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        boolean boolean46 = localDate37.equals((java.lang.Object) dateTime45);
        java.util.Date date47 = localDate37.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getRangeDurationType();
        boolean boolean50 = localDate37.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean55 = dateTimeZone54.isFixed();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone54);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 32772);
        org.joda.time.DateTime dateTime63 = dateTime61.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime65 = dateTime61.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology66 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfMinute();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.yearOfCentury();
        org.joda.time.LocalDate localDate70 = property69.getLocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate74 = localDate72.plusMonths(32772);
        org.joda.time.DateTime dateTime75 = localDate74.toDateTimeAtStartOfDay();
        int[] intArray77 = chronology66.get((org.joda.time.ReadablePartial) localDate74, (long) 15);
        org.joda.time.DateTimeField dateTimeField78 = chronology66.secondOfMinute();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(76872L, chronology66);
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType48.getField(chronology66);
        int int81 = dateTime29.get(dateTimeFieldType48);
        boolean boolean82 = localDate0.isSupported(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekyear" + "'", str21, "weekyear");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        calendar3.set(1, (int) (byte) 100, 1, (-292275054), 4);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        // The following exception was thrown during execution in test generation
        try {
            calendar3.clear((-113952));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -113952");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-1114063134927230,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=33334,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=4,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(locale6);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth11.toInterval(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonth11.getFieldTypes();
        org.joda.time.YearMonth.Property property15 = yearMonth11.year();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = locale16.stripExtensions();
        int int19 = property15.getMaximumTextLength(locale18);
        java.lang.String str20 = locale6.getDisplayName(locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone5, locale18);
        java.util.Locale locale22 = locale18.stripExtensions();
        java.lang.String str23 = locale22.getDisplayName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FR" + "'", str17, "FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572459189,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=59,MILLISECOND=189,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Franz\366sisch (Frankreich)" + "'", str23, "Franz\366sisch (Frankreich)");
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        java.util.Date date3 = new java.util.Date(17, (int) (byte) 100, 0);
        java.util.Date date5 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtMidnight(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateMidnight dateMidnight15 = dateTime13.toDateMidnight();
        java.util.Date date16 = dateMidnight15.toDate();
        boolean boolean17 = date5.before(date16);
        java.time.Instant instant18 = date5.toInstant();
        date5.setMinutes(2022);
        int int21 = date5.getTimezoneOffset();
        boolean boolean22 = date3.before(date5);
        date5.setHours(100);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        int int28 = localDate27.size();
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int38 = dateTimeZone36.getOffsetFromLocal((long) 6);
        long long40 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) 10);
        org.joda.time.Interval interval41 = localDate31.toInterval(dateTimeZone33);
        org.joda.time.DateTime dateTime42 = localDate30.toDateTimeAtMidnight(dateTimeZone33);
        java.lang.String str43 = dateTimeZone33.toString();
        long long45 = dateTimeZone33.nextTransition((long) 0);
        boolean boolean47 = dateTimeZone33.isStandardOffset(31535997772L);
        long long50 = dateTimeZone33.convertLocalToUTC((long) 22, true);
        org.joda.time.DateTime dateTime51 = localDate27.toDateTime(localTime29, dateTimeZone33);
        org.joda.time.LocalDate localDate53 = localDate27.plusDays(56172);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology55 = null;
        boolean boolean56 = dateTimeFieldType54.isSupported(chronology55);
        boolean boolean57 = localDate53.isSupported(dateTimeFieldType54);
        int int58 = localDate25.get(dateTimeFieldType54);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Apr 30 00:00:00 UTC 1925");
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 06 04:42:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str14, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21600000 + "'", int38 == 21600000);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+06:00" + "'", str43, "+06:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-21599978L) + "'", long50 == (-21599978L));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 70 + "'", int58 == 70);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = dateTimeFormatter2.parseMutableDateTime("2-Jan-1948 9:42:00 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.DurationField durationField19 = chronology15.hours();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(chronology15);
        org.joda.time.DurationField durationField21 = chronology15.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths(99);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getMonthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        boolean boolean33 = dateTime32.isBeforeNow();
        int int34 = dateTime32.getDayOfYear();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.plusSeconds(0);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        boolean boolean39 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime37);
        java.lang.String str40 = dateTime11.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        boolean boolean48 = interval44.isAfter(10L);
        boolean boolean50 = interval44.isAfter(24332133632770L);
        long long51 = interval44.getStartMillis();
        org.joda.time.Duration duration52 = interval44.toDuration();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTime();
        org.joda.time.DateTime.Property property68 = dateTime66.dayOfMonth();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime70 = dateTime11.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property72 = localDate71.yearOfCentury();
        org.joda.time.LocalDate localDate73 = property72.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean77 = dateTimeZone76.isFixed();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone76);
        org.joda.time.DateTime dateTime79 = localDate73.toDateTimeAtStartOfDay(dateTimeZone76);
        org.joda.time.DateTime dateTime80 = dateTime79.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str82 = dateTimeFieldType81.getName();
        org.joda.time.DateTime.Property property83 = dateTime80.property(dateTimeFieldType81);
        org.joda.time.DateTime dateTime84 = property83.roundFloorCopy();
        org.joda.time.DateTime.Property property85 = dateTime84.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime84.getZone();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(dateTimeZone86);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology90 = localDate89.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField92 = chronology90.monthOfYear();
        org.joda.time.DateTime dateTime93 = dateTime87.toDateTime(chronology90);
        boolean boolean95 = dateTime93.isEqual((long) 1056);
        java.util.Date date96 = dateTime93.toDate();
        boolean boolean97 = dateTime70.isBefore((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1978-04-01T00:00:00.000Z" + "'", str40, "1978-04-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "weekyear" + "'", str82, "weekyear");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(date96);
// flaky:         org.junit.Assert.assertEquals(date96.toString(), "Fri Feb 11 09:40:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(28800, 56335, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56335 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = property5.getAsText(locale8);
        org.joda.time.YearMonth yearMonth12 = property5.setCopy(12);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.000Z");
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((-1L), (int) (byte) -1);
        org.joda.time.DateTime dateTime19 = dateTime14.withMinuteOfHour(6);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.Interval interval22 = yearMonth12.toInterval(dateTimeZone20);
        boolean boolean23 = interval22.containsNow();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = yearMonth5.toInterval(dateTimeZone6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = yearMonth5.getFieldTypes();
        org.joda.time.YearMonth.Property property9 = yearMonth5.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = yearMonth5.toString(dateTimeFormatter10);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonth13.toInterval(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonth13.getFieldTypes();
        org.joda.time.YearMonth.Property property17 = yearMonth13.year();
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = yearMonth21.toInterval(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Interval interval25 = interval23.withPeriodAfterStart(readablePeriod24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean29 = period27.isSupported(durationFieldType28);
        org.joda.time.YearMonth yearMonth31 = yearMonth19.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 32770);
        org.joda.time.YearMonth yearMonth32 = yearMonth13.minus((org.joda.time.ReadablePeriod) period27);
        boolean boolean33 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology34 = yearMonth32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter3.withChronology(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.minuteOfHour();
        org.joda.time.DurationField durationField40 = chronology34.months();
        org.joda.time.DurationField durationField41 = chronology34.hours();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-58471480799989L), chronology34);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01" + "'", str11, "1970-01");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        int int16 = localDate5.getYearOfEra();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        java.lang.String str20 = localDate18.toString();
        boolean boolean21 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate18);
        int int22 = localDate5.size();
        org.joda.time.LocalDate.Property property23 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.LocalDate localDate34 = localDate26.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfWeek();
        org.joda.time.LocalDate localDate37 = property35.addToCopy(10);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str41 = dateTimeZone39.getName(10L);
        java.util.Locale locale45 = new java.util.Locale("70", "hi!");
        java.lang.String str46 = dateTimeZone39.getName((long) '4', locale45);
        org.joda.time.Interval interval47 = localDate37.toInterval(dateTimeZone39);
        org.joda.time.LocalDate localDate49 = localDate37.plusDays(19);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate57 = property56.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = localDate54.toDateTimeAtMidnight(dateTimeZone60);
        org.joda.time.LocalDate localDate66 = localDate54.minusYears(10);
        org.joda.time.DateTime dateTime67 = localDate54.toDateTimeAtStartOfDay();
        int int68 = localDate49.compareTo((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.Chronology chronology69 = localDate54.getChronology();
        java.lang.String str70 = localDate54.toString();
        java.util.Date date71 = localDate54.toDate();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime74 = localDate54.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType75.getRangeDurationType();
        org.joda.time.LocalDate localDate78 = localDate54.withField(dateTimeFieldType75, 28800);
        boolean boolean79 = localDate5.isEqual((org.joda.time.ReadablePartial) localDate78);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2099 + "'", int16 == 2099);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals(locale45.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0117-02-11" + "'", str70, "0117-02-11");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Feb 11 00:00:00 UTC 117");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNull(durationFieldType76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime12 = localDate2.toDateTimeAtStartOfDay();
        int int13 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property14 = localDate2.weekyear();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate.Property property18 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = property18.withMinimumValue();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = interval26.withChronology(chronology27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property39 = dateTime38.year();
        boolean boolean40 = interval28.contains((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = interval28.toPeriod();
        java.lang.String str42 = period41.toString();
        int[] intArray44 = chronology22.get((org.joda.time.ReadablePeriod) period41, 83635236564686000L);
        org.joda.time.MutablePeriod mutablePeriod45 = period41.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod46 = period41.toMutablePeriod();
        org.joda.time.LocalDate localDate47 = localDate15.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(57);
        long long53 = dateTimeZone49.convertLocalToUTC((long) ' ', false, 1L);
        org.joda.time.DateTime dateTime54 = localDate15.toDateTimeAtStartOfDay(dateTimeZone49);
        long long57 = dateTimeZone49.adjustOffset((-22946399993L), false);
        int int59 = dateTimeZone49.getOffset(204867179362L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0.011S" + "'", str42, "PT0.011S");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 138285774, 5, 4, 51, 26, 0]");
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-25L) + "'", long53 == (-25L));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-22946399993L) + "'", long57 == (-22946399993L));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 57 + "'", int59 == 57);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        long long9 = dateTimeField6.addWrapField((long) 2, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale locale13 = new java.util.Locale("");
        java.lang.String str14 = dateTimeField6.getAsShortText(readablePartial10, 0, locale13);
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale19 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str20 = locale19.getCountry();
        java.lang.String str21 = locale13.getDisplayScript(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 315532800002L + "'", long9 == 315532800002L);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertEquals(locale19.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969-12" + "'", str20, "1969-12");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("316", (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=316");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int7 = dateTimeField5.get((long) 'u');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        java.lang.String str11 = property9.getName();
        long long12 = property9.remainder();
        int int13 = property9.getMinimumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfCeilingCopy();
        int int15 = localDate14.getYearOfCentury();
        int int16 = localDate14.getDayOfWeek();
        org.joda.time.LocalDate.Property property17 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate19 = localDate14.minusYears(61);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate.Property property25 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property25.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str28 = property25.getAsString();
        org.joda.time.LocalDate localDate29 = property25.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.minutes();
        boolean boolean36 = localDate34.isSupported(durationFieldType35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime45.toMutableDateTime();
        boolean boolean47 = dateTime45.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = interval51.withChronology(chronology52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.yearOfCentury();
        org.joda.time.LocalDate localDate56 = property55.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone59);
        org.joda.time.DateTime dateTime62 = localDate56.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime62.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property64 = dateTime63.year();
        boolean boolean65 = interval53.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period66 = interval53.toPeriod();
        org.joda.time.DateTime dateTime68 = dateTime45.withPeriodAdded((org.joda.time.ReadablePeriod) period66, 360240000);
        org.joda.time.LocalDate localDate69 = localDate34.plus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.LocalDate localDate70 = localDate29.plus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.PeriodType periodType71 = period66.getPeriodType();
        org.joda.time.LocalDate localDate72 = localDate22.plus((org.joda.time.ReadablePeriod) period66);
        int[] intArray73 = localDate72.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray75 = dateTimeField5.add((org.joda.time.ReadablePartial) localDate19, 56429, intArray73, 201122);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56429");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yearOfCentury" + "'", str11, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3542400000L + "'", long12 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22" + "'", str28, "22");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[2022, 2, 11]");
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(1969);
        boolean boolean17 = dateTime15.isAfter((long) 24889);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        java.lang.String str3 = localDate1.toString();
        org.joda.time.LocalDate localDate5 = localDate1.minusYears(0);
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(4);
        org.joda.time.DurationField durationField9 = property6.getLeapDurationField();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property12.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        long long18 = dateTimeField15.addWrapField((long) 2, (int) (byte) 10);
        int int20 = dateTimeField15.getMaximumValue((long) (-1));
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate.Property property24 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property24.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate27 = property24.roundHalfCeilingCopy();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale28);
        int int30 = property24.getMaximumShortTextLength(locale28);
        java.lang.String str31 = dateTimeField15.getAsText((long) 7, locale28);
        java.lang.String str32 = locale28.getVariant();
        int int33 = property6.getMaximumShortTextLength(locale28);
        java.util.Set<java.lang.String> strSet34 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale28.getDisplayLanguage();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 315532800002L + "'", long18 == 315532800002L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "70" + "'", str31, "70");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        java.lang.Object obj18 = date17.clone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "Wed Dec 31 23:59:57 UTC 1969");
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.hourOfHalfday();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate26 = localDate22.minusYears(11);
        int int27 = localDate26.getYear();
        org.joda.time.LocalDate localDate29 = localDate26.plusDays(100);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDate29, (int) (byte) 10, locale31);
        java.lang.String str34 = dateTimeField19.getAsText((long) 56156);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = localDate39.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate51 = localDate39.minusYears(10);
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfEra();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.yearOfCentury();
        org.joda.time.LocalDate.Property property56 = localDate54.yearOfCentury();
        org.joda.time.LocalDate localDate58 = property56.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField59 = property56.getField();
        int int61 = dateTimeField59.get((long) 'u');
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = dateTimeField59.getAsText((long) 5, locale63);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = dateTimeField59.getAsShortText(100, locale66);
        long long70 = dateTimeField59.add((long) 13, 17);
        long long73 = dateTimeField59.getDifferenceAsLong((long) (byte) 1, (long) 292278993);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property75 = localDate74.yearOfCentury();
        org.joda.time.LocalDate.Property property76 = localDate74.yearOfCentury();
        org.joda.time.LocalDate localDate78 = property76.addWrapFieldToCopy((int) (short) -1);
        int[] intArray85 = new int[] { (-1), 86397, 5, (byte) 1, 32769, 10 };
        int int86 = dateTimeField59.getMaximumValue((org.joda.time.ReadablePartial) localDate78, intArray85);
        int[] intArray88 = dateTimeField19.addWrapField((org.joda.time.ReadablePartial) localDate51, 0, intArray85, 0);
        boolean boolean89 = dateTimeField19.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2011 + "'", int27 == 2011);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 70 + "'", int61 == 70);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "70" + "'", str64, "70");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100" + "'", str67, "100");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 536457600013L + "'", long70 == 536457600013L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[11, 12, 5, 1, 32769, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 99 + "'", int86 == 99);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[11, 12, 5, 1, 32769, 10]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        int int7 = property5.getMinimumValueOverall();
        int int8 = property5.getMinimumValue();
        org.joda.time.DurationField durationField9 = property5.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.YearMonth yearMonth12 = property5.setCopy((int) (short) 0);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-292275054) + "'", int7 == (-292275054));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-292275054) + "'", int8 == (-292275054));
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.getName();
        int int6 = localDate2.get(dateTimeFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        int int9 = localDate2.indexOf(dateTimeFieldType7);
        int int10 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate12 = localDate2.withYear(13);
        org.joda.time.LocalDate localDate14 = localDate2.withWeekyear(21597);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        boolean boolean9 = dateTimeFormatter7.isParser();
        java.util.Locale locale10 = dateTimeFormatter7.getLocale();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 32772);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime20.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology25 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter7.withChronology(chronology25);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        org.joda.time.DurationField durationField29 = chronology28.halfdays();
        long long33 = chronology28.add((long) 4, (long) (byte) 10, (int) '#');
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property35.getDifference(readableInstant37);
        org.joda.time.LocalDate localDate39 = property35.withMaximumValue();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str53 = dateTimeFieldType52.getName();
        org.joda.time.DateTime.Property property54 = dateTime51.property(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = property54.roundFloorCopy();
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime55.getZone();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate41.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.Chronology chronology60 = chronology28.withZone(dateTimeZone57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(22, 56165, 31, 1964, 21600000, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 354L + "'", long33 == 354L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weekyear" + "'", str53, "weekyear");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsText();
        java.lang.String str8 = property5.getAsText();
        java.lang.Object obj9 = null;
        boolean boolean10 = property5.equals(obj9);
        java.lang.String str11 = property5.getAsShortText();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970" + "'", str7, "1970");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970" + "'", str11, "1970");
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(dateTimeZone32);
        java.util.TimeZone timeZone34 = dateTimeZone32.toTimeZone();
        java.util.TimeZone timeZone35 = dateTimeZone32.toTimeZone();
        long long37 = dateTimeZone32.nextTransition((long) 11865377);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 11865377L + "'", long37 == 11865377L);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        java.util.Calendar.Builder builder13 = builder11.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar14 = builder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: -292275054");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(86397772);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusYears(2022);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str34 = dateTimeFieldType33.getName();
        org.joda.time.DateTime.Property property35 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime38 = dateTime21.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTime dateTime46 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillis((long) 32772);
        org.joda.time.DateTime dateTime50 = dateTime48.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = interval56.withChronology(chronology57);
        org.joda.time.Duration duration59 = interval56.toDuration();
        org.joda.time.DateTime dateTime60 = dateTime52.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTime dateTime62 = dateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) 'u');
        org.joda.time.DateTime dateTime64 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) '4');
        int int65 = dateTime11.getYear();
        boolean boolean66 = dateTimeZone1.equals((java.lang.Object) dateTime11);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property68 = dateTime67.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-52) + "'", int65 == (-52));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getName(10L);
        org.joda.time.Interval interval13 = localDate4.toInterval(dateTimeZone10);
        org.joda.time.LocalDate localDate15 = localDate4.plusWeeks(28800000);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        java.lang.String str19 = localDate17.toString();
        org.joda.time.LocalDate localDate21 = localDate17.minusYears(0);
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate.Property property25 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property25.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str28 = property25.getAsString();
        org.joda.time.LocalDate localDate29 = property25.roundHalfCeilingCopy();
        java.lang.String str30 = property25.getAsText();
        org.joda.time.LocalDate localDate32 = property25.addWrapFieldToCopy(796407);
        java.lang.String str33 = localDate32.toString();
        int int34 = localDate21.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) 6);
        long long44 = dateTimeZone37.getMillisKeepLocal(dateTimeZone40, (long) 10);
        org.joda.time.Interval interval45 = localDate35.toInterval(dateTimeZone37);
        long long47 = dateTimeZone37.convertUTCToLocal((long) 3);
        org.joda.time.DateMidnight dateMidnight48 = localDate32.toDateMidnight(dateTimeZone37);
        org.joda.time.DateTime dateTime49 = localDate15.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone37);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22" + "'", str28, "22");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "22" + "'", str30, "22");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2029-02-11" + "'", str33, "2029-02-11");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 21600000 + "'", int42 == 21600000);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 21600003L + "'", long47 == 21600003L);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.YearMonth yearMonth10 = yearMonth6.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = yearMonth10.withChronologyRetainFields(chronology11);
        int int13 = yearMonth1.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.YearMonth yearMonth15 = yearMonth12.minusYears(12);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodAfterStart(readablePeriod22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.YearMonth yearMonth29 = yearMonth17.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 32770);
        org.joda.time.PeriodType periodType30 = period25.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType32 = period25.getFieldType((int) (short) 1);
        org.joda.time.PeriodType periodType33 = period25.getPeriodType();
        org.joda.time.YearMonth yearMonth34 = yearMonth15.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.YearMonth yearMonth36 = yearMonth15.plusYears(9221);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = yearMonth15.toLocalDate(36677);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36677 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth36);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        java.util.Date date1 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.Date date12 = dateMidnight11.toDate();
        boolean boolean13 = date1.before(date12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date12);
        boolean boolean16 = localDate14.equals((java.lang.Object) 315532801000L);
        org.joda.time.Interval interval17 = localDate14.toInterval();
        org.joda.time.LocalDate.Property property18 = localDate14.weekOfWeekyear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str10, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(98);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime20.withDayOfWeek(28800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28800000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.monthOfYear();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = yearMonth39.toInterval(dateTimeZone40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth39.getFieldTypes();
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth44.toInterval(dateTimeZone45);
        org.joda.time.YearMonth yearMonth48 = yearMonth44.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth48.withChronologyRetainFields(chronology49);
        int int51 = yearMonth39.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth53 = yearMonth50.minus(readablePeriod52);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = yearMonth55.toInterval(dateTimeZone56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonth55.getFieldTypes();
        org.joda.time.YearMonth.Property property59 = yearMonth55.year();
        java.lang.String str60 = property59.toString();
        org.joda.time.YearMonth yearMonth61 = property59.getYearMonth();
        int[] intArray62 = yearMonth61.getValues();
        chronology33.validate((org.joda.time.ReadablePartial) yearMonth53, intArray62);
        org.joda.time.DateTimeField dateTimeField64 = chronology33.minuteOfDay();
        org.joda.time.YearMonth yearMonth65 = org.joda.time.YearMonth.now(chronology33);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[year]" + "'", str60, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(yearMonth65);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime.Property property21 = dateTime20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property24.getDifference(readableInstant26);
        org.joda.time.LocalDate localDate28 = property24.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean37 = localDate28.equals((java.lang.Object) dateTime36);
        java.util.Date date38 = localDate28.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getRangeDurationType();
        boolean boolean41 = localDate28.isSupported(dateTimeFieldType39);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = localDate46.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.LocalDate localDate58 = localDate46.minusYears(10);
        boolean boolean59 = localDate28.isAfter((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate62 = localDate58.withFieldAdded(durationFieldType60, 70);
        org.joda.time.DateTime dateTime63 = localDate58.toDateTimeAtMidnight();
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDate58, locale64);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-03-11" + "'", str11, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Feb" + "'", str65, "Feb");
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime11.minuteOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str36 = dateTimeFieldType35.getName();
        org.joda.time.DateTime.Property property37 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime39 = dateTime11.withField(dateTimeFieldType35, 1978);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime59.toMutableDateTime();
        org.joda.time.Chronology chronology61 = dateTime59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.halfdays();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.monthOfYear();
        java.lang.String str64 = chronology61.toString();
        org.joda.time.DateTime dateTime65 = dateTime49.withChronology(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weekyear" + "'", str36, "weekyear");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[+06:00]" + "'", str64, "ISOChronology[+06:00]");
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate16.minusDays(17724494);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate22 = property20.addWrapFieldToCopy((-1783));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property9.getDifference(readableInstant11);
        org.joda.time.LocalDate localDate13 = property9.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        boolean boolean22 = localDate13.equals((java.lang.Object) dateTime21);
        java.util.Date date23 = localDate13.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        boolean boolean26 = localDate13.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localDate31.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.LocalDate localDate43 = localDate31.minusYears(10);
        boolean boolean44 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate47 = localDate43.withFieldAdded(durationFieldType45, 70);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTime();
        org.joda.time.Chronology chronology58 = dateTime56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.monthOfYear();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property62.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = localDate63.toDateTimeAtStartOfDay(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str72 = dateTimeFieldType71.getName();
        org.joda.time.DateTime.Property property73 = dateTime70.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = property73.roundFloorCopy();
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime74.getZone();
        java.util.TimeZone timeZone77 = dateTimeZone76.toTimeZone();
        org.joda.time.Chronology chronology78 = chronology58.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfHalfday();
        org.joda.time.DurationField durationField80 = chronology78.seconds();
        boolean boolean81 = durationFieldType45.isSupported(chronology78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter6.withChronology(chronology78);
        org.joda.time.DateTimeField dateTimeField83 = chronology78.dayOfYear();
        org.joda.time.DateTimeField dateTimeField84 = chronology78.secondOfMinute();
        long long86 = dateTimeField84.roundHalfFloor(146817598379000L);
        long long88 = dateTimeField84.roundHalfEven((-21577404L));
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyear" + "'", str72, "weekyear");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 146817598379000L + "'", long86 == 146817598379000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-21577000L) + "'", long88 == (-21577000L));
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        java.util.Date date6 = new java.util.Date(36, 63399288, 31765119, 25156829, (-824033), 360240000);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Sep 01 09:47:00 UTC 5375059");
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        java.util.Locale locale8 = new java.util.Locale("70", "hi!");
        int int9 = property1.getMaximumShortTextLength(locale8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property12.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        int int17 = dateTimeField15.get((long) 'u');
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = dateTimeField15.getAsText((long) 5, locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale8.getDisplayVariant(locale19);
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.toLanguageTag();
        java.util.Locale locale28 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        java.lang.String str29 = locale23.getDisplayLanguage(locale28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str41 = dateTimeFieldType40.getName();
        org.joda.time.DateTime.Property property42 = dateTime39.property(dateTimeFieldType40);
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.DateTimeField dateTimeField44 = property42.getField();
        long long47 = dateTimeField44.add((long) (byte) 10, (-1));
        long long50 = dateTimeField44.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeField44.getAsShortText(70, locale52);
        org.joda.time.DurationField durationField54 = dateTimeField44.getDurationField();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        java.lang.String str59 = dateTimeZone57.getName(10L);
        java.util.Locale locale63 = new java.util.Locale("70", "hi!");
        java.lang.String str64 = dateTimeZone57.getName((long) '4', locale63);
        java.lang.String str65 = locale63.toLanguageTag();
        java.lang.String str66 = dateTimeField44.getAsShortText((-360L), locale63);
        java.lang.String str67 = locale28.getDisplayName(locale63);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.lang.String str69 = locale63.getDisplayLanguage(locale68);
        java.lang.String str70 = locale19.getDisplayVariant(locale63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = locale19.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals(locale8.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "70" + "'", str20, "70");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertEquals(locale28.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French" + "'", str29, "French");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "weekyear" + "'", str41, "weekyear");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-31449599990L) + "'", long47 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 315705600000L + "'", long50 == 315705600000L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "70" + "'", str53, "70");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertEquals(locale63.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "und" + "'", str65, "und");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970" + "'", str66, "1970");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "5 jun 798307 11:57:00 gmt (PT0S,1969)" + "'", str67, "5 jun 798307 11:57:00 gmt (PT0S,1969)");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "70" + "'", str69, "70");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.withWeekOfWeekyear(22);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.minutes();
        boolean boolean21 = localDate19.isSupported(durationFieldType20);
        org.joda.time.LocalDate localDate23 = localDate19.minusDays(57);
        org.joda.time.LocalDate.Property property24 = localDate19.weekyear();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = localDate29.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = localDate19.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str43 = dateTimeZone35.getShortName(3632780L);
        org.joda.time.Chronology chronology44 = chronology10.withZone(dateTimeZone35);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate51 = localDate47.minusYears(11);
        org.joda.time.LocalDate.Property property52 = localDate51.year();
        org.joda.time.LocalDate localDate53 = property52.roundCeilingCopy();
        org.joda.time.LocalDate localDate55 = localDate53.withYear((int) ' ');
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        org.joda.time.LocalDate localDate58 = property57.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone61);
        org.joda.time.DateTime dateTime64 = localDate58.toDateTimeAtStartOfDay(dateTimeZone61);
        org.joda.time.LocalDate localDate66 = localDate58.plusMonths((int) (short) 1);
        int[] intArray67 = localDate66.getValues();
        chronology10.validate((org.joda.time.ReadablePartial) localDate53, intArray67);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+06:00" + "'", str43, "+06:00");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[2022, 3, 11]");
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.Chronology chronology23 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter2.getPrinter();
        boolean boolean25 = dateTimeFormatter2.isParser();
        java.lang.Integer int26 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology27 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTimeFormatter28.parseDateTime("22");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertNull(dateTimePrinter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate.Property property17 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        int int22 = dateTimeField20.get((long) 'u');
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.lang.String str25 = dateTimeField20.getAsText((long) 5, locale24);
        int int26 = property12.getMaximumTextLength(locale24);
        org.joda.time.DurationField durationField27 = property12.getDurationField();
        int int28 = property12.getLeapAmount();
        java.lang.String str29 = property12.getAsShortText();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "70" + "'", str25, "70");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.plusMinutes((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis(21600003L);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(28800);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfHalfday();
        long long7 = dateTimeField5.roundCeiling((long) 'a');
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = yearMonth12.toString(dateTimeFormatter17);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = yearMonth20.getFieldTypes();
        org.joda.time.YearMonth.Property property24 = yearMonth20.year();
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = yearMonth28.toInterval(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval30.withPeriodAfterStart(readablePeriod31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval32.toPeriod(periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean36 = period34.isSupported(durationFieldType35);
        org.joda.time.YearMonth yearMonth38 = yearMonth26.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 32770);
        org.joda.time.YearMonth yearMonth39 = yearMonth20.minus((org.joda.time.ReadablePeriod) period34);
        boolean boolean40 = yearMonth12.isAfter((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology41 = yearMonth39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter10.withChronology(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.months();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.monthOfYear();
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Interval interval49 = yearMonth47.toInterval(dateTimeZone48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = yearMonth47.getFieldTypes();
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = yearMonth52.toInterval(dateTimeZone53);
        org.joda.time.YearMonth yearMonth56 = yearMonth52.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = yearMonth56.withChronologyRetainFields(chronology57);
        int int59 = yearMonth47.compareTo((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.YearMonth yearMonth61 = yearMonth58.minus(readablePeriod60);
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = yearMonth63.toInterval(dateTimeZone64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = yearMonth63.getFieldTypes();
        org.joda.time.YearMonth.Property property67 = yearMonth63.year();
        java.lang.String str68 = property67.toString();
        org.joda.time.YearMonth yearMonth69 = property67.getYearMonth();
        int[] intArray70 = yearMonth69.getValues();
        chronology41.validate((org.joda.time.ReadablePartial) yearMonth61, intArray70);
        java.util.Locale locale75 = new java.util.Locale("1970", "100");
        java.lang.String str76 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) yearMonth61, 22, locale75);
        java.util.Calendar.Builder builder78 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder80 = builder78.setInstant((long) 32770);
        java.util.Calendar calendar81 = builder80.build();
        java.util.Calendar.Builder builder85 = builder80.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.lang.String str87 = locale86.getCountry();
        java.lang.String str88 = locale86.getDisplayCountry();
        java.util.Calendar.Builder builder89 = builder80.setLocale(locale86);
        java.lang.String str90 = locale86.getVariant();
        java.lang.String str91 = dateTimeField5.getAsText(360240000, locale86);
        int int93 = dateTimeField5.getLeapAmount((-31730400000L));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3600000L + "'", long7 == 3600000L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01" + "'", str18, "1970-01");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Property[year]" + "'", str68, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1]");
        org.junit.Assert.assertEquals(locale75.toString(), "1970_100");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "22" + "'", str76, "22");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "360240000" + "'", str91, "360240000");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = yearMonth38.toInterval(dateTimeZone39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = yearMonth38.getFieldTypes();
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = yearMonth38.toString(dateTimeFormatter43);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth46.toInterval(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = yearMonth46.getFieldTypes();
        org.joda.time.YearMonth.Property property50 = yearMonth46.year();
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = yearMonth54.toInterval(dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Interval interval58 = interval56.withPeriodAfterStart(readablePeriod57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval58.toPeriod(periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean62 = period60.isSupported(durationFieldType61);
        org.joda.time.YearMonth yearMonth64 = yearMonth52.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 32770);
        org.joda.time.YearMonth yearMonth65 = yearMonth46.minus((org.joda.time.ReadablePeriod) period60);
        boolean boolean66 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth65);
        org.joda.time.Chronology chronology67 = yearMonth65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.year();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology67.getZone();
        org.joda.time.Chronology chronology70 = chronology33.withZone(dateTimeZone69);
        long long74 = chronology70.add((-31449599990L), (long) 19, (int) 'a');
        org.joda.time.DateTimeField dateTimeField75 = chronology70.dayOfWeek();
        org.joda.time.DurationField durationField76 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.millisOfSecond();
        long long80 = dateTimeField77.getDifferenceAsLong((-172799664L), 3087734171000L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01" + "'", str44, "1970-01");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-31449598147L) + "'", long74 == (-31449598147L));
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-3087906970664L) + "'", long80 == (-3087906970664L));
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 32772);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime14.minusSeconds((int) (short) -1);
        boolean boolean19 = localDate2.equals((java.lang.Object) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        int int22 = localDate2.indexOf(dateTimeFieldType20);
        org.joda.time.LocalDate localDate24 = localDate2.withCenturyOfEra(7);
        org.joda.time.LocalDate.Property property25 = localDate2.weekyear();
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = yearMonth27.toInterval(dateTimeZone28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonth27.getFieldTypes();
        org.joda.time.YearMonth.Property property31 = yearMonth27.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth27.toString(dateTimeFormatter32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = yearMonth35.toInterval(dateTimeZone36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = yearMonth35.getFieldTypes();
        org.joda.time.YearMonth.Property property39 = yearMonth35.year();
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = yearMonth43.toInterval(dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Interval interval47 = interval45.withPeriodAfterStart(readablePeriod46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval47.toPeriod(periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean51 = period49.isSupported(durationFieldType50);
        org.joda.time.YearMonth yearMonth53 = yearMonth41.withPeriodAdded((org.joda.time.ReadablePeriod) period49, 32770);
        org.joda.time.YearMonth yearMonth54 = yearMonth35.minus((org.joda.time.ReadablePeriod) period49);
        boolean boolean55 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology56 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth(chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears(0);
        int int60 = yearMonth59.getYear();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = property25.compareTo((org.joda.time.ReadablePartial) yearMonth59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01" + "'", str33, "1970-01");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime24 = dateTime19.plusMillis(6);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.minusHours(86397772);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder32 = builder28.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder33 = builder28.clearExtensions();
        java.util.Locale.Builder builder35 = builder28.setLanguage("TWN");
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        boolean boolean37 = dateTime27.equals((java.lang.Object) builder35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder39 = builder35.removeUnicodeLocaleAttribute("java.util.GregorianCalendar[time=24332133632770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.util.GregorianCalendar[time=24332133632770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        date17.setDate(625);
        int int20 = date17.getMinutes();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Aug 17 23:59:57 UTC 1971");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        int int7 = date6.getDay();
        long long8 = date6.getTime();
        java.time.Instant instant9 = date6.toInstant();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = localDate12.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str21 = dateTimeFieldType20.getName();
        org.joda.time.DateTime.Property property22 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTime dateTime23 = property22.roundFloorCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        org.joda.time.DateTime dateTime26 = property24.addToCopy(42);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale36.getVariant();
        java.util.Calendar calendar38 = dateTime35.toCalendar(locale36);
        boolean boolean39 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property50 = dateTime49.year();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime59.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str62 = dateTimeFieldType61.getName();
        org.joda.time.DateTime.Property property63 = dateTime60.property(dateTimeFieldType61);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime66 = dateTime49.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean70 = dateTimeZone69.isFixed();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone69);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.DateTime dateTime74 = localDate71.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.withMillis((long) 32772);
        org.joda.time.DateTime dateTime78 = dateTime76.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime80 = dateTime78.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Interval interval86 = interval84.withChronology(chronology85);
        org.joda.time.Duration duration87 = interval84.toDuration();
        org.joda.time.DateTime dateTime88 = dateTime80.plus((org.joda.time.ReadableDuration) duration87);
        org.joda.time.DateTime dateTime90 = dateTime49.withDurationAdded((org.joda.time.ReadableDuration) duration87, (int) 'u');
        org.joda.time.DateTime dateTime92 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration87, 6);
        int int93 = dateTime26.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime26.toMutableDateTime();
        org.joda.time.DateTime dateTime96 = dateTime26.withCenturyOfEra(86397);
        boolean boolean97 = date6.equals((java.lang.Object) dateTime96);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1889963999000L) + "'", long8 == (-1889963999000L));
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekyear" + "'", str21, "weekyear");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "weekyear" + "'", str62, "weekyear");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getNameKey(0L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        long long6 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        java.lang.Object obj8 = null;
        boolean boolean9 = calendar3.after(obj8);
        java.lang.Object obj10 = calendar3.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32770L + "'", long6 == 32770L);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder10 = builder6.setDate((int) (byte) 0, 360240000, 86397772);
        java.util.Calendar.Builder builder15 = builder6.setTimeOfDay((-52), 32770, 122, 479);
        java.util.Calendar.Builder builder20 = builder6.setTimeOfDay(3, 412, 56182, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder20.setCalendarType("52");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setUnicodeLocaleKeyword("-292275054", "Mon May 08 22:08:33 UTC 1905");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: -292275054 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int9 = property5.getMaximumShortTextLength(locale8);
        int int10 = property5.getMinimumValueOverall();
        int int11 = property5.get();
        java.util.Locale locale13 = new java.util.Locale("yearOfCentury");
        int int14 = property5.getMaximumTextLength(locale13);
        org.joda.time.YearMonth yearMonth15 = property5.getYearMonth();
        int int16 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertEquals(locale13.toString(), "yearofcentury");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.Chronology chronology23 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withDefaultYear(16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = dateTimeFormatter26.parseLocalDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertNull(dateTimePrinter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.minusYears(2922749);
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.setLanguage("TWN");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("TWN");
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("56199");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.addUnicodeLocaleAttribute("hourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hourOfHalfday [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        int int12 = property11.get();
        org.joda.time.LocalDate localDate14 = property11.addToCopy(0);
        org.joda.time.LocalDate localDate16 = localDate14.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate18 = localDate14.withCenturyOfEra(1910);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyear();
        org.joda.time.DurationField durationField8 = chronology2.millis();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        int int19 = property18.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.LocalDate localDate21 = localDate13.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property22 = localDate13.dayOfMonth();
        int int23 = localDate13.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean25 = localDate13.isSupported(dateTimeFieldType24);
        boolean boolean26 = localDate2.isSupported(dateTimeFieldType24);
        int int27 = localDate2.getEra();
        org.joda.time.LocalDate.Property property28 = localDate2.yearOfCentury();
        org.joda.time.DateTime dateTime29 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour(43);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis(62);
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes(100);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate.Property property13 = localDate12.era();
        org.joda.time.LocalDate localDate15 = localDate12.plusMonths(62);
        int int16 = localDate12.getYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.YearMonth yearMonth7 = org.joda.time.YearMonth.now(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getShortName(1644516000000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(937, 292278993, 58, (-113952), 375, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -113952 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str25 = dateTimeFieldType24.getName();
        org.joda.time.DateTime.Property property26 = dateTime23.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = property26.roundFloorCopy();
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime27.getZone();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.Chronology chronology31 = chronology11.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField32 = chronology11.seconds();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField34 = chronology11.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology11.getDateTimeMillis(13, 36, 14, 201122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyear" + "'", str25, "weekyear");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField7 = durationFieldType1.getField(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(315532800002L, chronology4);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtMidnight(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfEra();
        long long34 = dateTimeField32.remainder((-1325289600000L));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 194400000L + "'", long34 == 194400000L);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        int int7 = localDate6.getYear();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(100);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int17 = dateTimeZone15.getOffsetFromLocal((long) 6);
        long long19 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        long long21 = dateTimeZone15.nextTransition((long) 'u');
        java.lang.String str22 = dateTimeZone15.toString();
        org.joda.time.DateMidnight dateMidnight23 = localDate9.toDateMidnight(dateTimeZone15);
        int int24 = localDate9.size();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        java.lang.String str28 = property26.getName();
        long long29 = property26.remainder();
        int int30 = property26.getMinimumValue();
        org.joda.time.LocalDate localDate31 = property26.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property26.getFieldType();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = locale33.getCountry();
        java.util.Locale locale35 = locale33.stripExtensions();
        int int36 = property26.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property26.getField();
        int int38 = dateTimeField37.getMinimumValue();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.LocalDate localDate49 = localDate41.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property50 = localDate41.dayOfMonth();
        org.joda.time.LocalDate.Property property51 = localDate41.weekyear();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property53 = localDate52.yearOfCentury();
        org.joda.time.LocalDate localDate54 = property53.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean58 = dateTimeZone57.isFixed();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDate54.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.DateTime dateTime61 = dateTime60.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str63 = dateTimeFieldType62.getName();
        org.joda.time.DateTime.Property property64 = dateTime61.property(dateTimeFieldType62);
        org.joda.time.DateTime dateTime65 = property64.roundFloorCopy();
        org.joda.time.DateTime.Property property66 = dateTime65.year();
        int int67 = property51.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDate localDate69 = property51.addWrapFieldToCopy(32770);
        org.joda.time.LocalTime localTime70 = null;
        org.joda.time.DateTime dateTime71 = localDate69.toDateTime(localTime70);
        int int72 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateTime dateTime73 = localDate69.toDateTimeAtMidnight();
        boolean boolean74 = localDate9.isBefore((org.joda.time.ReadablePartial) localDate69);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2011 + "'", int7 == 2011);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21600000 + "'", int17 == 21600000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 117L + "'", long21 == 117L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+06:00" + "'", str22, "+06:00");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearOfCentury" + "'", str28, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3542400000L + "'", long29 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FR" + "'", str34, "FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "weekyear" + "'", str63, "weekyear");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 99 + "'", int72 == 99);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        calendar3.roll(0, false);
        calendar3.setWeekDate(1969, (int) '4', 6);
        calendar3.set(86397, 21600000, 693);
        calendar3.setTimeInMillis((long) 56170);
        java.lang.String str25 = calendar3.getCalendarType();
        java.time.Instant instant26 = calendar3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale32 = new java.util.Locale("yearOfCentury");
        boolean boolean33 = dateTimeZone30.equals((java.lang.Object) locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = calendar3.getDisplayName(292275055, 7, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=56170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=56,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals(locale32.toString(), "yearofcentury");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis(4);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = localDate25.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.DateTime.Property property36 = dateTime35.year();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.DateTime.Property property50 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        org.joda.time.DateTime dateTime54 = property50.addToCopy(5);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = interval60.withChronology(chronology61);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.DateTime dateTime64 = dateTime54.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval65 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime66 = dateTime16.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime68 = dateTime16.plusYears(21597772);
        org.joda.time.DateTime dateTime70 = dateTime16.plusMonths(59);
        org.joda.time.DateTime dateTime71 = dateTime16.toDateTime();
        int int72 = dateTime16.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyear" + "'", str49, "weekyear");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20 + "'", int72 == 20);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 32772);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = interval22.withChronology(chronology23);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.DateTime dateTime26 = dateTime18.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded((long) ' ', (int) (byte) 100);
        int int30 = dateTime26.getSecondOfDay();
        org.joda.time.DateTime.Property property31 = dateTime26.dayOfMonth();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int40 = dateTimeZone38.getOffsetFromLocal((long) 6);
        long long42 = dateTimeZone35.getMillisKeepLocal(dateTimeZone38, (long) 10);
        org.joda.time.Interval interval43 = localDate33.toInterval(dateTimeZone35);
        org.joda.time.DateTime dateTime44 = localDate32.toDateTimeAtMidnight(dateTimeZone35);
        java.lang.String str45 = dateTimeZone35.toString();
        long long47 = dateTimeZone35.nextTransition((long) 0);
        boolean boolean49 = dateTimeZone35.isStandardOffset(31535997772L);
        long long52 = dateTimeZone35.convertLocalToUTC((long) 22, true);
        org.joda.time.DateTime dateTime53 = dateTime26.withZone(dateTimeZone35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(1970, 3891223, (-292275054), 21, 86395544, dateTimeZone35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86395544 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 86397 + "'", int30 == 86397);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21600000 + "'", int40 == 21600000);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+06:00" + "'", str45, "+06:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-21599978L) + "'", long52 == (-21599978L));
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate6 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        boolean boolean8 = durationFieldType0.isSupported(chronology7);
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfMinute();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        long long6 = calendar3.getTimeInMillis();
        calendar3.setTimeInMillis(0L);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 32770);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean14 = calendar12.after((java.lang.Object) (byte) 10);
        java.util.Date date15 = calendar12.getTime();
        long long16 = date15.getTime();
        calendar3.setTime(date15);
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder22 = builder20.setInstant((long) 32770);
        java.util.Calendar calendar23 = builder22.build();
        java.util.Date date24 = calendar23.getTime();
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale29 = new java.util.Locale("31 Dec 1969 18:00:00 GMT");
        java.util.Locale.setDefault(category27, locale29);
        java.util.Map<java.lang.String, java.lang.Integer> strMap31 = calendar23.getDisplayNames((int) (short) 10, 2, locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = calendar3.getDisplayName((-2740), 2848, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32770L + "'", long6 == 32770L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32770L + "'", long16 == 32770L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale29.toString(), "31 dec 1969 18:00:00 gmt");
        org.junit.Assert.assertNull(strMap31);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int7 = dateTimeField5.get((long) 'u');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        int int11 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate10);
        long long14 = dateTimeField5.add((long) (byte) 100, 12);
        boolean boolean15 = dateTimeField5.isSupported();
        long long18 = dateTimeField5.add(0L, (-40176));
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str30 = dateTimeFieldType29.getName();
        org.joda.time.DateTime.Property property31 = dateTime28.property(dateTimeFieldType29);
        org.joda.time.DateTime dateTime32 = property31.roundFloorCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.secondOfMinute();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        int int36 = property33.getMaximumShortTextLength(locale34);
        int int37 = dateTimeField5.getMaximumShortTextLength(locale34);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 378691200100L + "'", long14 == 378691200100L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1267832044800000L) + "'", long18 == (-1267832044800000L));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekyear" + "'", str30, "weekyear");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        int int6 = calendar3.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar3.get((-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -46800000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.setLanguage("TWN");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("TWN");
        java.util.Locale.Builder builder11 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder8.addUnicodeLocaleAttribute("1970-01");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-01 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        int int14 = dateTime13.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime13.withDate(42, 1518171, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1518171 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        boolean boolean12 = interval11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusYears(2022);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime32.year();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.DateTime.Property property46 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime49 = dateTime32.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillis((long) 32772);
        org.joda.time.DateTime dateTime61 = dateTime59.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime63 = dateTime61.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = interval67.withChronology(chronology68);
        org.joda.time.Duration duration70 = interval67.toDuration();
        org.joda.time.DateTime dateTime71 = dateTime63.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime73 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) 'u');
        org.joda.time.DateTime dateTime75 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean79 = dateTimeZone78.isFixed();
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone78);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.DateTime dateTime83 = localDate80.toDateTimeAtCurrentTime(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusYears(2022);
        int int86 = dateTime85.getCenturyOfEra();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Interval interval88 = interval11.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        boolean boolean90 = interval11.isBefore(31535997772L);
        org.joda.time.Interval interval92 = interval11.withStartMillis(1644572290517L);
        boolean boolean93 = interval92.isAfterNow();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        boolean boolean7 = dateTimeFormatter2.isParser();
        boolean boolean8 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        boolean boolean10 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int7 = dateTimeField5.get((long) 'u');
        long long10 = dateTimeField5.addWrapField((long) (short) -1, 1);
        java.lang.String str12 = dateTimeField5.getAsText((long) 48);
        java.util.Locale locale15 = new java.util.Locale("");
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate.Property property18 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property18.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        int int23 = dateTimeField21.get((long) 'u');
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = dateTimeField21.getAsText((long) 5, locale25);
        java.lang.String str27 = locale15.getDisplayVariant(locale25);
        java.lang.String str28 = dateTimeField5.getAsText(34522218L, locale25);
        java.lang.String str30 = dateTimeField5.getAsShortText(7776000007L);
        long long32 = dateTimeField5.roundFloor((long) 27);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 31535999999L + "'", long10 == 31535999999L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "70" + "'", str12, "70");
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "70" + "'", str26, "70");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "70" + "'", str28, "70");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "70" + "'", str30, "70");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.removeUnicodeLocaleAttribute("eras");
        java.util.Locale locale36 = builder35.build();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone29, locale36);
        calendar37.setMinimalDaysInFirstWeek(86399);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = calendar37.get(34713);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34713");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572462196,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=41,SECOND=2,MILLISECOND=196,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572462196,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=86399,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=41,SECOND=2,MILLISECOND=196,ZONE_OFFSET=21600000,DST_OFFSET=0]");
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.minusMonths(2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((long) (short) 1, chronology6);
        org.joda.time.Chronology chronology8 = yearMonth7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = yearMonth4.withChronologyRetainFields(chronology8);
        org.joda.time.Interval interval13 = yearMonth4.toInterval();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = yearMonth15.toInterval(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Interval interval19 = interval17.withPeriodAfterStart(readablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone22);
        boolean boolean24 = interval19.overlaps((org.joda.time.ReadableInterval) interval23);
        long long25 = interval19.getEndMillis();
        org.joda.time.Duration duration26 = interval19.toDuration();
        org.joda.time.Interval interval27 = interval13.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval27);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField31 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology10.clockhourOfDay();
        long long34 = dateTimeField32.roundHalfFloor((long) 86395544);
        boolean boolean36 = dateTimeField32.isLeap(18021597L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86400000L + "'", long34 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        long long7 = date6.getTime();
        java.lang.String str8 = date6.toLocaleString();
        int int9 = date6.getTimezoneOffset();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1889963999000L) + "'", long7 == (-1889963999000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Feb 10, 1910 10:00:01 AM" + "'", str8, "Feb 10, 1910 10:00:01 AM");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth6.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth6.year();
        int int11 = property10.getMinimumValue();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale12.getDisplayVariant(locale14);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale14);
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("gregory");
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setLocale(locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder10 = builder6.setDate(0, (-3599), 22);
        java.util.Calendar.Builder builder14 = builder10.setTimeOfDay(16, 5, 34530606);
        java.util.Calendar.Builder builder18 = builder14.setTimeOfDay((int) (byte) 10, 292275055, (-625));
        java.util.Calendar calendar19 = builder18.build();
        calendar19.set(42, 238, 22);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=42,MONTH=238,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=22,DAY_OF_YEAR=308,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=44,SECOND=35,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.Interval interval7 = interval3.withStartMillis((long) 32772);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval11.withPeriodAfterStart(readablePeriod12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval13.toPeriod(periodType14);
        boolean boolean17 = interval13.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval18 = interval13.toMutableInterval();
        long long19 = interval13.getEndMillis();
        org.joda.time.MutableInterval mutableInterval20 = interval13.toMutableInterval();
        org.joda.time.Interval interval21 = interval3.gap((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.String str22 = interval3.toString();
        boolean boolean24 = interval3.isAfter(117L);
        long long25 = interval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNull(interval21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000Z/1970-02-01T00:00:00.000Z" + "'", str22, "1970-01-01T00:00:00.000Z/1970-02-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime9.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillis((long) 32772);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        org.joda.time.Duration duration47 = interval44.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime40.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime50 = dateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) 'u');
        org.joda.time.DateTime dateTime52 = dateTime9.minus(12L);
        org.joda.time.DateTime.Property property53 = dateTime9.centuryOfEra();
        java.lang.String str54 = property53.getAsString();
        int int55 = property53.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "20" + "'", str54, "20");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronolgy();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.LocalDate localDate18 = localDate10.plusMonths((int) (short) 1);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = localDate24.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate18.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        java.lang.Integer int31 = dateTimeFormatter29.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeFormatter29.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-03-11" + "'", str19, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = yearMonth3.toInterval(dateTimeZone4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property7 = yearMonth3.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = yearMonth3.toString(dateTimeFormatter8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth11.toInterval(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonth11.getFieldTypes();
        org.joda.time.YearMonth.Property property15 = yearMonth11.year();
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodAfterStart(readablePeriod22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.YearMonth yearMonth29 = yearMonth17.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 32770);
        org.joda.time.YearMonth yearMonth30 = yearMonth11.minus((org.joda.time.ReadablePeriod) period25);
        boolean boolean31 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology32 = yearMonth30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.DurationField durationField34 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology32.withZone(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(360240000, (-292275054), chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360240000 for year must not be larger than 292278993");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01" + "'", str9, "1970-01");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = interval4.withChronology(chronology5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime16 = dateTime15.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        boolean boolean18 = interval6.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime16);
        int int20 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime.Property property21 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond(11);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.removeUnicodeLocaleAttribute("eras");
        java.util.Locale locale28 = builder27.build();
        boolean boolean29 = locale28.hasExtensions();
        java.util.Calendar calendar30 = dateTime22.toCalendar(locale28);
        java.lang.String str31 = locale28.toString();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        int int2 = yearMonth1.size();
        org.joda.time.YearMonth yearMonth4 = yearMonth1.minusMonths(3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.plusYears(48);
        int int7 = yearMonth6.getYear();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property9.getDifference(readableInstant11);
        org.joda.time.LocalDate localDate13 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate24 = dateTime22.toLocalDate();
        int int25 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        boolean boolean27 = localDate24.isSupported(durationFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth29 = yearMonth6.withFieldAdded(durationFieldType26, 8771);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2017 + "'", int7 == 2017);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.plusSeconds(0);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.LocalDate localDate27 = dateTime25.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder10 = builder6.setDate((int) (byte) 0, 360240000, 86397772);
        java.util.Calendar.Builder builder15 = builder6.setTimeOfDay((-52), 32770, 122, 479);
        java.util.Calendar.Builder builder20 = builder6.setTimeOfDay(3, 412, 56182, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(1644572196942L);
        int[] intArray23 = yearMonth22.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder24 = builder6.setFields(intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2]");
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(86397);
        org.joda.time.DateTime dateTime18 = dateTime16.minus((long) 99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime18.withDate((int) (byte) 0, 28800, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28800 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate35 = localDate23.minusYears(10);
        boolean boolean36 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        boolean boolean38 = localDate35.isSupported(durationFieldType37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        java.lang.String str43 = chronology41.toString();
        org.joda.time.DurationField durationField44 = durationFieldType37.getField(chronology41);
        java.lang.String str45 = durationFieldType37.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "days" + "'", str45, "days");
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate2.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = property12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime26.toYearMonthDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.DateMidnight dateMidnight32 = localDate31.toDateMidnight();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate.Property property35 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property35.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        int int40 = dateTimeField38.get((long) 'u');
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property42 = localDate41.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property42.getLocalDate();
        int int44 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localDate43);
        boolean boolean45 = localDate31.isAfter((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property47.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        org.joda.time.DateTime dateTime54 = localDate48.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = dateTime54.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property56 = dateTime55.year();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property58 = localDate57.yearOfCentury();
        org.joda.time.LocalDate localDate59 = property58.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean63 = dateTimeZone62.isFixed();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone62);
        org.joda.time.DateTime dateTime65 = localDate59.toDateTimeAtStartOfDay(dateTimeZone62);
        org.joda.time.DateTime dateTime66 = dateTime65.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str68 = dateTimeFieldType67.getName();
        org.joda.time.DateTime.Property property69 = dateTime66.property(dateTimeFieldType67);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime72 = dateTime55.minusDays(32772);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.plus(readableDuration73);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime72.getZone();
        org.joda.time.DateMidnight dateMidnight76 = localDate43.toDateMidnight(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = dateTime26.withZoneRetainFields(dateTimeZone75);
        java.util.Date date78 = dateTime26.toDate();
        boolean boolean79 = dateTime26.isEqualNow();
        org.joda.time.DateTime dateTime81 = dateTime26.plusMonths((-9));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "weekyear" + "'", str68, "weekyear");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Jan 02 18:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Locale locale6 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        java.util.Calendar.Builder builder7 = builder2.setLocale(locale6);
        java.util.Locale locale9 = new java.util.Locale("");
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale9.getScript();
        java.util.Calendar.Builder builder12 = builder2.setLocale(locale9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder30 = builder2.setTimeZone(timeZone29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder34 = builder2.setDate(39, 2, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale6.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        java.lang.String str13 = localDate12.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate12.withEra(13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-28" + "'", str13, "2022-02-28");
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = dateTimeField14.getRangeDurationField();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate22 = localDate20.plusMonths(32772);
        org.joda.time.LocalDate localDate24 = localDate20.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property25 = localDate20.weekyear();
        int int26 = localDate20.getYearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        java.util.Locale locale31 = dateTimeFormatter29.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter29.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology34 = dateTimeFormatter29.getChronolgy();
        java.lang.Integer int35 = dateTimeFormatter29.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int39 = dateTimeZone37.getOffset((long) 2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter29.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localDate20.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = property43.getDifference(readableInstant45);
        org.joda.time.LocalDate localDate47 = property43.withMaximumValue();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        int int50 = localDate49.getYearOfEra();
        int int51 = localDate49.getYearOfCentury();
        int[] intArray52 = localDate49.getValues();
        int int53 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDate20, intArray52);
        org.joda.time.LocalDate localDate55 = localDate20.withWeekyear(20);
        org.joda.time.LocalDate localDate57 = localDate55.withCenturyOfEra(40);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 17 + "'", int26 == 17);
        org.junit.Assert.assertNull(dateTimeZone30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(chronology34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21600000 + "'", int39 == 21600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 2, 11]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 53 + "'", int53 == 53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T15:38:12.218+06:00/2022-02-11T15:38:12.218+06:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t15:38:12.218+06:00/2022-02-11t15:38:12.218+06:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("KR");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth6.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth6.year();
        java.lang.String str11 = property10.toString();
        org.joda.time.YearMonth yearMonth12 = property10.getYearMonth();
        org.joda.time.YearMonth yearMonth14 = property10.setCopy(2022);
        org.joda.time.YearMonth yearMonth16 = property10.addToCopy(4);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale17.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleKeys();
        java.lang.String str21 = property10.getAsShortText(locale17);
        int int22 = property10.getMinimumValue();
        java.lang.String str23 = property10.getAsText();
        boolean boolean24 = languageRange1.equals((java.lang.Object) str23);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kr" + "'", str2, "kr");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[year]" + "'", str11, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-292275054) + "'", int22 == (-292275054));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        long long10 = dateTimeField8.roundCeiling((-21599902L));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-18000000L) + "'", long10 == (-18000000L));
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime9.minusDays(32772);
        org.joda.time.DateTime.Property property27 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder31 = builder29.setInstant((long) 32770);
        java.util.Calendar calendar32 = builder31.build();
        boolean boolean34 = calendar32.after((java.lang.Object) 70);
        calendar32.set(10, 32772, (int) (byte) 1, 22, 0);
        long long41 = calendar32.getTimeInMillis();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str53 = dateTimeFieldType52.getName();
        org.joda.time.DateTime.Property property54 = dateTime51.property(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = property54.roundFloorCopy();
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime55.getZone();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        calendar32.setTimeZone(timeZone58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime62 = dateTime28.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone65);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.minutes();
        boolean boolean69 = localDate67.isSupported(durationFieldType68);
        org.joda.time.LocalDate.Property property70 = localDate67.centuryOfEra();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property72 = localDate71.yearOfCentury();
        org.joda.time.LocalDate localDate73 = property72.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean77 = dateTimeZone76.isFixed();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone76);
        org.joda.time.DateTime dateTime79 = localDate73.toDateTimeAtStartOfDay(dateTimeZone76);
        long long80 = property70.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = dateTime79.isEqualNow();
        int int82 = dateTime62.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 24332133632770L + "'", long41 == 24332133632770L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weekyear" + "'", str53, "weekyear");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644572463051,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=41,SECOND=3,MILLISECOND=51,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        java.lang.String str33 = chronology30.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.util.Calendar calendar11 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis((long) 32772);
        org.joda.time.DateTime dateTime23 = dateTime21.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = interval29.withChronology(chronology30);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.DateTime dateTime33 = dateTime25.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration32);
        long long35 = interval34.toDurationMillis();
        org.joda.time.DateTime dateTime36 = interval34.getEnd();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localDate41.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime51.plusWeeks(21600000);
        org.joda.time.DateTime dateTime55 = dateTime53.withMillis((long) 1970);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property57 = dateTime36.yearOfEra();
        int int58 = dateTime36.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 11L + "'", long35 == 11L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        java.util.Date date1 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.Date date12 = dateMidnight11.toDate();
        boolean boolean13 = date1.before(date12);
        date1.setDate(9);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Jan 09 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str10, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        int int23 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property27.getDifference(readableInstant29);
        org.joda.time.LocalDate localDate31 = property27.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateTime dateTime39 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean40 = localDate31.equals((java.lang.Object) dateTime39);
        java.util.Date date41 = localDate31.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getRangeDurationType();
        boolean boolean44 = localDate31.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime dateTime46 = dateTime22.withField(dateTimeFieldType42, 365);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str5 = property2.getAsString();
        int int6 = property2.getMaximumValue();
        java.lang.String str7 = property2.getAsText();
        java.util.Locale locale11 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str12 = locale11.getCountry();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str14 = property2.getAsShortText(locale11);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 99 + "'", int6 == 99);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertEquals(locale11.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1969-12" + "'", str12, "1969-12");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = yearMonth2.toInterval(dateTimeZone3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonth2.getFieldTypes();
        org.joda.time.YearMonth.Property property6 = yearMonth2.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = yearMonth2.toString(dateTimeFormatter7);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = yearMonth10.getFieldTypes();
        org.joda.time.YearMonth.Property property14 = yearMonth10.year();
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = yearMonth18.toInterval(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = interval20.withPeriodAfterStart(readablePeriod21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean26 = period24.isSupported(durationFieldType25);
        org.joda.time.YearMonth yearMonth28 = yearMonth16.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 32770);
        org.joda.time.YearMonth yearMonth29 = yearMonth10.minus((org.joda.time.ReadablePeriod) period24);
        boolean boolean30 = yearMonth2.isAfter((org.joda.time.ReadablePartial) yearMonth29);
        org.joda.time.Chronology chronology31 = yearMonth29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.monthOfYear();
        org.joda.time.DurationField durationField34 = chronology31.hours();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.halfdayOfDay();
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(536457602112L, chronology31);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate51 = property50.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean55 = dateTimeZone54.isFixed();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone54);
        org.joda.time.DateTime dateTime57 = localDate51.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateTime dateTime58 = dateTime57.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str60 = dateTimeFieldType59.getName();
        org.joda.time.DateTime.Property property61 = dateTime58.property(dateTimeFieldType59);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime64 = dateTime47.minusDays(32772);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.plus(readableDuration65);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime64.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) yearMonth37, dateTimeZone67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01" + "'", str8, "1970-01");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "weekyear" + "'", str60, "weekyear");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("2022-02-10T17:00:43.171+06:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-10T17:00:43.171+06:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        int int11 = property10.getMinimumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = localDate16.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = dateTime26.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property30 = dateTime26.monthOfYear();
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        int int32 = dateTime26.getDayOfYear();
        int int33 = property10.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime35 = dateTime26.withCenturyOfEra(28797);
        org.joda.time.DateTime dateTime38 = dateTime35.withDurationAdded(24356663L, 72048);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime38.withDate(375, 19, (-3599));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 6);
        long long10 = dateTimeZone3.getMillisKeepLocal(dateTimeZone6, (long) 10);
        org.joda.time.Interval interval11 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtMidnight(dateTimeZone3);
        java.lang.String str13 = dateTimeZone3.toString();
        long long15 = dateTimeZone3.nextTransition((long) 0);
        long long17 = dateTimeZone3.nextTransition(12999808L);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone3);
        boolean boolean19 = dateTime18.isAfterNow();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21600000 + "'", int8 == 21600000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+06:00" + "'", str13, "+06:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 12999808L + "'", long17 == 12999808L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int7 = dateTimeField5.get((long) 'u');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        int int11 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate10);
        int int13 = dateTimeField5.get((long) 59);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillis((long) 32772);
        org.joda.time.DateTime dateTime25 = dateTime23.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime27 = dateTime23.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology28 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.era();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekyearOfCentury();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology28);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Locale locale38 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        java.lang.String str39 = locale33.getDisplayLanguage(locale38);
        java.lang.String str40 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDate32, locale38);
        int int42 = dateTimeField5.getMinimumValue(9223371985593600000L);
        long long44 = dateTimeField5.remainder(0L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 70 + "'", int13 == 70);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr" + "'", str34, "fr");
        org.junit.Assert.assertEquals(locale38.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "French" + "'", str39, "French");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22" + "'", str40, "22");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 100);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) 6);
        long long20 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.Interval interval21 = localDate11.toInterval(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = localDate10.toDateTimeAtMidnight(dateTimeZone13);
        java.lang.String str23 = dateTimeZone13.toString();
        long long25 = dateTimeZone13.nextTransition((long) 0);
        long long27 = dateTimeZone13.previousTransition((long) '4');
        org.joda.time.DateTime dateTime28 = localDate9.toDateTimeAtStartOfDay(dateTimeZone13);
        int int30 = dateTimeZone13.getOffsetFromLocal(9223371988855200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withZone(dateTimeZone13);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatter7.getPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21600000 + "'", int18 == 21600000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+06:00" + "'", str23, "+06:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21600000 + "'", int30 == 21600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(dateTimePrinter32);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int17 = dateTimeZone15.getOffsetFromLocal((long) 6);
        long long19 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        org.joda.time.DateTime dateTime20 = dateTime10.withZone(dateTimeZone15);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(1644600996275L, dateTimeZone15);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) 6);
        long long31 = dateTimeZone24.getMillisKeepLocal(dateTimeZone27, (long) 10);
        org.joda.time.Interval interval32 = localDate22.toInterval(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTime();
        boolean boolean43 = dateTime41.isAfterNow();
        int int44 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone24);
        java.lang.String str47 = dateTimeZone24.getName((-21599989L));
        org.joda.time.DateTime dateTime48 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.LocalDate.Property property49 = localDate21.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21600000 + "'", int17 == 21600000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 21600000 + "'", int29 == 21600000);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21600000 + "'", int44 == 21600000);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+06:00" + "'", str47, "+06:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        java.lang.String str16 = property15.toString();
        org.joda.time.LocalDate localDate17 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate18 = property15.withMaximumValue();
        int int19 = localDate18.getDayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(57);
        int int9 = localDate8.getEra();
        int int10 = localDate8.getDayOfYear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate.Property property13 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight16 = localDate15.toDateMidnight();
        org.joda.time.LocalDate localDate18 = localDate15.plusDays(56170);
        org.joda.time.LocalDate.Property property19 = localDate15.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        boolean boolean21 = localDate8.equals((java.lang.Object) localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 309 + "'", int10 == 309);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.lang.String str9 = property7.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[centuryOfEra]" + "'", str9, "Property[centuryOfEra]");
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths(21600);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) localDate6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = property4.getDifference(readableInstant6);
        org.joda.time.LocalDate localDate8 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        boolean boolean17 = localDate8.equals((java.lang.Object) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        int int21 = dateTime19.getYear();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusHours(21597772);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone27);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTime dateTime32 = localDate29.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((long) 32772);
        int int35 = dateTime32.getWeekOfWeekyear();
        int int36 = dateTime32.getSecondOfDay();
        int int37 = dateTime32.getDayOfWeek();
        boolean boolean38 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int39 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2099 + "'", int21 == 2099);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 56463 + "'", int36 == 56463);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21600000 + "'", int39 == 21600000);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronolgy();
        java.lang.Integer int8 = dateTimeFormatter2.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int12 = dateTimeZone10.getOffset((long) 2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtMidnight(dateTimeZone20);
        int int22 = dateTime21.getMonthOfYear();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        long long30 = dateTimeZone10.getMillisKeepLocal(dateTimeZone24, 117L);
        long long32 = dateTimeZone10.previousTransition((long) 937);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21600000 + "'", int12 == 21600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 117L + "'", long30 == 117L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 937L + "'", long32 == 937L);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        int int16 = localDate5.getYearOfEra();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        java.lang.String str20 = localDate18.toString();
        boolean boolean21 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate18);
        int int22 = localDate5.size();
        org.joda.time.DateTime dateTime23 = localDate5.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property24 = localDate5.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property30.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate33 = property30.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        boolean boolean35 = durationFieldType27.isSupported(chronology34);
        boolean boolean36 = dateTimeFieldType25.isSupported(chronology34);
        java.lang.String str37 = dateTimeFieldType25.getName();
        int int38 = localDate5.get(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2099 + "'", int16 == 2099);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyear" + "'", str37, "weekyear");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2099 + "'", int38 == 2099);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        boolean boolean9 = property5.equals((java.lang.Object) 17724494);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        java.lang.String str11 = property5.getAsText();
        java.lang.String str12 = property5.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970" + "'", str11, "1970");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[year]" + "'", str12, "Property[year]");
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYear(2011);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int15 = dateTimeZone13.getOffset((long) 2022);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 32770, dateTimeZone13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str28 = dateTimeFieldType27.getName();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType27);
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime30.getZone();
        long long34 = dateTimeZone13.getMillisKeepLocal(dateTimeZone32, (long) 9);
        long long36 = dateTimeZone32.convertUTCToLocal((long) 52);
        org.joda.time.Interval interval37 = localDate8.toInterval(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = localDate8.toDateTimeAtCurrentTime(dateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(32769, (int) (short) 0, 0, 34713, 28800000, 56172, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34713 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21600000 + "'", int15 == 21600000);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 9L + "'", long34 == 9L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 21600052L + "'", long36 == 21600052L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        int int10 = localDate4.getYearOfCentury();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate.Property property13 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property13.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        long long19 = dateTimeField16.addWrapField((long) 2, (int) (byte) 10);
        int int21 = dateTimeField16.getMaximumValue((long) (-1));
        long long23 = dateTimeField16.roundCeiling(52L);
        boolean boolean24 = localDate4.equals((java.lang.Object) 52L);
        org.joda.time.LocalDate.Property property25 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = localDate4.withWeekyear(122);
        org.joda.time.LocalDate localDate29 = localDate27.withYear(28797);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate27.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 315532800002L + "'", long19 == 315532800002L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 99 + "'", int21 == 99);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31536000000L + "'", long23 == 31536000000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.withLaterOffsetAtOverlap();
        int int14 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime13.minus((-259200000L));
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTimeISO();
        boolean boolean20 = dateTime16.isBefore(1970L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-14T00:00:00.000+06:00" + "'", str17, "2022-02-14T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29);
        java.time.Instant instant32 = calendar31.toInstant();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property34.getDifference(readableInstant36);
        org.joda.time.LocalDate localDate38 = property34.withMaximumValue();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate45 = localDate43.plusMonths(32772);
        org.joda.time.LocalDate localDate46 = localDate38.withFields((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTime dateTime47 = localDate38.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property48 = localDate38.yearOfEra();
        java.lang.String str49 = property48.toString();
        boolean boolean50 = calendar31.before((java.lang.Object) property48);
        boolean boolean51 = calendar31.isLenient();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572464081,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=41,SECOND=4,MILLISECOND=81,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Property[yearOfEra]" + "'", str49, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.setLanguage("TWN");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("TWN");
        java.util.Locale.Builder builder12 = builder10.setLanguage("");
        java.util.Locale locale13 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder10.setExtension(' ', "zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1969");
        org.junit.Assert.assertNotNull(yearMonth1);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property12.withMaximumValue();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        java.lang.String str18 = property5.getAsText();
        java.lang.String str19 = property5.toString();
        int int20 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[year]" + "'", str19, "Property[year]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        long long11 = interval5.getEndMillis();
        org.joda.time.MutableInterval mutableInterval12 = interval5.toMutableInterval();
        org.joda.time.Interval interval13 = interval5.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        boolean boolean15 = interval13.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval17 = interval13.withStartMillis(4387666331475688L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-21600000L) + "'", long11 == (-21600000L));
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        java.util.Date date1 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.Date date12 = dateMidnight11.toDate();
        boolean boolean13 = date1.before(date12);
        java.time.Instant instant14 = date1.toInstant();
        java.time.Instant instant15 = date1.toInstant();
        date1.setHours(63397318);
        int int18 = date1.getDate();
        date1.setMonth(2011);
        java.util.Date date22 = new java.util.Date((long) 1978);
        date22.setMonth(34655543);
        boolean boolean25 = date1.before(date22);
        org.junit.Assert.assertEquals(date1.toString(), "Tue Aug 01 22:00:00 UTC 9369");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str10, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Dec 01 00:00:01 UTC 2889931");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = property5.getAsText(locale7);
        int int9 = property5.getMinimumValue();
        int int10 = property5.getMinimumValue();
        java.util.Locale locale13 = new java.util.Locale("22", "fran\347ais (France)");
        java.lang.String str14 = locale13.getLanguage();
        java.util.Locale.setDefault(locale13);
        java.lang.String str16 = property5.getAsShortText(locale13);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertEquals(locale13.toString(), "22_FRAN\347AIS (FRANCE)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(42);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale26.getVariant();
        java.util.Calendar calendar28 = dateTime25.toCalendar(locale26);
        boolean boolean29 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property40 = dateTime39.year();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property42 = localDate41.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property42.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate43.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime49.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str52 = dateTimeFieldType51.getName();
        org.joda.time.DateTime.Property property53 = dateTime50.property(dateTimeFieldType51);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime56 = dateTime39.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone59);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.DateTime dateTime64 = localDate61.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withMillis((long) 32772);
        org.joda.time.DateTime dateTime68 = dateTime66.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Interval interval76 = interval74.withChronology(chronology75);
        org.joda.time.Duration duration77 = interval74.toDuration();
        org.joda.time.DateTime dateTime78 = dateTime70.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime80 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) 'u');
        org.joda.time.DateTime dateTime82 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration77, 6);
        org.joda.time.DateTime dateTime84 = dateTime16.minusYears(99);
        org.joda.time.DateTime dateTime85 = dateTime16.toDateTimeISO();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weekyear" + "'", str52, "weekyear");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfMonth();
        int int4 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfYear();
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder7.setInstant((long) 32770);
        java.util.Calendar calendar10 = builder7.build();
        java.util.Date date12 = new java.util.Date((long) 10);
        java.util.Calendar.Builder builder13 = builder7.setInstant(date12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((long) (short) 1, chronology15);
        org.joda.time.Chronology chronology17 = yearMonth16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = dateTimeField18.getAsShortText((long) 12, locale20);
        java.util.Locale.setDefault(locale20);
        java.util.Calendar.Builder builder23 = builder7.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = property5.setCopy("deu", locale20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"deu\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis(935);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.monthOfYear();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str37 = dateTimeFieldType36.getName();
        org.joda.time.DateTime.Property property38 = dateTime35.property(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = property38.roundFloorCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime39.getZone();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.Chronology chronology43 = chronology23.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfHalfday();
        org.joda.time.DurationField durationField45 = chronology43.seconds();
        org.joda.time.DurationField durationField46 = chronology43.halfdays();
        org.joda.time.DateTime dateTime47 = dateTime12.withChronology(chronology43);
        org.joda.time.Chronology chronology48 = chronology43.withUTC();
        org.joda.time.DurationField durationField49 = chronology43.seconds();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyear" + "'", str37, "weekyear");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property9.getDifference(readableInstant11);
        org.joda.time.LocalDate localDate13 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths(32772);
        org.joda.time.LocalDate localDate21 = localDate13.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTime dateTime22 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property23 = localDate13.yearOfEra();
        int int24 = localDate13.getYearOfEra();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        java.lang.String str28 = localDate26.toString();
        boolean boolean29 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate26);
        boolean boolean30 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate32 = localDate7.minusYears(56211);
        java.util.Date date33 = localDate32.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = localDate32.withWeekOfWeekyear(56170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56170 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2099 + "'", int24 == 2099);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01" + "'", str28, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Feb 11 00:00:00 UTC 54190");
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        int int2 = yearMonth1.size();
        org.joda.time.YearMonth yearMonth4 = yearMonth1.minusMonths(3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.plusYears(48);
        int int7 = yearMonth6.getYear();
        int int8 = yearMonth6.getMonthOfYear();
        org.joda.time.YearMonth.Property property9 = yearMonth6.year();
        org.joda.time.YearMonth yearMonth11 = property9.setCopy((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2017 + "'", int7 == 2017);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonth11);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        int int7 = localDate6.getYear();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(100);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getName(10L);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.DateMidnight dateMidnight16 = localDate9.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTime();
        boolean boolean28 = dateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2011 + "'", int7 == 2011);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+06:00" + "'", str14, "+06:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        int int7 = localDate6.getYearOfCentury();
        int int8 = localDate6.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate6.withEra(360240000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360240000 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.util.Calendar calendar11 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis((long) 32772);
        org.joda.time.DateTime dateTime23 = dateTime21.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = interval29.withChronology(chronology30);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.DateTime dateTime33 = dateTime25.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration32);
        int int35 = dateTime8.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime8.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours(309);
        int int40 = dateTime37.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        int int12 = property11.get();
        org.joda.time.LocalDate localDate14 = property11.addToCopy(0);
        int int15 = localDate14.size();
        org.joda.time.LocalDate localDate17 = localDate14.withYear(56156);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder22 = builder18.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder23 = builder18.clearExtensions();
        java.util.Locale.Builder builder25 = builder18.setLanguage("TWN");
        boolean boolean26 = localDate14.equals((java.lang.Object) "TWN");
        org.joda.time.LocalDate.Property property27 = localDate14.dayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = dateTime26.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime26.withDayOfYear(4);
        int int32 = dateTime26.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTime dateTime40 = localDate37.toDateTimeAtMidnight(dateTimeZone39);
        int int41 = dateTime40.getMonthOfYear();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        boolean boolean54 = dateTime53.isBeforeNow();
        int int55 = dateTime53.getDayOfYear();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property57 = dateTime44.minuteOfDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfCentury();
        org.joda.time.LocalDate localDate60 = property59.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone63);
        org.joda.time.DateTime dateTime66 = localDate60.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime66.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str69 = dateTimeFieldType68.getName();
        org.joda.time.DateTime.Property property70 = dateTime67.property(dateTimeFieldType68);
        org.joda.time.DateTime dateTime72 = dateTime44.withField(dateTimeFieldType68, 1978);
        org.joda.time.DateTime.Property property73 = dateTime26.property(dateTimeFieldType68);
        long long74 = property73.remainder();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 42 + "'", int55 == 42);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "weekyear" + "'", str69, "weekyear");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3369600000L + "'", long74 == 3369600000L);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale.setDefault(locale0);
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = yearMonth5.toInterval(dateTimeZone6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = yearMonth5.getFieldTypes();
        org.joda.time.YearMonth.Property property9 = yearMonth5.year();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = locale10.getCountry();
        java.util.Locale locale12 = locale10.stripExtensions();
        int int13 = property9.getMaximumTextLength(locale12);
        java.lang.String str14 = locale0.getDisplayName(locale12);
        java.util.Locale locale15 = locale12.stripExtensions();
        java.lang.String str16 = locale12.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FR" + "'", str11, "FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "allemand" + "'", str14, "allemand");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fra" + "'", str16, "fra");
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime11.toGregorianCalendar();
        gregorianCalendar18.set((int) (byte) 0, 32769, 70, (int) (byte) -1, 2);
        boolean boolean25 = gregorianCalendar18.isWeekDateSupported();
        java.util.TimeZone timeZone26 = gregorianCalendar18.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = gregorianCalendar18.get(18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+06:00");
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 8);
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter2.getParser();
        java.lang.StringBuffer stringBuffer26 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer26, 1641146400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimeParser25);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.LocalDate localDate9 = localDate6.minusYears(69);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy(1970);
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(57);
        org.joda.time.LocalDate.Property property15 = localDate14.year();
        org.joda.time.LocalDate localDate17 = property15.addToCopy(31765119);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        int int33 = localDate31.getDayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        long long20 = dateTimeField14.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeField14.getAsShortText(70, locale22);
        org.joda.time.DurationField durationField24 = dateTimeField14.getDurationField();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str29 = dateTimeZone27.getName(10L);
        java.util.Locale locale33 = new java.util.Locale("70", "hi!");
        java.lang.String str34 = dateTimeZone27.getName((long) '4', locale33);
        java.lang.String str35 = locale33.toLanguageTag();
        java.lang.String str36 = dateTimeField14.getAsShortText((-360L), locale33);
        long long39 = dateTimeField14.set(0L, 32770);
        int int42 = dateTimeField14.getDifference((long) 1970, 9223371985593600000L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 315705600000L + "'", long20 == 315705600000L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+06:00" + "'", str29, "+06:00");
        org.junit.Assert.assertEquals(locale33.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+06:00" + "'", str34, "+06:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970" + "'", str36, "1970");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 971954121600000L + "'", long39 == 971954121600000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-292277022) + "'", int42 == (-292277022));
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        java.lang.String str21 = property20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property20.getFieldType();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property24.getDifference(readableInstant26);
        org.joda.time.LocalDate localDate28 = property24.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean37 = localDate28.equals((java.lang.Object) dateTime36);
        java.util.Date date38 = localDate28.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getRangeDurationType();
        boolean boolean41 = localDate28.isSupported(dateTimeFieldType39);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = localDate46.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.LocalDate localDate58 = localDate46.minusYears(10);
        boolean boolean59 = localDate28.isAfter((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate62 = localDate58.withFieldAdded(durationFieldType60, 70);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property64 = localDate63.yearOfCentury();
        org.joda.time.LocalDate localDate65 = property64.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean69 = dateTimeZone68.isFixed();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone68);
        org.joda.time.DateTime dateTime71 = localDate65.toDateTimeAtStartOfDay(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime71.toMutableDateTime();
        org.joda.time.Chronology chronology73 = dateTime71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.halfdays();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.monthOfYear();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property77 = localDate76.yearOfCentury();
        org.joda.time.LocalDate localDate78 = property77.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean82 = dateTimeZone81.isFixed();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone81);
        org.joda.time.DateTime dateTime84 = localDate78.toDateTimeAtStartOfDay(dateTimeZone81);
        org.joda.time.DateTime dateTime85 = dateTime84.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str87 = dateTimeFieldType86.getName();
        org.joda.time.DateTime.Property property88 = dateTime85.property(dateTimeFieldType86);
        org.joda.time.DateTime dateTime89 = property88.roundFloorCopy();
        org.joda.time.DateTime.Property property90 = dateTime89.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone91 = dateTime89.getZone();
        java.util.TimeZone timeZone92 = dateTimeZone91.toTimeZone();
        org.joda.time.Chronology chronology93 = chronology73.withZone(dateTimeZone91);
        org.joda.time.DateTimeField dateTimeField94 = chronology93.clockhourOfHalfday();
        org.joda.time.DurationField durationField95 = chronology93.seconds();
        boolean boolean96 = durationFieldType60.isSupported(chronology93);
        org.joda.time.DateTimeField dateTimeField97 = chronology93.year();
        org.joda.time.DateTimeField dateTimeField98 = chronology93.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField99 = dateTimeFieldType22.getField(chronology93);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[weekOfWeekyear]" + "'", str21, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "weekyear" + "'", str87, "weekyear");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(timeZone92);
        org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.fromCalendarFields(calendar31);
        java.util.Calendar.Builder builder33 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder35 = builder33.setInstant((long) 32770);
        java.util.Calendar calendar36 = builder35.build();
        boolean boolean38 = calendar36.after((java.lang.Object) 70);
        long long39 = calendar36.getTimeInMillis();
        calendar36.setTimeInMillis(0L);
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder44 = builder42.setInstant((long) 32770);
        java.util.Calendar calendar45 = builder44.build();
        boolean boolean47 = calendar45.after((java.lang.Object) (byte) 10);
        java.util.Date date48 = calendar45.getTime();
        long long49 = date48.getTime();
        calendar36.setTime(date48);
        calendar36.add(14, 2000);
        int int54 = calendar36.getWeekYear();
        java.util.TimeZone timeZone55 = calendar36.getTimeZone();
        calendar31.setTimeZone(timeZone55);
        java.util.Date date57 = new java.util.Date();
        long long58 = date57.getTime();
        date57.setSeconds((int) '4');
        calendar31.setTime(date57);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572512309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=52,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=34770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=34,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 32770L + "'", long39 == 32770L);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32770L + "'", long49 == 32770L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Koordinierte Universalzeit");
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Fri Feb 11 09:41:52 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644572465309L + "'", long58 == 1644572465309L);
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) timeZone29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: sun.util.calendar.ZoneInfo");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572465354,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=41,SECOND=5,MILLISECOND=354,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(99, 10);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone7.isLocalDateTimeGap(localDateTime8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-7), 41, 32, 18, 3891223, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3891223 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property12.getFieldType();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getCountry();
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = property12.getAsText(locale15);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str41 = dateTimeFieldType40.getName();
        org.joda.time.DateTime.Property property42 = dateTime39.property(dateTimeFieldType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime39);
        int int44 = dateTime39.getHourOfDay();
        boolean boolean45 = dateTime39.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime39.toYearMonthDay();
        org.joda.time.DateTime dateTime48 = dateTime39.withYear(34530606);
        boolean boolean49 = dateTime48.isAfterNow();
        org.joda.time.DateTime dateTime51 = dateTime48.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime53 = dateTime48.plusMonths(4);
        org.joda.time.DateTime.Property property54 = dateTime53.monthOfYear();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfCentury();
        org.joda.time.LocalDate.Property property57 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate59 = property57.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField60 = property57.getField();
        int int62 = dateTimeField60.get((long) 'u');
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = dateTimeField60.getAsText((long) 5, locale64);
        java.lang.String str66 = locale64.getISO3Language();
        int int67 = property54.getMaximumShortTextLength(locale64);
        int int68 = property12.getMaximumTextLength(locale64);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "weekyear" + "'", str41, "weekyear");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 70 + "'", int62 == 70);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "70" + "'", str65, "70");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "zho" + "'", str66, "zho");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.fromCalendarFields(calendar31);
        boolean boolean33 = calendar31.isWeekDateSupported();
        calendar31.setLenient(false);
        calendar31.setTimeInMillis((-863352564362885353L));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=-863352564362885353,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=27356023,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=34,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=31,SECOND=54,MILLISECOND=647,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 20, (long) 86397);
        org.joda.time.Period period3 = interval2.toPeriod();
        boolean boolean4 = interval2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtMidnight(dateTimeZone11);
        int int13 = dateTime12.getMonthOfYear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        boolean boolean26 = dateTime25.isBeforeNow();
        int int27 = dateTime25.getDayOfYear();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property29 = dateTime16.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillis((long) 32772);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime43 = dateTime39.withSecondOfMinute((int) (short) 10);
        long long44 = property29.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime46 = dateTime39.minusMillis(39);
        org.joda.time.Interval interval47 = interval2.withStart((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime56.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate58 = dateTime56.toLocalDate();
        org.joda.time.Interval interval59 = localDate58.toInterval();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate62 = property61.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDate62.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime68.toMutableDateTime();
        org.joda.time.Chronology chronology70 = dateTime68.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.halfdays();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.monthOfYear();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property74 = localDate73.yearOfCentury();
        org.joda.time.LocalDate localDate75 = property74.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean79 = dateTimeZone78.isFixed();
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone78);
        org.joda.time.DateTime dateTime81 = localDate75.toDateTimeAtStartOfDay(dateTimeZone78);
        org.joda.time.DateTime dateTime82 = dateTime81.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str84 = dateTimeFieldType83.getName();
        org.joda.time.DateTime.Property property85 = dateTime82.property(dateTimeFieldType83);
        org.joda.time.DateTime dateTime86 = property85.roundFloorCopy();
        org.joda.time.DateTime.Property property87 = dateTime86.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime86.getZone();
        java.util.TimeZone timeZone89 = dateTimeZone88.toTimeZone();
        org.joda.time.Chronology chronology90 = chronology70.withZone(dateTimeZone88);
        org.joda.time.DateTimeField dateTimeField91 = chronology90.clockhourOfHalfday();
        org.joda.time.DurationField durationField92 = chronology90.seconds();
        org.joda.time.DateTimeField dateTimeField93 = chronology90.halfdayOfDay();
        org.joda.time.DateTime dateTime94 = org.joda.time.DateTime.now(chronology90);
        org.joda.time.Interval interval95 = interval59.withChronology(chronology90);
        org.joda.time.Duration duration96 = interval59.toDuration();
        boolean boolean97 = interval2.abuts((org.joda.time.ReadableInterval) interval59);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 42 + "'", int27 == 42);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360L) + "'", long44 == (-360L));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "weekyear" + "'", str84, "weekyear");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(timeZone89);
        org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("2017-10");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate35 = localDate23.minusYears(10);
        boolean boolean36 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 10);
        org.joda.time.Interval interval48 = localDate38.toInterval(dateTimeZone40);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtMidnight(dateTimeZone40);
        java.lang.String str50 = dateTimeZone40.toString();
        long long52 = dateTimeZone40.nextTransition((long) 0);
        long long54 = dateTimeZone40.previousTransition((long) '4');
        org.joda.time.DateTime dateTime55 = localDate35.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime57 = property56.withMaximumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+06:00" + "'", str50, "+06:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        int int15 = property12.getMaximumValueOverall();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property12.getDifference(readableInstant16);
        org.joda.time.DateTime dateTime18 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfMonth(20);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTimeISO();
        int int22 = dateTime18.getDayOfMonth();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property24.getDifference(readableInstant26);
        org.joda.time.LocalDate localDate28 = property24.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean37 = localDate28.equals((java.lang.Object) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime36.minusDays(70);
        org.joda.time.DateTime dateTime41 = dateTime36.plus((long) 57);
        org.joda.time.DateTime dateTime43 = dateTime41.minusHours((-1));
        int int44 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime46 = dateTime18.plusHours(86395544);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.Interval interval7 = interval3.withStartMillis((long) 32772);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((long) (short) 1, chronology11);
        java.lang.String str14 = yearMonth12.toString("1970-01");
        org.joda.time.DateTime dateTime15 = dateTime9.withFields((org.joda.time.ReadablePartial) yearMonth12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = yearMonth12.getFieldType(34655543);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34655543");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01" + "'", str14, "1970-01");
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        int int12 = calendar3.getMinimalDaysInFirstWeek();
        int int13 = calendar3.getFirstDayOfWeek();
        int int14 = calendar3.getWeekYear();
        int int15 = calendar3.getWeeksInWeekYear();
        calendar3.setMinimalDaysInFirstWeek(56369);
        int int18 = calendar3.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=56369,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2741 + "'", int14 == 2741);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 56369 + "'", int18 == 56369);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate16.minusDays(17724494);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate22 = localDate19.withYear(32769);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDate19.getFields();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = dateTimeFormatter2.parseMutableDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimePrinter8);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology8 = dateTimeFormatter2.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = dateTimeFormatter2.parseMutableDateTime("1970-01-01T00:00:00.000+06:00/2022-02-11T00:00:00.000+06:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(chronology8);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        boolean boolean12 = interval11.isAfterNow();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths(32772);
        org.joda.time.LocalDate localDate21 = localDate17.minusYears((int) (short) 10);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getName(10L);
        org.joda.time.Interval interval26 = localDate17.toInterval(dateTimeZone23);
        boolean boolean27 = interval11.isAfter((org.joda.time.ReadableInterval) interval26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = interval42.withChronology(chronology43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property55 = dateTime54.year();
        boolean boolean56 = interval44.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period57 = interval44.toPeriod();
        org.joda.time.DateTime dateTime59 = dateTime36.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 360240000);
        org.joda.time.Interval interval60 = interval26.withPeriodAfterStart((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property62.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = localDate63.toDateTimeAtStartOfDay(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str72 = dateTimeFieldType71.getName();
        org.joda.time.DateTime.Property property73 = dateTime70.property(dateTimeFieldType71);
        org.joda.time.Interval interval74 = property73.toInterval();
        org.joda.time.DateTimeField dateTimeField75 = property73.getField();
        org.joda.time.DateTime dateTime77 = property73.addToCopy(5);
        org.joda.time.DateTime dateTime79 = dateTime77.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Interval interval85 = interval83.withChronology(chronology84);
        org.joda.time.Duration duration86 = interval83.toDuration();
        org.joda.time.DateTime dateTime87 = dateTime77.minus((org.joda.time.ReadableDuration) duration86);
        boolean boolean88 = interval26.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = dateTime87.minusDays(292278993);
        int int91 = dateTime87.getWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+06:00" + "'", str25, "+06:00");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyear" + "'", str72, "weekyear");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2027 + "'", int91 == 2027);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(59);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        boolean boolean3 = property1.isLeap();
        org.joda.time.LocalDate localDate4 = property1.withMinimumValue();
        java.util.Date date5 = localDate4.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) 6);
        long long15 = dateTimeZone8.getMillisKeepLocal(dateTimeZone11, (long) 10);
        org.joda.time.Interval interval16 = localDate6.toInterval(dateTimeZone8);
        int int17 = localDate6.getYear();
        boolean boolean18 = localDate4.isAfter((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate4.minus(readablePeriod19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.roundFloorCopy();
        org.joda.time.LocalDate localDate25 = property23.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight26 = localDate25.toDateMidnight();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = dateTime35.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str38 = dateTimeFieldType37.getName();
        org.joda.time.DateTime.Property property39 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        org.joda.time.LocalDate localDate41 = dateTime40.toLocalDate();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        java.lang.String str45 = property43.getName();
        long long46 = property43.remainder();
        int int47 = property43.getMinimumValue();
        org.joda.time.LocalDate localDate48 = property43.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property43.getFieldType();
        org.joda.time.LocalDate localDate50 = property43.roundHalfEvenCopy();
        java.lang.String str51 = property43.getName();
        org.joda.time.LocalDate localDate52 = property43.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean56 = dateTimeZone55.isFixed();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone55);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withMillis((long) 32772);
        org.joda.time.DateTime dateTime64 = dateTime62.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = interval70.withChronology(chronology71);
        org.joda.time.Duration duration73 = interval70.toDuration();
        org.joda.time.DateTime dateTime74 = dateTime66.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property76 = localDate75.yearOfCentury();
        org.joda.time.LocalDate.Property property77 = localDate75.yearOfCentury();
        org.joda.time.LocalDate localDate79 = property77.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str80 = property77.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property77.getFieldType();
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType81.getDurationType();
        boolean boolean83 = dateTime66.isSupported(dateTimeFieldType81);
        int int84 = localDate52.get(dateTimeFieldType81);
        boolean boolean85 = localDate41.isSupported(dateTimeFieldType81);
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType81.getRangeDurationType();
        int int87 = localDate25.get(dateTimeFieldType81);
        org.joda.time.LocalDate localDate88 = localDate4.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property89 = localDate4.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 UTC 2000");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21600000 + "'", int13 == 21600000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "weekyear" + "'", str38, "weekyear");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "yearOfCentury" + "'", str45, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3542400000L + "'", long46 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "yearOfCentury" + "'", str51, "yearOfCentury");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "22" + "'", str80, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 22 + "'", int84 == 22);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 22 + "'", int87 == 22);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis(935);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.monthOfYear();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str37 = dateTimeFieldType36.getName();
        org.joda.time.DateTime.Property property38 = dateTime35.property(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = property38.roundFloorCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime39.getZone();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.Chronology chronology43 = chronology23.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfHalfday();
        org.joda.time.DurationField durationField45 = chronology43.seconds();
        org.joda.time.DurationField durationField46 = chronology43.halfdays();
        org.joda.time.DateTime dateTime47 = dateTime12.withChronology(chronology43);
        org.joda.time.Chronology chronology48 = chronology43.withUTC();
        org.joda.time.DurationField durationField49 = chronology43.days();
        long long53 = chronology43.add(0L, (-21599958L), 8);
        org.joda.time.DurationField durationField54 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField55 = chronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = chronology43.dayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyear" + "'", str37, "weekyear");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-172799664L) + "'", long53 == (-172799664L));
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone8);
        boolean boolean10 = interval5.overlaps((org.joda.time.ReadableInterval) interval9);
        long long11 = interval9.getEndMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 12L + "'", long11 == 12L);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("KR");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale19 = new java.util.Locale("");
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = new java.util.Locale("");
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale13, locale15, locale16, locale17, locale19, locale21, locale22, locale23, locale25, locale27, locale28, locale29, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList33);
        java.lang.String[] strArray40 = new java.lang.String[] { "fr", "year", "yearOfCentury", "yearOfCentury" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = locale47.getCountry();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = new java.util.Locale("");
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.util.Locale locale59 = new java.util.Locale("");
        java.lang.String str60 = locale59.getLanguage();
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getCountry();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale47, locale49, locale50, locale51, locale53, locale55, locale56, locale57, locale59, locale61, locale62, locale63, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet71);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet71, filteringMode73);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList74);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList77, strMap78);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FR" + "'", str14, "FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "FR" + "'", str48, "FR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode73.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertNotNull(languageRangeList79);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        java.util.Date date6 = calendar3.getTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTime dateTime14 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int23 = dateTimeZone21.getOffsetFromLocal((long) 6);
        long long25 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 10);
        org.joda.time.DateTime dateTime26 = dateTime16.withZone(dateTimeZone21);
        org.joda.time.DateTime.Property property27 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime29 = property27.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusYears(2022);
        int int40 = property27.getDifference((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = property27.withMinimumValue();
        boolean boolean42 = calendar3.after((java.lang.Object) dateTime41);
        int int44 = calendar3.getMinimum(16);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = calendar3.getMinimum(108);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 108");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21600000 + "'", int23 == 21600000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 17724494 + "'", int40 == 17724494);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime13.toMutableDateTime(dateTimeZone21);
        int int24 = dateTime13.getMillisOfDay();
        int int25 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime13.monthOfYear();
        java.util.Date date27 = dateTime13.toDate();
        java.lang.Object obj28 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillis((long) 32772);
        org.joda.time.DateTime dateTime40 = dateTime38.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime42 = dateTime38.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj28, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.secondOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int53 = dateTimeZone51.getOffset((long) 2022);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 32770, dateTimeZone51);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate57 = property56.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str66 = dateTimeFieldType65.getName();
        org.joda.time.DateTime.Property property67 = dateTime64.property(dateTimeFieldType65);
        org.joda.time.DateTime dateTime68 = property67.roundFloorCopy();
        org.joda.time.DateTime.Property property69 = dateTime68.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime68.getZone();
        long long72 = dateTimeZone51.getMillisKeepLocal(dateTimeZone70, (long) 9);
        long long75 = dateTimeZone51.convertLocalToUTC(146817598379000L, false);
        org.joda.time.Chronology chronology76 = chronology43.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime77 = dateTime13.toDateTime(chronology76);
        org.joda.time.DateTime dateTime78 = dateTime77.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime77.withYear(31);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Jan 02 18:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 21600000 + "'", int53 == 21600000);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "weekyear" + "'", str66, "weekyear");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 9L + "'", long72 == 9L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 146817576779000L + "'", long75 == 146817576779000L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder7 = builder0.setDate(0, 70, 360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.util.Calendar calendar11 = dateTime8.toCalendar(locale9);
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        int int25 = dateTime20.getHourOfDay();
        boolean boolean26 = dateTime20.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime20.toYearMonthDay();
        org.joda.time.DateTime dateTime29 = dateTime20.plusHours(2011);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) 'a');
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime40.toMutableDateTime();
        org.joda.time.Chronology chronology42 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime29, chronology42);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology42.getDateTimeMillis((long) 50, 18032772, 107, 63399288, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18032772 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.withMillisOfSecond(479);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis((long) 56362);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(32770);
        int int4 = localDate3.size();
        org.joda.time.LocalDate.Property property5 = localDate3.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int10 = dateTimeZone8.getOffset((long) 2022);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 32770, dateTimeZone8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime25.getZone();
        long long29 = dateTimeZone8.getMillisKeepLocal(dateTimeZone27, (long) 9);
        long long32 = dateTimeZone8.convertLocalToUTC(146817598379000L, false);
        org.joda.time.Interval interval33 = localDate3.toInterval(dateTimeZone8);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21600000 + "'", int10 == 21600000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 146817576779000L + "'", long32 == 146817576779000L);
        org.junit.Assert.assertNotNull(interval33);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.era();
        int int10 = dateTimeField8.getMinimumValue(568490399943L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder8 = builder0.setLenient(true);
        java.util.Calendar.Builder builder12 = builder0.setDate(21597772, 21597772, 69);
        java.util.Calendar.Builder builder17 = builder12.setTimeOfDay((int) (byte) 100, (int) 'u', (-113952), 0);
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(48, 7, (-46800000));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder24 = builder21.setWeekDefinition(1978, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        boolean boolean17 = interval5.contains((org.joda.time.ReadableInstant) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime15.withDate((-1853), 56360, 28800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56360 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getMonthOfYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        boolean boolean45 = dateTime44.isBeforeNow();
        int int46 = dateTime44.getDayOfYear();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTime dateTime56 = localDate53.toDateTimeAtMidnight(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateMidnight dateMidnight58 = dateTime56.toDateMidnight();
        java.util.Date date59 = dateMidnight58.toDate();
        date59.setDate((int) (short) 10);
        long long62 = date59.getTime();
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.fromDateFields(date59);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateTime dateTime71 = localDate68.toDateTimeAtMidnight(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateMidnight dateMidnight73 = dateTime71.toDateMidnight();
        java.util.Date date74 = dateMidnight73.toDate();
        date74.setDate((int) (short) 10);
        boolean boolean77 = date59.before(date74);
        org.joda.time.LocalDate localDate78 = org.joda.time.LocalDate.fromDateFields(date74);
        org.joda.time.DateTime dateTime79 = dateTime20.withFields((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        org.joda.time.DateTime dateTime81 = dateTime79.toDateTimeISO();
        int int82 = dateTime79.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 42 + "'", int46 == 42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str57, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1836000000L) + "'", long62 == (-1836000000L));
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str72, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        int int12 = localDate2.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean14 = localDate2.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate localDate16 = localDate2.plusMonths(86397);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate.Property property19 = localDate16.centuryOfEra();
        org.joda.time.LocalDate localDate20 = property19.roundHalfCeilingCopy();
        java.util.Locale locale24 = new java.util.Locale("1970", "100");
        java.lang.String str25 = locale24.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = property19.setCopy("+99:10", locale24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+99:10\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals(locale24.toString(), "1970_100");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        boolean boolean17 = interval5.contains((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime19 = dateTime15.plusHours(34530606);
        int int20 = dateTime15.getMinuteOfHour();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.minusSeconds((int) (short) -1);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.LocalDate localDate24 = localDate16.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property25 = localDate16.dayOfMonth();
        org.joda.time.LocalDate.Property property26 = localDate16.weekyear();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = dateTime35.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str38 = dateTimeFieldType37.getName();
        org.joda.time.DateTime.Property property39 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = property39.roundFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.year();
        int int42 = property26.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDate localDate44 = property26.addWrapFieldToCopy(32770);
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(localTime45);
        boolean boolean47 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "weekyear" + "'", str38, "weekyear");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str7 = date6.toGMTString();
        java.util.Date date14 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        boolean boolean15 = date6.before(date14);
        int int16 = date14.getMinutes();
        date14.setHours(25156829);
        date14.setDate(2017);
        int int21 = date14.getMonth();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTime();
        org.joda.time.Chronology chronology32 = dateTime30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.monthOfYear();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate37.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime43.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str46 = dateTimeFieldType45.getName();
        org.joda.time.DateTime.Property property47 = dateTime44.property(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = property47.roundFloorCopy();
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime48.getZone();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.Chronology chronology52 = chronology32.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField53 = chronology52.weekyears();
        org.joda.time.DurationField durationField54 = chronology52.days();
        boolean boolean55 = date14.equals((java.lang.Object) chronology52);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str7, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jun 25 05:00:01 UTC 4785");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "weekyear" + "'", str46, "weekyear");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 20, (long) 86397);
        org.joda.time.Period period3 = interval2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtMidnight(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateMidnight dateMidnight13 = dateTime11.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        long long15 = dateTime11.getMillis();
        int int16 = dateTime11.getWeekyear();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period18 = period3.toPeriod();
        org.joda.time.Period period19 = period18.toPeriod();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str12, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-21600000L) + "'", long15 == (-21600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        int int18 = dateTime16.getYear();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime16.withHourOfDay(34713);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34713 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2099 + "'", int18 == 2099);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate13 = localDate9.minusYears(11);
        int int14 = localDate13.getYear();
        org.joda.time.LocalDate localDate16 = localDate13.plusMonths(935);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) localDate13, dateTimeZone17);
        boolean boolean19 = localDate6.isAfter((org.joda.time.ReadablePartial) localDate18);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDate18.getValue(63397318);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63397318");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2011 + "'", int14 == 2011);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.monthOfYear();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = yearMonth39.toInterval(dateTimeZone40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth39.getFieldTypes();
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth44.toInterval(dateTimeZone45);
        org.joda.time.YearMonth yearMonth48 = yearMonth44.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth48.withChronologyRetainFields(chronology49);
        int int51 = yearMonth39.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth53 = yearMonth50.minus(readablePeriod52);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = yearMonth55.toInterval(dateTimeZone56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonth55.getFieldTypes();
        org.joda.time.YearMonth.Property property59 = yearMonth55.year();
        java.lang.String str60 = property59.toString();
        org.joda.time.YearMonth yearMonth61 = property59.getYearMonth();
        int[] intArray62 = yearMonth61.getValues();
        chronology33.validate((org.joda.time.ReadablePartial) yearMonth53, intArray62);
        org.joda.time.DateTimeField dateTimeField64 = chronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology33.centuryOfEra();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[year]" + "'", str60, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 56237, 21597772L);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        int int12 = calendar3.getMinimalDaysInFirstWeek();
        int int13 = calendar3.getFirstDayOfWeek();
        int int14 = calendar3.getWeekYear();
        int int15 = calendar3.getWeeksInWeekYear();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        java.util.Date date18 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateMidnight dateMidnight28 = dateTime26.toDateMidnight();
        java.util.Date date29 = dateMidnight28.toDate();
        boolean boolean30 = date18.before(date29);
        java.time.Instant instant31 = date18.toInstant();
        date18.setTime((long) ' ');
        java.util.Date date40 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str41 = date40.toGMTString();
        java.util.Date date48 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        boolean boolean49 = date40.before(date48);
        boolean boolean50 = date18.after(date48);
        calendar3.setTime(date18);
        int int52 = date18.getTimezoneOffset();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2741 + "'", int14 == 2741);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str27, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str41, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertEquals(date48.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.LocalDate localDate10 = localDate8.withWeekyear(0);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = property23.roundFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.plusWeeks(1969);
        org.joda.time.DateTime dateTime27 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate5 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtMidnight(dateTimeZone12);
        int int14 = dateTime13.getMonthOfYear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate5.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(35435);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField31 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField32 = chronology10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology10.getZone();
        boolean boolean35 = dateTimeZone33.isStandardOffset(34827305L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        date6.setDate(0);
        java.util.Date date10 = new java.util.Date((long) 1978);
        date10.setMonth(34655543);
        int int13 = date6.compareTo(date10);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Jan 31 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals(date10.toString(), "Tue Dec 01 00:00:01 UTC 2889931");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DurationField durationField32 = chronology30.years();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology30.getDateTimeMillis(118L, 2922789, 35435, 56237, 15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder0.build();
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        int int5 = calendar3.getMinimalDaysInFirstWeek();
        calendar3.setFirstDayOfWeek(0);
        java.lang.String str8 = calendar3.getCalendarType();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.000Z");
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((-1L), (int) (byte) -1);
        org.joda.time.DateTime dateTime16 = dateTime11.plusWeeks(693);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.LocalDateTime localDateTime18 = localDate9.toLocalDateTime(localTime17);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.LocalDate localDate17 = localDate9.plusMonths((int) (short) 1);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate28 = localDate20.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property29 = localDate20.dayOfMonth();
        int int30 = localDate20.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean32 = localDate20.isSupported(dateTimeFieldType31);
        boolean boolean33 = localDate9.isSupported(dateTimeFieldType31);
        int int34 = localDate9.getEra();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = localDate39.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate51 = localDate39.minusYears(10);
        java.lang.Object obj52 = null;
        boolean boolean53 = localDate51.equals(obj52);
        org.joda.time.LocalDate localDate55 = localDate51.withYear(0);
        org.joda.time.LocalDate localDate56 = localDate9.withFields((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.LocalDate localDate58 = localDate56.withDayOfYear(365);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property60 = localDate59.yearOfCentury();
        org.joda.time.LocalDate.Property property61 = localDate59.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property61.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate64 = property61.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray65 = localDate64.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType66.getDurationType();
        int int68 = localDate64.get(dateTimeFieldType66);
        int int69 = localDate64.getYear();
        int[] intArray70 = localDate64.getValues();
        int int71 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate56, intArray70);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology74 = localDate73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.secondOfMinute();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int78 = dateTime76.get(dateTimeFieldType77);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType77.getDurationType();
        int int80 = localDate56.get(dateTimeFieldType77);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property82 = localDate81.yearOfCentury();
        org.joda.time.LocalDate localDate83 = property82.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean87 = dateTimeZone86.isFixed();
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone86);
        org.joda.time.DateTime dateTime89 = localDate83.toDateTimeAtStartOfDay(dateTimeZone86);
        org.joda.time.MutableDateTime mutableDateTime90 = dateTime89.toMutableDateTime();
        org.joda.time.Chronology chronology91 = dateTime89.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = chronology91.yearOfEra();
        org.joda.time.DateTimeField dateTimeField93 = chronology91.weekyearOfCentury();
        boolean boolean94 = dateTimeFieldType77.isSupported(chronology91);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeFieldArray65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 53 + "'", int71 == 53);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 22 + "'", int78 == 22);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(mutableDateTime90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        calendar3.roll(0, false);
        int int15 = calendar3.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone16 = calendar3.getTimeZone();
        int int17 = calendar3.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar3.set(292278993, 30020100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-148633495167230,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2740) + "'", int17 == (-2740));
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.util.Locale locale12 = new java.util.Locale("zho", "1970-01-01T00:00:00.000+06:00", "Chinese");
        java.lang.String str13 = dateTime7.toString("2022-03-11", locale12);
        java.lang.String str14 = locale12.getCountry();
        java.lang.String str15 = locale12.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(locale12.toString(), "zho_1970-01-01T00:00:00.000+06:00_Chinese");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-03-11" + "'", str13, "2022-03-11");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str14, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate6.withDayOfWeek(28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        java.lang.String str8 = period7.toString();
        java.util.Date date15 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        int int16 = date15.getDay();
        boolean boolean17 = period7.equals((java.lang.Object) date15);
        java.util.Date date24 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str25 = date24.toGMTString();
        date24.setSeconds(10);
        int int28 = date24.getDate();
        boolean boolean29 = date15.after(date24);
        long long30 = date24.getTime();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertEquals(date15.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Feb 10 10:00:10 UTC 1910");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str25, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1889963990000L) + "'", long30 == (-1889963990000L));
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = yearMonth5.getFields();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = yearMonth20.getFieldTypes();
        org.joda.time.YearMonth.Property property24 = yearMonth20.year();
        int int25 = property24.getMinimumValue();
        int int26 = property24.getMinimumValueOverall();
        java.lang.Object obj27 = null;
        boolean boolean28 = property24.equals(obj27);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = yearMonth30.toInterval(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Interval interval34 = interval32.withPeriodAfterStart(readablePeriod33);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval35.toMutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        long long38 = mutableInterval36.toDurationMillis();
        boolean boolean39 = property24.equals((java.lang.Object) mutableInterval36);
        org.joda.time.YearMonth yearMonth41 = property24.setCopy(2000);
        org.joda.time.Interval interval42 = yearMonth41.toInterval();
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth46.toInterval(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Interval interval50 = interval48.withPeriodAfterStart(readablePeriod49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean54 = period52.isSupported(durationFieldType53);
        org.joda.time.YearMonth yearMonth56 = yearMonth44.withPeriodAdded((org.joda.time.ReadablePeriod) period52, 32770);
        org.joda.time.PeriodType periodType57 = period52.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType59 = period52.getFieldType((int) (short) 1);
        org.joda.time.PeriodType periodType60 = period52.getPeriodType();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withPeriodAdded((org.joda.time.ReadablePeriod) period52, 9221);
        org.joda.time.YearMonth yearMonth63 = yearMonth18.plus((org.joda.time.ReadablePeriod) period52);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-292275054) + "'", int26 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        long long34 = chronology30.add((long) 32770, (long) 10, 1);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.monthOfYear();
        java.lang.String str36 = chronology30.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32780L + "'", long34 == 32780L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+06:00]" + "'", str36, "ISOChronology[+06:00]");
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth6.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth6.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = yearMonth6.toString(dateTimeFormatter11);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth14.getFieldTypes();
        org.joda.time.YearMonth.Property property18 = yearMonth14.year();
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth22.toInterval(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval24.withPeriodAfterStart(readablePeriod25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval26.toPeriod(periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean30 = period28.isSupported(durationFieldType29);
        org.joda.time.YearMonth yearMonth32 = yearMonth20.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 32770);
        org.joda.time.YearMonth yearMonth33 = yearMonth14.minus((org.joda.time.ReadablePeriod) period28);
        boolean boolean34 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology35 = yearMonth33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter4.withChronology(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.months();
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = yearMonth40.toInterval(dateTimeZone41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = yearMonth40.getFieldTypes();
        org.joda.time.YearMonth.Property property44 = yearMonth40.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = yearMonth40.toString(dateTimeFormatter45);
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = yearMonth48.toInterval(dateTimeZone49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = yearMonth48.getFieldTypes();
        org.joda.time.YearMonth.Property property52 = yearMonth48.year();
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = yearMonth56.toInterval(dateTimeZone57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Interval interval60 = interval58.withPeriodAfterStart(readablePeriod59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval60.toPeriod(periodType61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean64 = period62.isSupported(durationFieldType63);
        org.joda.time.YearMonth yearMonth66 = yearMonth54.withPeriodAdded((org.joda.time.ReadablePeriod) period62, 32770);
        org.joda.time.YearMonth yearMonth67 = yearMonth48.minus((org.joda.time.ReadablePeriod) period62);
        boolean boolean68 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.Chronology chronology69 = yearMonth67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.year();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology69.getZone();
        org.joda.time.Chronology chronology72 = chronology35.withZone(dateTimeZone71);
        long long76 = chronology72.add((-31449599990L), (long) 19, (int) 'a');
        org.joda.time.DateTimeField dateTimeField77 = chronology72.dayOfWeek();
        org.joda.time.DurationField durationField78 = chronology72.months();
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth(2022, (int) (byte) 1, chronology72);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale83 = new java.util.Locale("yearOfCentury");
        boolean boolean84 = dateTimeZone81.equals((java.lang.Object) locale83);
        int int86 = dateTimeZone81.getStandardOffset(9223371988855200000L);
        org.joda.time.YearMonth yearMonth87 = org.joda.time.YearMonth.now(dateTimeZone81);
        org.joda.time.Interval interval88 = yearMonth79.toInterval(dateTimeZone81);
        java.lang.Object obj89 = null;
        boolean boolean90 = yearMonth79.equals(obj89);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01" + "'", str12, "1970-01");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01" + "'", str46, "1970-01");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-31449598147L) + "'", long76 == (-31449598147L));
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertEquals(locale83.toString(), "yearofcentury");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 360000000 + "'", int86 == 360000000);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 6);
        long long10 = dateTimeZone3.getMillisKeepLocal(dateTimeZone6, (long) 10);
        org.joda.time.Interval interval11 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtMidnight(dateTimeZone3);
        java.lang.String str13 = dateTimeZone3.toString();
        long long16 = dateTimeZone3.convertLocalToUTC((long) 42, true);
        java.lang.String str17 = dateTimeZone3.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21600000 + "'", int8 == 21600000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+06:00" + "'", str13, "+06:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-21599958L) + "'", long16 == (-21599958L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+06:00" + "'", str17, "+06:00");
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        long long20 = dateTimeField14.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeField14.getAsShortText(70, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 315705600000L + "'", long20 == 315705600000L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        java.util.Date date10 = dateMidnight9.toDate();
        date10.setDate((int) (short) 10);
        long long13 = date10.getTime();
        int int14 = date10.getDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1836000000L) + "'", long13 == (-1836000000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str5 = property2.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronology();
        boolean boolean12 = dateTimeFormatter10.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter10.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property17.getDifference(readableInstant19);
        org.joda.time.LocalDate localDate21 = property17.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        boolean boolean30 = localDate21.equals((java.lang.Object) dateTime29);
        java.util.Date date31 = localDate21.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getRangeDurationType();
        boolean boolean34 = localDate21.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = localDate39.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate51 = localDate39.minusYears(10);
        boolean boolean52 = localDate21.isAfter((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate55 = localDate51.withFieldAdded(durationFieldType53, 70);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        org.joda.time.LocalDate localDate58 = property57.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone61);
        org.joda.time.DateTime dateTime64 = localDate58.toDateTimeAtStartOfDay(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime64.toMutableDateTime();
        org.joda.time.Chronology chronology66 = dateTime64.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.halfdays();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.monthOfYear();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property70 = localDate69.yearOfCentury();
        org.joda.time.LocalDate localDate71 = property70.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean75 = dateTimeZone74.isFixed();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone74);
        org.joda.time.DateTime dateTime77 = localDate71.toDateTimeAtStartOfDay(dateTimeZone74);
        org.joda.time.DateTime dateTime78 = dateTime77.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str80 = dateTimeFieldType79.getName();
        org.joda.time.DateTime.Property property81 = dateTime78.property(dateTimeFieldType79);
        org.joda.time.DateTime dateTime82 = property81.roundFloorCopy();
        org.joda.time.DateTime.Property property83 = dateTime82.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime82.getZone();
        java.util.TimeZone timeZone85 = dateTimeZone84.toTimeZone();
        org.joda.time.Chronology chronology86 = chronology66.withZone(dateTimeZone84);
        org.joda.time.DateTimeField dateTimeField87 = chronology86.clockhourOfHalfday();
        org.joda.time.DurationField durationField88 = chronology86.seconds();
        boolean boolean89 = durationFieldType53.isSupported(chronology86);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter14.withChronology(chronology86);
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType6.getField(chronology86);
        long long93 = dateTimeField91.roundCeiling(47536525L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "weekyear" + "'", str80, "weekyear");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(timeZone85);
        org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 31514400000L + "'", long93 == 31514400000L);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        int int23 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        java.util.Date date25 = dateTime22.toDate();
        int int26 = date25.getDate();
        int int27 = date25.getHours();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Feb 10 18:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 18 + "'", int27 == 18);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = localDate24.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 32772);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime33 = dateTime29.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths(32772);
        org.joda.time.DateTime dateTime43 = localDate42.toDateTimeAtStartOfDay();
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePartial) localDate42, (long) 15);
        org.joda.time.DateTimeField dateTimeField46 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(76872L, chronology34);
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType16.getField(chronology34);
        int int51 = dateTimeField48.getDifference((long) (-34), 21597772L);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = dateTimeField48.add(194400000L, (-1889985599000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1889985599000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        java.util.Date date5 = new java.util.Date(21632, 360240000, 22596, 18032772, 21600010);
        date5.setTime(21634713L);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 06:00:34 UTC 1970");
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        long long11 = interval5.getEndMillis();
        org.joda.time.MutableInterval mutableInterval12 = interval5.toMutableInterval();
        org.joda.time.Interval interval13 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        long long15 = interval13.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears(2022);
        java.lang.Object obj26 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillis((long) 32772);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime40 = dateTime36.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj26, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        boolean boolean45 = dateTimeField43.isLeap((-1889963999000L));
        int int46 = dateTime23.get(dateTimeField43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval47 = interval13.withStart((org.joda.time.ReadableInstant) dateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-21600000L) + "'", long11 == (-21600000L));
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-21600000L) + "'", long15 == (-21600000L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 70 + "'", int46 == 70);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter8.getParser();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter8.withZone(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.parse("1970-01-01T00:00:00.000+00:00:00.057", dateTimeFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21600000 + "'", int14 == 21600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType0.getField(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 6);
        long long10 = dateTimeZone3.getMillisKeepLocal(dateTimeZone6, (long) 10);
        org.joda.time.Interval interval11 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getMonthOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        boolean boolean34 = dateTime33.isBeforeNow();
        int int35 = dateTime33.getDayOfYear();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property37 = dateTime24.minuteOfDay();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.DateTime.Property property50 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.DateTime dateTime52 = dateTime24.withField(dateTimeFieldType48, 1978);
        org.joda.time.LocalDate.Property property53 = localDate0.property(dateTimeFieldType48);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.yearOfCentury();
        org.joda.time.LocalDate localDate56 = property55.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone59);
        org.joda.time.DateTime dateTime62 = localDate56.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime62.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str65 = dateTimeFieldType64.getName();
        org.joda.time.DateTime.Property property66 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime67 = property66.withMaximumValue();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.yearOfCentury();
        org.joda.time.LocalDate localDate70 = property69.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean74 = dateTimeZone73.isFixed();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone73);
        org.joda.time.DateTime dateTime76 = localDate70.toDateTimeAtStartOfDay(dateTimeZone73);
        int int77 = dateTime67.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime.Property property78 = dateTime76.hourOfDay();
        int int79 = dateTime76.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int81 = dateTime76.get(dateTimeFieldType80);
        int int82 = localDate0.indexOf(dateTimeFieldType80);
        int int83 = localDate0.getYear();
        org.joda.time.LocalDate.Property property84 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate86 = localDate0.plusYears(54);
        int int87 = localDate86.getWeekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21600000 + "'", int8 == 21600000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 42 + "'", int35 == 42);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyear" + "'", str49, "weekyear");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekyear" + "'", str65, "weekyear");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2022 + "'", int83 == 2022);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2076 + "'", int87 == 2076);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isPrinter();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("2022-02-11T15:36:27.835+06:00", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        java.util.Date date1 = new java.util.Date((long) (-113952));
        java.util.Date date3 = new java.util.Date((long) (short) 1);
        int int4 = date3.getSeconds();
        boolean boolean5 = date1.before(date3);
        java.util.Date date7 = new java.util.Date((long) (-113952));
        java.util.Date date9 = new java.util.Date((long) (short) 1);
        int int10 = date9.getSeconds();
        boolean boolean11 = date7.before(date9);
        boolean boolean12 = date1.before(date7);
        date7.setMonth((-1));
        int int15 = date7.getHours();
        int int16 = date7.getHours();
        org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 31 23:58:06 UTC 1969");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Dec 31 23:58:06 UTC 1968");
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        int int23 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.DateTime.Property property25 = dateTime22.weekOfWeekyear();
        java.lang.String str26 = property25.getAsString();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str32 = property29.getAsString();
        org.joda.time.LocalDate localDate33 = property29.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone36);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.minutes();
        boolean boolean40 = localDate38.isSupported(durationFieldType39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property42 = localDate41.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property42.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate43.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTime();
        boolean boolean51 = dateTime49.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = interval55.withChronology(chronology56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfCentury();
        org.joda.time.LocalDate localDate60 = property59.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone63);
        org.joda.time.DateTime dateTime66 = localDate60.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime66.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property68 = dateTime67.year();
        boolean boolean69 = interval57.contains((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Period period70 = interval57.toPeriod();
        org.joda.time.DateTime dateTime72 = dateTime49.withPeriodAdded((org.joda.time.ReadablePeriod) period70, 360240000);
        org.joda.time.LocalDate localDate73 = localDate38.plus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.LocalDate localDate74 = localDate33.plus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.LocalDate localDate76 = localDate74.minusYears(39);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate79 = localDate76.withFieldAdded(durationFieldType77, 796407);
        java.lang.String str80 = durationFieldType77.toString();
        boolean boolean81 = property25.equals((java.lang.Object) durationFieldType77);
        int int82 = property25.getMinimumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "6" + "'", str26, "6");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22" + "'", str32, "22");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "weekyears" + "'", str80, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.lang.String str34 = calendar33.getCalendarType();
        java.lang.String str35 = calendar33.getCalendarType();
        int int36 = calendar33.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar33.clear(43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 43");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr" + "'", str32, "fr");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572467988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=41,SECOND=7,MILLISECOND=988,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "gregory" + "'", str34, "gregory");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gregory" + "'", str35, "gregory");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        int int12 = dateTime9.getMonthOfYear();
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.DateMidnight dateMidnight16 = localDate15.toDateMidnight();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate.Property property19 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField22 = property19.getField();
        int int24 = dateTimeField22.get((long) 'u');
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        int int28 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate27);
        boolean boolean29 = localDate15.isAfter((org.joda.time.ReadablePartial) localDate27);
        int int30 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDate15);
        int int31 = localDate15.getMonthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 99 + "'", int28 == 99);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 86399 + "'", int30 == 86399);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        org.joda.time.DateTime dateTime11 = interval5.getEnd();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonth13.toInterval(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonth13.getFieldTypes();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.withYear((int) (short) 100);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        boolean boolean28 = interval24.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval29 = interval24.toMutableInterval();
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonth33.toInterval(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Interval interval37 = interval35.withPeriodAfterStart(readablePeriod36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean41 = period39.isSupported(durationFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth31.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 32770);
        org.joda.time.PeriodType periodType44 = period39.getPeriodType();
        boolean boolean45 = interval24.equals((java.lang.Object) period39);
        org.joda.time.YearMonth yearMonth46 = yearMonth18.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Interval interval47 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime48 = interval47.getStart();
        long long49 = interval47.getStartMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-21600000L) + "'", long49 == (-21600000L));
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval6.toMutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        boolean boolean16 = mutableInterval7.contains((org.joda.time.ReadableInterval) interval14);
        long long17 = mutableInterval7.getEndMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-21600000L) + "'", long17 == (-21600000L));
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.withMillis((long) 1969);
        org.joda.time.DateTime.Property property16 = dateTime11.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property7.getDifference(readableInstant9);
        org.joda.time.LocalDate localDate11 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate18 = localDate16.plusMonths(32772);
        org.joda.time.LocalDate localDate19 = localDate11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property21 = localDate11.yearOfEra();
        int int22 = localDate11.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        boolean boolean29 = localDate27.isSupported(durationFieldType28);
        org.joda.time.LocalDate localDate31 = localDate27.minusDays(57);
        org.joda.time.LocalDate localDate33 = localDate27.plusYears((int) (byte) 10);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        boolean boolean35 = localDate11.isAfter((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalTime localTime36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate33.toDateTime(localTime36, dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfCentury();
        org.joda.time.LocalDate localDate46 = property45.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean50 = dateTimeZone49.isFixed();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone49);
        org.joda.time.DateTime dateTime52 = localDate46.toDateTimeAtStartOfDay(dateTimeZone49);
        org.joda.time.DateTime dateTime53 = dateTime52.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property54 = dateTime53.year();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate57 = property56.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str66 = dateTimeFieldType65.getName();
        org.joda.time.DateTime.Property property67 = dateTime64.property(dateTimeFieldType65);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime70 = dateTime64.plusMillis((int) (byte) 0);
        boolean boolean71 = dateTime43.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property73 = localDate72.yearOfCentury();
        org.joda.time.LocalDate.Property property74 = localDate72.yearOfCentury();
        org.joda.time.LocalDate localDate76 = property74.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str77 = property74.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property74.getFieldType();
        int int79 = dateTime43.get(dateTimeFieldType78);
        boolean boolean80 = dateTime38.isSupported(dateTimeFieldType78);
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime38.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int84 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime81, "2022-01-01", 12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2099 + "'", int22 == 2099);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "weekyear" + "'", str66, "weekyear");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "22" + "'", str77, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        boolean boolean29 = dateTime28.isBeforeNow();
        int int30 = dateTime28.getDayOfYear();
        boolean boolean31 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology32 = dateTime28.getChronology();
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        boolean boolean34 = dateTime28.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 42 + "'", int30 == 42);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = localDate4.isSupported(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        boolean boolean12 = interval11.isAfterNow();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths(32772);
        org.joda.time.LocalDate localDate21 = localDate17.minusYears((int) (short) 10);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getName(10L);
        org.joda.time.Interval interval26 = localDate17.toInterval(dateTimeZone23);
        boolean boolean27 = interval11.isAfter((org.joda.time.ReadableInterval) interval26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = interval42.withChronology(chronology43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property55 = dateTime54.year();
        boolean boolean56 = interval44.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period57 = interval44.toPeriod();
        org.joda.time.DateTime dateTime59 = dateTime36.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 360240000);
        org.joda.time.Interval interval60 = interval26.withPeriodAfterStart((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property62.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = localDate63.toDateTimeAtStartOfDay(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate71 = dateTime69.toLocalDate();
        org.joda.time.Interval interval72 = localDate71.toInterval();
        boolean boolean73 = interval72.isAfterNow();
        boolean boolean74 = interval26.isBefore((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = interval78.withChronology(chronology79);
        org.joda.time.Duration duration81 = interval78.toDuration();
        org.joda.time.Interval interval82 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration81);
        boolean boolean84 = interval82.isAfter((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((java.lang.Object) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+06:00" + "'", str25, "+06:00");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        int int16 = localDate5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.minutes();
        boolean boolean23 = localDate21.isSupported(durationFieldType22);
        org.joda.time.LocalDate localDate25 = localDate21.minusDays(57);
        org.joda.time.LocalDate localDate27 = localDate21.plusYears((int) (byte) 10);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        boolean boolean29 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate27.toDateTime(localTime30, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate51 = property50.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean55 = dateTimeZone54.isFixed();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone54);
        org.joda.time.DateTime dateTime57 = localDate51.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateTime dateTime58 = dateTime57.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str60 = dateTimeFieldType59.getName();
        org.joda.time.DateTime.Property property61 = dateTime58.property(dateTimeFieldType59);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime64 = dateTime58.plusMillis((int) (byte) 0);
        boolean boolean65 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property67 = localDate66.yearOfCentury();
        org.joda.time.LocalDate.Property property68 = localDate66.yearOfCentury();
        org.joda.time.LocalDate localDate70 = property68.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str71 = property68.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property68.getFieldType();
        int int73 = dateTime37.get(dateTimeFieldType72);
        boolean boolean74 = dateTime32.isSupported(dateTimeFieldType72);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType72.getDurationType();
        java.lang.String str76 = durationFieldType75.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2099 + "'", int16 == 2099);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "weekyear" + "'", str60, "weekyear");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "22" + "'", str71, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "years" + "'", str76, "years");
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime24.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.DateTime.Property property28 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = property28.roundFloorCopy();
        org.joda.time.DateTime.Property property30 = dateTime29.year();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(42);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.getName();
        org.joda.time.DateTime.Property property45 = dateTime42.property(dateTimeFieldType43);
        boolean boolean47 = dateTime42.equals((java.lang.Object) 'u');
        boolean boolean48 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTime.Property property50 = dateTime32.property(dateTimeFieldType49);
        int int51 = dateTime14.get(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType49.getRangeDurationType();
        java.lang.String str53 = durationFieldType52.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate57 = property56.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime63.toMutableDateTime();
        org.joda.time.Chronology chronology65 = dateTime63.getChronology();
        boolean boolean66 = dateTimeFieldType54.isSupported(chronology65);
        boolean boolean67 = durationFieldType52.isSupported(chronology65);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology65);
        org.joda.time.DateTime dateTime69 = dateTime68.withEarlierOffsetAtOverlap();
        int int70 = dateTime68.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weeks" + "'", str53, "weeks");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 355 + "'", int70 == 355);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate2.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = property12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDate localDate30 = property12.addWrapFieldToCopy(32770);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.minutes();
        boolean boolean37 = localDate35.isSupported(durationFieldType36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTime();
        boolean boolean48 = dateTime46.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = interval52.withChronology(chronology53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate57 = property56.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property65 = dateTime64.year();
        boolean boolean66 = interval54.contains((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period67 = interval54.toPeriod();
        org.joda.time.DateTime dateTime69 = dateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 360240000);
        org.joda.time.LocalDate localDate70 = localDate35.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.LocalDate localDate72 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 936);
        org.joda.time.LocalDate.Property property73 = localDate72.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate75 = localDate72.withDayOfMonth((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate35 = localDate23.minusYears(10);
        boolean boolean36 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTime dateTime37 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property38 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate.Property property39 = localDate5.weekyear();
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = yearMonth41.toInterval(dateTimeZone42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonth41.getFieldTypes();
        org.joda.time.YearMonth.Property property45 = yearMonth41.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = yearMonth41.toString(dateTimeFormatter46);
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = yearMonth49.toInterval(dateTimeZone50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = yearMonth49.getFieldTypes();
        org.joda.time.YearMonth.Property property53 = yearMonth49.year();
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = yearMonth57.toInterval(dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Interval interval61 = interval59.withPeriodAfterStart(readablePeriod60);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = interval61.toPeriod(periodType62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean65 = period63.isSupported(durationFieldType64);
        org.joda.time.YearMonth yearMonth67 = yearMonth55.withPeriodAdded((org.joda.time.ReadablePeriod) period63, 32770);
        org.joda.time.YearMonth yearMonth68 = yearMonth49.minus((org.joda.time.ReadablePeriod) period63);
        boolean boolean69 = yearMonth41.isAfter((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.Chronology chronology70 = yearMonth68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.monthOfYear();
        org.joda.time.DurationField durationField73 = chronology70.hours();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.yearOfEra();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField75.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property77 = localDate5.property(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01" + "'", str47, "1970-01");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = dateTimeField5.getRangeDurationField();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumShortTextLength(locale7);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime24 = dateTime19.plusMillis(6);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        boolean boolean34 = dateTime33.isBeforeNow();
        int int35 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime33.minusYears(48);
        int int38 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime();
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 32770);
        java.util.Calendar.Builder builder46 = builder40.setWeekDate(42, (-1), 14);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate53 = localDate51.plusMonths(32772);
        org.joda.time.LocalDate localDate55 = localDate51.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property56 = localDate51.weekyear();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        int int58 = property56.getMaximumTextLength(locale57);
        java.util.Calendar.Builder builder59 = builder46.setLocale(locale57);
        java.lang.String str60 = locale57.getCountry();
        java.lang.String str61 = locale57.getDisplayVariant();
        java.util.Calendar calendar62 = mutableDateTime39.toCalendar(locale57);
        // The following exception was thrown during execution in test generation
        try {
            calendar62.roll(58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=129751200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1974,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        boolean boolean8 = yearMonth1.equals((java.lang.Object) durationFieldType7);
        java.lang.String str9 = durationFieldType7.toString();
        java.lang.String str10 = durationFieldType7.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((long) (short) 1, chronology12);
        org.joda.time.Chronology chronology14 = yearMonth13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = durationFieldType7.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField19.getType();
        boolean boolean21 = dateTimeField19.isLenient();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eras" + "'", str9, "eras");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eras" + "'", str10, "eras");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        int int9 = dateTimeField7.get((long) 'u');
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        int int13 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.Chronology chronology15 = localDate12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(22596, 13, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("107");
        java.util.Locale.Builder builder6 = builder2.addUnicodeLocaleAttribute("107");
        java.util.Locale locale7 = builder2.build();
        java.util.Locale.Builder builder9 = builder2.setLanguage("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setVariant("59");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 59 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtMidnight(dateTimeZone13);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, (long) 9);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone1.isLocalDateTimeGap(localDateTime21);
        java.lang.Object obj23 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 32772);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime37 = dateTime33.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj23, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.hourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology38.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology38);
        int int46 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 21600000 + "'", int46 == 21600000);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Date date5 = new java.util.Date((long) 10);
        java.util.Calendar.Builder builder6 = builder0.setInstant(date5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate12 = property9.roundHalfCeilingCopy();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale13);
        int int15 = property9.getMaximumShortTextLength(locale13);
        java.util.Calendar.Builder builder16 = builder6.setLocale(locale13);
        java.util.Calendar.Builder builder20 = builder16.setWeekDate((int) (short) 0, 39, 21597772);
        java.util.Calendar.Builder builder25 = builder16.setTimeOfDay(292278993, 0, 13, 1969);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder28 = builder16.setWeekDefinition(0, 25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        boolean boolean12 = interval11.isAfterNow();
        boolean boolean14 = interval11.contains(317918924946L);
        long long15 = interval11.getStartMillis();
        boolean boolean17 = interval11.isBefore((-357000000L));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644516000000L + "'", long15 == 1644516000000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(41, 18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        int int7 = localDate6.getYearOfCentury();
        org.joda.time.LocalDate.Property property8 = localDate6.dayOfYear();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        int int25 = dateTime20.getHourOfDay();
        boolean boolean26 = dateTime20.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime20.toYearMonthDay();
        org.joda.time.DateTime dateTime29 = dateTime20.minus(1050308164619000L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int34 = dateTimeZone32.getOffset((long) 2022);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 32770, dateTimeZone32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime44.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str47 = dateTimeFieldType46.getName();
        org.joda.time.DateTime.Property property48 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime49 = property48.roundFloorCopy();
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime49.getZone();
        long long53 = dateTimeZone32.getMillisKeepLocal(dateTimeZone51, (long) 9);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) dateTime29, dateTimeZone51);
        org.joda.time.LocalDate localDate56 = localDate54.plusYears(935);
        org.joda.time.Chronology chronology57 = localDate54.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21600000 + "'", int34 == 21600000);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 9L + "'", long53 == 9L);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str5 = property2.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        org.joda.time.DateTimeField dateTimeField7 = property2.getField();
        int int8 = property2.getMaximumValueOverall();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDate11.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate19 = dateTime17.toLocalDate();
        org.joda.time.Interval interval20 = localDate19.toInterval();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.monthOfYear();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.DateTime.Property property46 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = property46.roundFloorCopy();
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime47.getZone();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.Chronology chronology51 = chronology31.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.clockhourOfHalfday();
        org.joda.time.DurationField durationField53 = chronology51.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.halfdayOfDay();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.Interval interval56 = interval20.withChronology(chronology51);
        org.joda.time.DateTimeField dateTimeField57 = chronology51.minuteOfDay();
        boolean boolean58 = property2.equals((java.lang.Object) dateTimeField57);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 99 + "'", int8 == 99);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getScript();
        java.lang.String str3 = locale0.toLanguageTag();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        int int6 = calendar4.getMaximum(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FR" + "'", str1, "FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr-FR" + "'", str3, "fr-FR");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572468900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=8,MILLISECOND=900,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.monthOfYear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property16.getDifference(readableInstant18);
        org.joda.time.LocalDate localDate20 = property16.withMaximumValue();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        int[] intArray23 = chronology11.get((org.joda.time.ReadablePartial) localDate20, 32772L);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(1L, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology11.getDateTimeMillis((long) 27, 56360, 86397, (int) 'u', 56384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56360 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1]");
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronology();
        boolean boolean11 = dateTimeFormatter9.isParser();
        java.util.Locale locale12 = dateTimeFormatter9.getLocale();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillis((long) 32772);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime26 = dateTime22.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter9.withChronology(chronology27);
        org.joda.time.Chronology chronology30 = dateTimeFormatter29.getChronolgy();
        org.joda.time.DurationField durationField31 = chronology30.halfdays();
        org.joda.time.DurationField durationField32 = chronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        boolean boolean34 = durationFieldType5.isSupported(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTimeAtStartOfDay(dateTimeZone18);
        long long22 = dateTimeZone18.convertUTCToLocal((long) (-52));
        long long25 = dateTimeZone18.adjustOffset((-3984631092000L), true);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-03-11" + "'", str11, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 21599948L + "'", long22 == 21599948L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3984631092000L) + "'", long25 == (-3984631092000L));
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(28800);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getDayOfMonth();
        int int4 = localDate2.getYearOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        org.joda.time.YearMonth yearMonth19 = property5.setCopy(6);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.withYear(16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = yearMonth21.getFieldTypes();
        org.joda.time.YearMonth yearMonth24 = yearMonth21.plusMonths(32772);
        java.lang.String str25 = yearMonth21.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = yearMonth21.getFieldTypes();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0016-01" + "'", str25, "0016-01");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDate12.getFields();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime24.year();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str37 = dateTimeFieldType36.getName();
        org.joda.time.DateTime.Property property38 = dateTime35.property(dateTimeFieldType36);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime35);
        int int40 = dateTime35.getHourOfDay();
        boolean boolean41 = dateTime35.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime35.toYearMonthDay();
        org.joda.time.DateTime dateTime44 = dateTime35.minus(1050308164619000L);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds(20);
        org.joda.time.DateTime.Property property47 = dateTime46.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int51 = dateTimeZone49.getOffsetFromLocal((long) 6);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime46.toMutableDateTime(dateTimeZone49);
        java.lang.String str54 = dateTimeZone49.getShortName((long) 8771);
        org.joda.time.DateTime dateTime55 = localDate12.toDateTimeAtStartOfDay(dateTimeZone49);
        long long57 = dateTimeZone49.nextTransition(31800000L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyear" + "'", str37, "weekyear");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 21600000 + "'", int51 == 21600000);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+06:00" + "'", str54, "+06:00");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 31800000L + "'", long57 == 31800000L);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = yearMonth38.toInterval(dateTimeZone39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = yearMonth38.getFieldTypes();
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = yearMonth38.toString(dateTimeFormatter43);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth46.toInterval(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = yearMonth46.getFieldTypes();
        org.joda.time.YearMonth.Property property50 = yearMonth46.year();
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = yearMonth54.toInterval(dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Interval interval58 = interval56.withPeriodAfterStart(readablePeriod57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval58.toPeriod(periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean62 = period60.isSupported(durationFieldType61);
        org.joda.time.YearMonth yearMonth64 = yearMonth52.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 32770);
        org.joda.time.YearMonth yearMonth65 = yearMonth46.minus((org.joda.time.ReadablePeriod) period60);
        boolean boolean66 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth65);
        org.joda.time.Chronology chronology67 = yearMonth65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.year();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology67.getZone();
        org.joda.time.Chronology chronology70 = chronology33.withZone(dateTimeZone69);
        long long74 = chronology70.add((-31449599990L), (long) 19, (int) 'a');
        org.joda.time.DateTimeField dateTimeField75 = chronology70.dayOfWeek();
        org.joda.time.DurationField durationField76 = chronology70.months();
        org.joda.time.Chronology chronology77 = chronology70.withUTC();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology77);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01" + "'", str44, "1970-01");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-31449598147L) + "'", long74 == (-31449598147L));
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        java.util.Locale locale8 = new java.util.Locale("70", "hi!");
        int int9 = property1.getMaximumShortTextLength(locale8);
        org.joda.time.LocalDate localDate10 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 32772);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate17 = localDate13.withFieldAdded(durationFieldType15, 42);
        org.joda.time.LocalDate localDate19 = localDate11.withFieldAdded(durationFieldType15, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(57);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone21);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate32 = localDate28.minusYears(11);
        int int33 = localDate32.getYear();
        org.joda.time.LocalDate localDate35 = localDate32.plusDays(100);
        org.joda.time.LocalDate.Property property36 = localDate35.weekyear();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getName(10L);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateMidnight dateMidnight42 = localDate35.toDateMidnight(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-27895795143830L), dateTimeZone38);
        long long46 = dateTimeZone21.getMillisKeepLocal(dateTimeZone38, (-1889992798987L));
        long long48 = dateTimeZone38.nextTransition((long) 86397772);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals(locale8.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2011 + "'", int33 == 2011);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+06:00" + "'", str40, "+06:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1890014398930L) + "'", long46 == (-1890014398930L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 86397772L + "'", long48 == 86397772L);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.withDayOfMonth(3);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int33 = dateTimeZone31.getOffsetFromLocal((long) 6);
        long long35 = dateTimeZone28.getMillisKeepLocal(dateTimeZone31, (long) 10);
        org.joda.time.DateTime dateTime36 = dateTime26.withZone(dateTimeZone31);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime36.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        boolean boolean49 = dateTime48.isBeforeNow();
        int int50 = dateTime48.getDayOfYear();
        boolean boolean51 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean52 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property53 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime56 = property53.setCopy(107);
        int int57 = dateTime56.getYearOfCentury();
        org.joda.time.Instant instant58 = dateTime56.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21600000 + "'", int33 == 21600000);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 42 + "'", int50 == 42);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 70 + "'", int57 == 70);
        org.junit.Assert.assertNotNull(instant58);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("0016-01");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getName();
        java.lang.String str8 = property5.getName();
        int int9 = property5.getMaximumValueOverall();
        java.lang.String str10 = property5.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "year" + "'", str8, "year");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[year]" + "'", str10, "Property[year]");
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        long long20 = dateTimeField14.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeField14.getAsShortText(70, locale22);
        org.joda.time.DurationField durationField24 = dateTimeField14.getDurationField();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str29 = dateTimeZone27.getName(10L);
        java.util.Locale locale33 = new java.util.Locale("70", "hi!");
        java.lang.String str34 = dateTimeZone27.getName((long) '4', locale33);
        java.lang.String str35 = locale33.toLanguageTag();
        java.lang.String str36 = dateTimeField14.getAsShortText((-360L), locale33);
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = yearMonth38.toInterval(dateTimeZone39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = yearMonth38.getFieldTypes();
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = yearMonth43.toInterval(dateTimeZone44);
        org.joda.time.YearMonth yearMonth47 = yearMonth43.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = yearMonth47.withChronologyRetainFields(chronology48);
        int int50 = yearMonth38.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonth yearMonth52 = yearMonth49.minus(readablePeriod51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = yearMonth49.toDateTime(readableInstant53);
        org.joda.time.Interval interval55 = yearMonth49.toInterval();
        java.util.Locale locale58 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "FRA");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) yearMonth49, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 315705600000L + "'", long20 == 315705600000L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+06:00" + "'", str29, "+06:00");
        org.junit.Assert.assertEquals(locale33.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+06:00" + "'", str34, "+06:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970" + "'", str36, "1970");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertEquals(locale58.toString(), "5 jun 798307 11:57:00 gmt_FRA");
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.yearOfCentury();
        int int20 = dateTimeField19.getMinimumValue();
        int int23 = dateTimeField19.getDifference((long) 479, (long) 34654295);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        long long34 = chronology30.add((long) 32770, (long) 10, 1);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfHalfday();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DurationField durationField37 = chronology30.months();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32780L + "'", long34 == 32780L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime19 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = chronology14.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime24 = dateTime19.plusMillis(6);
        long long25 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime19.withYear((-11865376));
        org.joda.time.DateTime.Property property28 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime19.plusSeconds(1667);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32772L + "'", long25 == 32772L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        int int11 = property9.getMaximumTextLength(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        org.joda.time.LocalDate.Property property17 = localDate16.centuryOfEra();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.era();
        boolean boolean21 = property9.equals((java.lang.Object) dateTimeField20);
        org.joda.time.DurationField durationField22 = dateTimeField20.getDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        int int34 = dateTimeField32.get((long) 'u');
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = dateTimeField32.getAsText((long) 5, locale36);
        int int38 = property24.getMaximumTextLength(locale36);
        java.util.Calendar.Builder builder39 = builder2.setLocale(locale36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate.Property property42 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property42.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str45 = property42.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property42.getFieldType();
        org.joda.time.DateTimeField dateTimeField47 = property42.getField();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale locale49 = builder48.build();
        java.util.Locale locale50 = builder48.build();
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder51.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder54 = builder51.clear();
        java.util.Locale locale55 = builder54.build();
        java.lang.String str56 = locale50.getDisplayName(locale55);
        int int57 = dateTimeField47.getMaximumShortTextLength(locale55);
        java.lang.String str58 = locale36.getDisplayScript(locale55);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22" + "'", str45, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Jan");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("kr");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"kr\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.secondOfDay();
        org.joda.time.DurationField durationField20 = chronology14.years();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate26 = property23.withMinimumValue();
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = interval31.withChronology(chronology32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property44 = dateTime43.year();
        boolean boolean45 = interval33.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period46 = interval33.toPeriod();
        java.lang.String str47 = period46.toString();
        int[] intArray49 = chronology27.get((org.joda.time.ReadablePeriod) period46, 83635236564686000L);
        java.lang.Object obj50 = null;
        boolean boolean51 = period46.equals(obj50);
        int[] intArray53 = chronology14.get((org.joda.time.ReadablePeriod) period46, (long) 86397);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0.011S" + "'", str47, "PT0.011S");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 138285774, 5, 4, 51, 26, 0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 1, 26, 397]");
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("KR");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setUnicodeLocaleKeyword("1 Jan 1970 00:00:32 GMT", "10 Feb 1910 10:00:10 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1 Jan 1970 00:00:32 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "kr");
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate6 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        boolean boolean8 = durationFieldType0.isSupported(chronology7);
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField31 = chronology10.months();
        org.joda.time.DurationField durationField32 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology10.monthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        java.util.Date date10 = dateMidnight9.toDate();
        date10.setTime((long) 13);
        int int13 = date10.getHours();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("22");
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes((-113952));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime2.withDayOfWeek((-2740));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2740 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(16);
        org.joda.time.YearMonth yearMonth13 = property5.addWrapFieldToCopy(22);
        org.joda.time.YearMonth yearMonth15 = property5.setCopy((int) (byte) 10);
        java.lang.String str16 = property5.getAsString();
        java.lang.String str17 = property5.getAsText();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfWeek();
        org.joda.time.LocalDate localDate13 = property11.addToCopy(10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getName(10L);
        java.util.Locale locale21 = new java.util.Locale("70", "hi!");
        java.lang.String str22 = dateTimeZone15.getName((long) '4', locale21);
        org.joda.time.Interval interval23 = localDate13.toInterval(dateTimeZone15);
        org.joda.time.LocalDate localDate25 = localDate13.plusDays(19);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = localDate30.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.LocalDate localDate42 = localDate30.minusYears(10);
        org.joda.time.DateTime dateTime43 = localDate30.toDateTimeAtStartOfDay();
        int int44 = localDate25.compareTo((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillis((long) 32772);
        org.joda.time.DateTime dateTime61 = dateTime59.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime63 = dateTime59.minusSeconds((int) (short) -1);
        boolean boolean64 = localDate47.equals((java.lang.Object) (short) -1);
        org.joda.time.LocalDate localDate65 = localDate30.withFields((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property68 = localDate67.yearOfCentury();
        org.joda.time.LocalDate localDate69 = property68.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean73 = dateTimeZone72.isFixed();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone72);
        org.joda.time.DateTime dateTime75 = localDate69.toDateTimeAtStartOfDay(dateTimeZone72);
        org.joda.time.LocalDate localDate77 = localDate69.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property78 = localDate69.dayOfWeek();
        long long80 = chronology66.set((org.joda.time.ReadablePartial) localDate69, 4705495200117L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+06:00" + "'", str17, "+06:00");
        org.junit.Assert.assertEquals(locale21.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+06:00" + "'", str22, "+06:00");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1644602400117L + "'", long80 == 1644602400117L);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        int int11 = dateTime7.getMinuteOfHour();
        int int12 = dateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        org.joda.time.DateTime dateTime29 = property27.addToCopy(42);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale39.getVariant();
        java.util.Calendar calendar41 = dateTime38.toCalendar(locale39);
        boolean boolean42 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone48);
        org.joda.time.DateTime dateTime51 = localDate45.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime51.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property53 = dateTime52.year();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.yearOfCentury();
        org.joda.time.LocalDate localDate56 = property55.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone59);
        org.joda.time.DateTime dateTime62 = localDate56.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime62.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str65 = dateTimeFieldType64.getName();
        org.joda.time.DateTime.Property property66 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime69 = dateTime52.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean73 = dateTimeZone72.isFixed();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone72);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.DateTime dateTime77 = localDate74.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.withMillis((long) 32772);
        org.joda.time.DateTime dateTime81 = dateTime79.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime83 = dateTime81.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone86);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Interval interval89 = interval87.withChronology(chronology88);
        org.joda.time.Duration duration90 = interval87.toDuration();
        org.joda.time.DateTime dateTime91 = dateTime83.plus((org.joda.time.ReadableDuration) duration90);
        org.joda.time.DateTime dateTime93 = dateTime52.withDurationAdded((org.joda.time.ReadableDuration) duration90, (int) 'u');
        org.joda.time.DateTime dateTime95 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration90, 6);
        org.joda.time.DateTime dateTime97 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration90, (int) (byte) 10);
        int int98 = dateTime7.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekyear" + "'", str65, "weekyear");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.roundFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        org.joda.time.LocalDate.Property property10 = localDate9.centuryOfEra();
        int int11 = localDate9.size();
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate14 = localDate9.withYear(32772);
        int int15 = localDate4.compareTo((org.joda.time.ReadablePartial) localDate9);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDate9.getValue(360240000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 360240000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("1970-01-01T06:00:00.001+06:00/1970-01-01T06:00:00.012+06:00");
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = yearMonth3.toInterval(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = interval5.withPeriodAfterStart(readablePeriod6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = interval7.toPeriod(periodType8);
        boolean boolean11 = interval7.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval12 = interval7.toMutableInterval();
        long long13 = interval7.getEndMillis();
        org.joda.time.MutableInterval mutableInterval14 = interval7.toMutableInterval();
        boolean boolean15 = mutableInterval14.isAfterNow();
        boolean boolean16 = interval1.abuts((org.joda.time.ReadableInterval) mutableInterval14);
        long long17 = interval1.toDurationMillis();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-21600000L) + "'", long13 == (-21600000L));
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 11L + "'", long17 == 11L);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField5 = chronology2.days();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronology();
        boolean boolean10 = dateTimeFormatter8.isParser();
        java.util.Locale locale11 = dateTimeFormatter8.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis((long) 32772);
        org.joda.time.DateTime dateTime23 = dateTime21.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime25 = dateTime21.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withChronology(chronology26);
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withZoneUTC();
        org.joda.time.Chronology chronology31 = dateTimeFormatter28.getChronolgy();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTime dateTime44 = localDate41.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withMillis((long) 32772);
        org.joda.time.DateTime dateTime48 = dateTime46.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime50 = dateTime46.minusSeconds((int) (short) -1);
        boolean boolean51 = localDate34.equals((java.lang.Object) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getRangeDurationType();
        int int54 = localDate34.indexOf(dateTimeFieldType52);
        org.joda.time.LocalDate localDate56 = localDate34.withCenturyOfEra(7);
        org.joda.time.LocalDate localDate58 = localDate34.plusYears((int) 'a');
        long long60 = chronology31.set((org.joda.time.ReadablePartial) localDate58, (long) 'u');
        int[] intArray62 = chronology2.get((org.joda.time.ReadablePartial) localDate58, 280799640L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4705516800117L + "'", long60 == 4705516800117L);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 4]");
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        int int11 = property10.getMinimumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = localDate16.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = dateTime26.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property30 = dateTime26.monthOfYear();
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        int int32 = dateTime26.getDayOfYear();
        int int33 = property10.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime35 = dateTime26.withCenturyOfEra(28797);
        int int36 = dateTime35.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.hourOfHalfday();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate26 = localDate22.minusYears(11);
        int int27 = localDate26.getYear();
        org.joda.time.LocalDate localDate29 = localDate26.plusDays(100);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDate29, (int) (byte) 10, locale31);
        int int33 = dateTimeField19.getMaximumValue();
        int int35 = dateTimeField19.getLeapAmount(34837611L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2011 + "'", int27 == 2011);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        java.lang.String str18 = property5.getName();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "year" + "'", str18, "year");
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (short) 100);
        org.joda.time.YearMonth yearMonth8 = yearMonth1.plusMonths((int) '#');
        java.lang.String str9 = yearMonth1.toString();
        int[] intArray10 = yearMonth1.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = yearMonth1.getFieldType(28800);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28800");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01" + "'", str9, "1970-01");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1]");
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.LocalDate localDate16 = localDate8.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property17 = localDate8.dayOfMonth();
        int int18 = property17.get();
        org.joda.time.LocalDate localDate20 = property17.addToCopy(0);
        int int21 = localDate20.size();
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = locale23.getDisplayLanguage(locale24);
        java.util.Set<java.lang.Character> charSet27 = locale23.getExtensionKeys();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.getCountry();
        java.lang.String str30 = locale23.getDisplayScript(locale28);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale28);
        java.lang.String str32 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDate20, 4, locale28);
        int int33 = localDate20.getWeekyear();
        org.joda.time.ReadablePartial readablePartial34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = localDate20.compareTo(readablePartial34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Chinese" + "'", str26, "Chinese");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "KR" + "'", str29, "KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572470177,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=10,MILLISECOND=177,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "4" + "'", str32, "4");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.monthOfYear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (-292275054), chronology11);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 32772);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((int) 'u');
        org.joda.time.DateTime.Property property30 = dateTime27.secondOfDay();
        org.joda.time.DateTime dateTime31 = property30.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime32 = localDate15.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime32.monthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate25 = dateTime23.toLocalDate();
        org.joda.time.Interval interval26 = localDate25.toInterval();
        boolean boolean27 = interval26.isAfterNow();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate34 = localDate32.plusMonths(32772);
        org.joda.time.LocalDate localDate36 = localDate32.minusYears((int) (short) 10);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getName(10L);
        org.joda.time.Interval interval41 = localDate32.toInterval(dateTimeZone38);
        boolean boolean42 = interval26.isAfter((org.joda.time.ReadableInterval) interval41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone48);
        org.joda.time.DateTime dateTime51 = localDate45.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        boolean boolean53 = dateTime51.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = interval57.withChronology(chronology58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate62 = property61.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDate62.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property70 = dateTime69.year();
        boolean boolean71 = interval59.contains((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period72 = interval59.toPeriod();
        org.joda.time.DateTime dateTime74 = dateTime51.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 360240000);
        org.joda.time.Interval interval75 = interval41.withPeriodAfterStart((org.joda.time.ReadablePeriod) period72);
        org.joda.time.MutablePeriod mutablePeriod76 = period72.toMutablePeriod();
        org.joda.time.DateTime dateTime77 = dateTime14.minus((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.Period period78 = mutablePeriod76.toPeriod();
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.minutes();
        int int80 = period78.get(durationFieldType79);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+06:00" + "'", str40, "+06:00");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        java.util.Date date3 = new java.util.Date(2099, 69, (int) '4');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        int int15 = dateTimeField13.get((long) 'u');
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        int int19 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDate18);
        boolean boolean20 = localDate6.isAfter((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property31 = dateTime30.year();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = dateTime40.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str43 = dateTimeFieldType42.getName();
        org.joda.time.DateTime.Property property44 = dateTime41.property(dateTimeFieldType42);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime47 = dateTime30.minusDays(32772);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.plus(readableDuration48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime47.getZone();
        org.joda.time.DateMidnight dateMidnight51 = localDate18.toDateMidnight(dateTimeZone50);
        boolean boolean52 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime53 = localDate4.toDateTimeAtStartOfDay(dateTimeZone50);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Nov 21 00:00:00 UTC 4004");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "weekyear" + "'", str43, "weekyear");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("KR");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.addUnicodeLocaleAttribute("dayOfWeek");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: dayOfWeek [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfHalfday();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology30.millis();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology30.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.dayOfWeek();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = interval17.withChronology(chronology18);
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime13.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded((long) ' ', (int) (byte) 100);
        int int25 = dateTime21.getSecondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime21.plusMonths(57);
        org.joda.time.DateTime dateTime29 = dateTime21.plusMinutes(16);
        org.joda.time.DateTime dateTime32 = dateTime29.withDurationAdded(0L, 57);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale36 = new java.util.Locale("yearOfCentury");
        boolean boolean37 = dateTimeZone34.equals((java.lang.Object) locale36);
        org.joda.time.DateTime dateTime38 = dateTime29.withZone(dateTimeZone34);
        org.joda.time.DateTime.Property property39 = dateTime38.year();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime38.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21597 + "'", int25 == 21597);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals(locale36.toString(), "yearofcentury");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.DateTime dateTime17 = property15.roundCeilingCopy();
        java.lang.String str18 = property15.getAsText();
        org.joda.time.DateTime dateTime19 = property15.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "117" + "'", str18, "117");
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate35 = localDate23.minusYears(10);
        boolean boolean36 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate39 = localDate35.withFieldAdded(durationFieldType37, 70);
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property57 = dateTime56.year();
        boolean boolean58 = interval46.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period59 = interval46.toPeriod();
        org.joda.time.LocalDate localDate60 = localDate39.plus((org.joda.time.ReadablePeriod) period59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate62 = localDate39.withWeekOfWeekyear(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate5.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate5.plusYears(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292281092 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        int int5 = date4.getMonth();
        int int6 = date4.getDate();
        date4.setDate(1978);
        date4.setMonth(0);
        date4.setSeconds(938);
        int int13 = date4.getDay();
        java.lang.String str14 = date4.toGMTString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Jun 01 00:15:38 UTC 1975");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1 Jun 1975 00:15:38 GMT" + "'", str14, "1 Jun 1975 00:15:38 GMT");
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.joda.time.Chronology chronology5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(21632772, (-7), 292278994, (-1853), (-292277022), chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1853 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronolgy();
        org.joda.time.DurationField durationField24 = chronology23.halfdays();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.secondOfMinute();
        boolean boolean28 = dateTimeField27.isSupported();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears(2022);
        long long13 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        int int14 = dateTime10.getYear();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime10.withMillisOfDay(57);
        org.joda.time.DateMidnight dateMidnight18 = dateTime10.toDateMidnight();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("1970");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int4 = dateTimeZone2.getOffset((long) 2022);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 32770, dateTimeZone2);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property12.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate15 = property12.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        boolean boolean17 = durationFieldType9.isSupported(chronology16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear(414088);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        int int23 = property6.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21600000 + "'", int4 == 21600000);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        java.util.Date date6 = calendar3.getTime();
        java.util.Date date12 = new java.util.Date((int) (short) 0, (-1), (-292275054), (int) (byte) 10, (int) 'u');
        int int13 = date12.getSeconds();
        boolean boolean14 = date6.after(date12);
        int int15 = date12.getDay();
        date12.setTime(324000000L);
        int int18 = date12.getHours();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals(date12.toString(), "Sun Jan 04 18:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DurationField durationField13 = dateTimeField12.getRangeDurationField();
        long long15 = dateTimeField12.roundCeiling(1644516000935L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1646071200000L + "'", long15 == 1646071200000L);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(32772L, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 6);
        long long21 = dateTimeZone14.getMillisKeepLocal(dateTimeZone17, (long) 10);
        org.joda.time.Interval interval22 = localDate12.toInterval(dateTimeZone14);
        int int23 = localDate12.getYear();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate26 = localDate12.withFieldAdded(durationFieldType24, 365);
        org.joda.time.DateTime dateTime28 = dateTime8.withFieldAdded(durationFieldType24, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTime.Property property31 = dateTime28.secondOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21600000 + "'", int19 == 21600000);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T00:00:00.000+06:00" + "'", str30, "2022-02-11T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = interval4.withChronology(chronology5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime16 = dateTime15.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        boolean boolean18 = interval6.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime16);
        int int20 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime.Property property21 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond(11);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.removeUnicodeLocaleAttribute("eras");
        java.util.Locale locale28 = builder27.build();
        boolean boolean29 = locale28.hasExtensions();
        java.util.Calendar calendar30 = dateTime22.toCalendar(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str32 = dateTimeFieldType31.getName();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate.Property property36 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property36.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate39 = property36.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        boolean boolean41 = durationFieldType33.isSupported(chronology40);
        boolean boolean42 = dateTimeFieldType31.isSupported(chronology40);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DurationField durationField49 = durationFieldType43.getField(chronology46);
        org.joda.time.DurationField durationField50 = chronology46.millis();
        boolean boolean51 = dateTimeFieldType31.isSupported(chronology46);
        int int52 = dateTime22.get(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "weekyear" + "'", str32, "weekyear");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone29, locale31);
        calendar33.setMinimalDaysInFirstWeek(0);
        java.time.Instant instant36 = calendar33.toInstant();
        calendar33.set(39, (int) 'u', 2848, 2011, 8, (int) 'x');
        calendar33.setTimeInMillis(34691322L);
        java.util.Date date46 = calendar33.getTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr" + "'", str32, "fr");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=34691322,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=38,SECOND=11,MILLISECOND=322,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 09:38:11 UTC 1970");
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears(2022);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime35.year();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str48 = dateTimeFieldType47.getName();
        org.joda.time.DateTime.Property property49 = dateTime46.property(dateTimeFieldType47);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime52 = dateTime35.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean56 = dateTimeZone55.isFixed();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone55);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withMillis((long) 32772);
        org.joda.time.DateTime dateTime64 = dateTime62.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = interval70.withChronology(chronology71);
        org.joda.time.Duration duration73 = interval70.toDuration();
        org.joda.time.DateTime dateTime74 = dateTime66.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTime dateTime76 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) 'u');
        org.joda.time.DateTime dateTime78 = dateTime25.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean82 = dateTimeZone81.isFixed();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone81);
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        org.joda.time.DateTime dateTime86 = localDate83.toDateTimeAtCurrentTime(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.minusYears(2022);
        int int89 = dateTime88.getCenturyOfEra();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration73, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Interval interval91 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration73);
        org.joda.time.Chronology chronology92 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime94 = dateTime14.minusMillis(2000);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime94.getZone();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "weekyear" + "'", str48, "weekyear");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTimeZone95);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.lang.String str8 = property5.getAsShortText();
        int int9 = property5.getMaximumValue();
        org.joda.time.YearMonth yearMonth11 = property5.addWrapFieldToCopy(56211);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.YearMonth yearMonth14 = yearMonth11.plusYears(28797);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("1969", "10 Feb 1910 10:00:01 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1969 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        java.util.Date date5 = new java.util.Date(21632, 360240000, 22596, 18032772, 21600010);
        org.joda.time.YearMonth yearMonth6 = org.joda.time.YearMonth.fromDateFields(date5);
        java.time.Instant instant7 = date5.toInstant();
        org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 05 12:10:00 UTC 30045692");
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setScript("");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setLanguageTag("2022-01");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        java.util.Date date1 = new java.util.Date((long) (-113952));
        java.util.Date date3 = new java.util.Date((long) (short) 1);
        int int4 = date3.getSeconds();
        boolean boolean5 = date1.before(date3);
        java.util.Date date7 = new java.util.Date((long) (-113952));
        java.util.Date date9 = new java.util.Date((long) (short) 1);
        int int10 = date9.getSeconds();
        boolean boolean11 = date7.before(date9);
        boolean boolean12 = date1.before(date7);
        int int13 = date1.getDay();
        date1.setDate(693);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtMidnight(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateMidnight dateMidnight25 = dateTime23.toDateMidnight();
        java.util.Date date26 = dateMidnight25.toDate();
        date26.setDate((int) (short) 10);
        long long29 = date26.getTime();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date26);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTime dateTime38 = localDate35.toDateTimeAtMidnight(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateMidnight dateMidnight40 = dateTime38.toDateMidnight();
        java.util.Date date41 = dateMidnight40.toDate();
        date41.setDate((int) (short) 10);
        boolean boolean44 = date26.before(date41);
        int int45 = date26.getMinutes();
        date26.setTime(309303202800000L);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date26);
        boolean boolean49 = date1.after(date26);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Oct 24 23:58:06 UTC 1971");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:58:06 UTC 1969");
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str24, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jun 06 04:20:00 UTC 11771");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1836000000L) + "'", long29 == (-1836000000L));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str39, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        int int7 = localDate6.getYear();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(100);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int17 = dateTimeZone15.getOffsetFromLocal((long) 6);
        long long19 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        long long21 = dateTimeZone15.nextTransition((long) 'u');
        java.lang.String str22 = dateTimeZone15.toString();
        org.joda.time.DateMidnight dateMidnight23 = localDate9.toDateMidnight(dateTimeZone15);
        int int24 = localDate9.size();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate32 = localDate30.plusMonths(32772);
        org.joda.time.LocalDate localDate34 = localDate30.minusYears((int) (short) 10);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str38 = dateTimeZone36.getName(10L);
        org.joda.time.Interval interval39 = localDate30.toInterval(dateTimeZone36);
        org.joda.time.LocalDate localDate41 = localDate30.plusWeeks(28800000);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        java.lang.String str45 = localDate43.toString();
        org.joda.time.LocalDate localDate47 = localDate43.minusYears(0);
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfCentury();
        org.joda.time.LocalDate.Property property51 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property51.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str54 = property51.getAsString();
        org.joda.time.LocalDate localDate55 = property51.roundHalfCeilingCopy();
        java.lang.String str56 = property51.getAsText();
        org.joda.time.LocalDate localDate58 = property51.addWrapFieldToCopy(796407);
        java.lang.String str59 = localDate58.toString();
        int int60 = localDate47.compareTo((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int68 = dateTimeZone66.getOffsetFromLocal((long) 6);
        long long70 = dateTimeZone63.getMillisKeepLocal(dateTimeZone66, (long) 10);
        org.joda.time.Interval interval71 = localDate61.toInterval(dateTimeZone63);
        long long73 = dateTimeZone63.convertUTCToLocal((long) 3);
        org.joda.time.DateMidnight dateMidnight74 = localDate58.toDateMidnight(dateTimeZone63);
        org.joda.time.DateTime dateTime75 = localDate41.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 32770, dateTimeZone63);
        java.lang.String str78 = dateTimeZone63.getShortName((-9223313660493402616L));
        org.joda.time.DateMidnight dateMidnight79 = localDate9.toDateMidnight(dateTimeZone63);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2011 + "'", int7 == 2011);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21600000 + "'", int17 == 21600000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 117L + "'", long21 == 117L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+06:00" + "'", str22, "+06:00");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+06:00" + "'", str38, "+06:00");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01" + "'", str45, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "22" + "'", str54, "22");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "22" + "'", str56, "22");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2029-02-11" + "'", str59, "2029-02-11");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 21600000 + "'", int68 == 21600000);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 21600003L + "'", long73 == 21600003L);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+06:00" + "'", str78, "+06:00");
        org.junit.Assert.assertNotNull(dateMidnight79);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("-1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.LocalDate localDate26 = localDate18.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property27 = localDate18.dayOfMonth();
        org.joda.time.DateTime dateTime28 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate18.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime40.year();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str53 = dateTimeFieldType52.getName();
        org.joda.time.DateTime.Property property54 = dateTime51.property(dateTimeFieldType52);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime51);
        int int56 = dateTime51.getHourOfDay();
        boolean boolean57 = dateTime51.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime51.toYearMonthDay();
        org.joda.time.DateTime dateTime60 = dateTime51.plusHours(2011);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = interval64.withChronology(chronology65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property68 = localDate67.yearOfCentury();
        org.joda.time.LocalDate localDate69 = property68.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean73 = dateTimeZone72.isFixed();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone72);
        org.joda.time.DateTime dateTime75 = localDate69.toDateTimeAtStartOfDay(dateTimeZone72);
        org.joda.time.DateTime dateTime76 = dateTime75.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property77 = dateTime76.year();
        boolean boolean78 = interval66.contains((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period79 = interval66.toPeriod();
        org.joda.time.DateTime dateTime80 = dateTime51.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime81 = dateTime30.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime82 = dateTime13.plus((org.joda.time.ReadablePeriod) period79);
        boolean boolean84 = dateTime13.isEqual((-31445624657L));
        org.joda.time.DateTime.Property property85 = dateTime13.millisOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weekyear" + "'", str53, "weekyear");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int18 = dateTimeZone16.getOffset((long) 2022);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 32770, dateTimeZone16);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str31 = dateTimeFieldType30.getName();
        org.joda.time.DateTime.Property property32 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = property32.roundFloorCopy();
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime33.getZone();
        long long37 = dateTimeZone16.getMillisKeepLocal(dateTimeZone35, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) 6);
        long long46 = dateTimeZone39.getMillisKeepLocal(dateTimeZone42, (long) 10);
        long long48 = dateTimeZone16.getMillisKeepLocal(dateTimeZone42, (long) 1970);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter11.withZone(dateTimeZone42);
        java.lang.String str51 = dateTimeZone42.getNameKey((long) 34530606);
        org.joda.time.DateTime dateTime52 = localDate6.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DurationFieldType durationFieldType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = dateTime52.withFieldAdded(durationFieldType53, 238);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21600000 + "'", int18 == 21600000);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 9L + "'", long37 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21600000 + "'", int44 == 21600000);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1970L + "'", long48 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.minusMonths(2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.LocalDate localDate15 = localDate7.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate18 = property16.addToCopy(10);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getName(10L);
        java.util.Locale locale26 = new java.util.Locale("70", "hi!");
        java.lang.String str27 = dateTimeZone20.getName((long) '4', locale26);
        org.joda.time.Interval interval28 = localDate18.toInterval(dateTimeZone20);
        org.joda.time.LocalDate localDate30 = localDate18.plusDays(19);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate35.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.LocalDate localDate47 = localDate35.minusYears(10);
        org.joda.time.DateTime dateTime48 = localDate35.toDateTimeAtStartOfDay();
        int int49 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Chronology chronology50 = localDate35.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime59.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str62 = dateTimeFieldType61.getName();
        org.joda.time.DateTime.Property property63 = dateTime60.property(dateTimeFieldType61);
        org.joda.time.DateTime dateTime64 = property63.roundFloorCopy();
        org.joda.time.DateTime.Property property65 = dateTime64.year();
        org.joda.time.DateTime dateTime67 = property65.addToCopy(42);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.yearOfCentury();
        org.joda.time.LocalDate localDate70 = property69.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean74 = dateTimeZone73.isFixed();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone73);
        org.joda.time.DateTime dateTime76 = localDate70.toDateTimeAtStartOfDay(dateTimeZone73);
        org.joda.time.DateTime dateTime77 = dateTime76.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str79 = dateTimeFieldType78.getName();
        org.joda.time.DateTime.Property property80 = dateTime77.property(dateTimeFieldType78);
        boolean boolean82 = dateTime77.equals((java.lang.Object) 'u');
        boolean boolean83 = dateTime67.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTime.Property property85 = dateTime67.property(dateTimeFieldType84);
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType84.getDurationType();
        int int87 = localDate35.get(dateTimeFieldType84);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = yearMonth2.isEqual((org.joda.time.ReadablePartial) localDate35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+06:00" + "'", str22, "+06:00");
        org.junit.Assert.assertEquals(locale26.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+06:00" + "'", str27, "+06:00");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "weekyear" + "'", str62, "weekyear");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "weekyear" + "'", str79, "weekyear");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeFormatter22.parseMillis("Italian (Italy)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval11.withPeriodAfterStart(readablePeriod12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval13.toPeriod(periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean17 = period15.isSupported(durationFieldType16);
        org.joda.time.YearMonth yearMonth19 = yearMonth7.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 32770);
        org.joda.time.YearMonth yearMonth20 = yearMonth1.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter25.getZone();
        java.util.Locale locale27 = dateTimeFormatter25.getLocale();
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = yearMonth29.toInterval(dateTimeZone30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = yearMonth29.getFieldTypes();
        org.joda.time.YearMonth.Property property33 = yearMonth29.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = yearMonth29.toString(dateTimeFormatter34);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = yearMonth37.toInterval(dateTimeZone38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = yearMonth37.getFieldTypes();
        org.joda.time.YearMonth.Property property41 = yearMonth37.year();
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = yearMonth45.toInterval(dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Interval interval49 = interval47.withPeriodAfterStart(readablePeriod48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval49.toPeriod(periodType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean53 = period51.isSupported(durationFieldType52);
        org.joda.time.YearMonth yearMonth55 = yearMonth43.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 32770);
        org.joda.time.YearMonth yearMonth56 = yearMonth37.minus((org.joda.time.ReadablePeriod) period51);
        boolean boolean57 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology58 = yearMonth56.getChronology();
        org.joda.time.Chronology chronology59 = yearMonth56.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter25.withChronology(chronology59);
        org.joda.time.DurationField durationField61 = chronology59.halfdays();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(0L, 536457600013L, chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.centuryOfEra();
        org.joda.time.YearMonth yearMonth64 = yearMonth1.withChronologyRetainFields(chronology59);
        java.lang.String str66 = yearMonth1.toString("20");
        java.lang.String str68 = yearMonth1.toString("2016-02-11");
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNull(dateTimeZone26);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01" + "'", str35, "1970-01");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "20" + "'", str66, "20");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2016-02-11" + "'", str68, "2016-02-11");
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime29 = dateTime26.minusMinutes(10);
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate32 = dateTime31.toLocalDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        int int1 = yearMonth0.getYear();
        org.joda.time.Chronology chronology2 = yearMonth0.getChronology();
        java.lang.String str4 = yearMonth0.toString("2022-02-12");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-12" + "'", str4, "2022-02-12");
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(2);
        org.joda.time.YearMonth yearMonth12 = property5.getYearMonth();
        org.joda.time.Interval interval13 = yearMonth12.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth15 = yearMonth12.withMonthOfYear(34530606);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34530606 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        java.util.Date date1 = new java.util.Date((long) 10);
        int int2 = date1.getMonth();
        int int3 = date1.getMonth();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(2);
        org.joda.time.YearMonth yearMonth12 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth14.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth18.withChronologyRetainFields(chronology19);
        int int21 = yearMonth18.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        boolean boolean23 = yearMonth18.isSupported(dateTimeFieldType22);
        org.joda.time.YearMonth yearMonth25 = yearMonth12.withField(dateTimeFieldType22, (int) (short) -1);
        org.joda.time.YearMonth.Property property26 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth28 = property26.setCopy(9);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth28);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        java.lang.String str4 = yearMonth2.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonth2.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = yearMonth2.getFieldType(18032772);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18032772");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01" + "'", str4, "1970-01");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        long long9 = dateTimeField6.addWrapField((long) 2, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale locale13 = new java.util.Locale("");
        java.lang.String str14 = dateTimeField6.getAsShortText(readablePartial10, 0, locale13);
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = localDate21.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.LocalDate localDate33 = localDate21.minusYears(10);
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfEra();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str36 = locale35.getDisplayVariant();
        java.lang.String str37 = locale35.getDisplayCountry();
        java.util.Locale locale38 = locale35.stripExtensions();
        int int39 = property34.getMaximumShortTextLength(locale38);
        java.lang.String str40 = locale38.getDisplayName();
        java.util.Locale.setDefault(category0, locale38);
        java.lang.String str42 = locale38.getDisplayVariant();
        java.util.Set<java.lang.String> strSet43 = locale38.getUnicodeLocaleKeys();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfCentury();
        org.joda.time.LocalDate localDate46 = property45.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean50 = dateTimeZone49.isFixed();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone49);
        org.joda.time.DateTime dateTime52 = localDate46.toDateTimeAtStartOfDay(dateTimeZone49);
        org.joda.time.LocalDate localDate54 = localDate46.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property55 = localDate46.dayOfMonth();
        org.joda.time.LocalDate localDate56 = property55.withMaximumValue();
        org.joda.time.LocalDate localDate57 = property55.roundCeilingCopy();
        org.joda.time.LocalDate localDate58 = property55.roundCeilingCopy();
        org.joda.time.LocalDate localDate60 = localDate58.withWeekyear(54);
        java.util.Locale locale63 = new java.util.Locale("2022-01-03T00:00:00.000+06:00");
        java.lang.String str64 = localDate60.toString("+23:59:57.772", locale63);
        java.lang.String str65 = locale38.getDisplayName(locale63);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 315532800002L + "'", long9 == 315532800002L);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinesisch (Taiwan)" + "'", str40, "Chinesisch (Taiwan)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertEquals(locale63.toString(), "2022-01-03t00:00:00.000+06:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+23:59:57.772" + "'", str64, "+23:59:57.772");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (Taiwan)" + "'", str65, "Chinese (Taiwan)");
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusYears(2022);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime44.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str47 = dateTimeFieldType46.getName();
        org.joda.time.DateTime.Property property48 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime51 = dateTime34.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean55 = dateTimeZone54.isFixed();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone54);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 32772);
        org.joda.time.DateTime dateTime63 = dateTime61.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = interval69.withChronology(chronology70);
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.DateTime dateTime73 = dateTime65.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTime dateTime75 = dateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) 'u');
        org.joda.time.DateTime dateTime77 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) '4');
        org.joda.time.DateTime dateTime79 = dateTime14.withDurationAdded((org.joda.time.ReadableDuration) duration72, 2017);
        int int80 = dateTime79.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime84 = dateTime79.withDate(86399, 56463, 936);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56463 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 41 + "'", int80 == 41);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Taiwan");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int12 = dateTimeZone10.getOffsetFromLocal((long) 6);
        long long14 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        org.joda.time.Interval interval15 = localDate5.toInterval(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = localDate4.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.String str18 = localDate4.toString("de");
        org.joda.time.DateTime dateTime19 = localDate4.toDateTimeAtCurrentTime();
        java.util.Date date20 = dateTime19.toDate();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((-1853));
        boolean boolean23 = languageRange1.equals((java.lang.Object) dateTime22);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "taiwan" + "'", str2, "taiwan");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "taiwan" + "'", str3, "taiwan");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21600000 + "'", int12 == 21600000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "115" + "'", str18, "115");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 09:41:12 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology30.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.year();
        long long39 = dateTimeField36.add((long) 28800, 31800000L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1003511073600028800L + "'", long39 == 1003511073600028800L);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfCentury();
        int int33 = dateTimeField32.getMinimumValue();
        int int35 = dateTimeField32.getMaximumValue((long) 21600000);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 99 + "'", int35 == 99);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate6 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        boolean boolean8 = durationFieldType0.isSupported(chronology7);
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        boolean boolean23 = dateTime22.isBeforeNow();
        int int24 = dateTime22.getDayOfYear();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property26 = dateTime13.centuryOfEra();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale36.getVariant();
        java.util.Calendar calendar38 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTime dateTime46 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillis((long) 32772);
        org.joda.time.DateTime dateTime50 = dateTime48.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = interval56.withChronology(chronology57);
        org.joda.time.Duration duration59 = interval56.toDuration();
        org.joda.time.DateTime dateTime60 = dateTime52.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration59);
        boolean boolean62 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime35);
        java.util.GregorianCalendar gregorianCalendar63 = dateTime35.toGregorianCalendar();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar63);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(21597, 309, (-18), 86399, 34530606, 252600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.YearMonth yearMonth11 = org.joda.time.YearMonth.now(dateTimeZone10);
        int int13 = dateTimeZone10.getStandardOffset(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter7.withZone(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = dateTimeFormatter7.parseLocalTime("Saturday");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21600000 + "'", int13 == 21600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int23 = dateTimeZone21.getOffsetFromLocal((long) 6);
        long long25 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 10);
        org.joda.time.Interval interval26 = localDate16.toInterval(dateTimeZone18);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        boolean boolean37 = dateTime35.isAfterNow();
        int int38 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-52), dateTimeZone18);
        org.joda.time.DateTime dateTime41 = dateTime14.withZone(dateTimeZone18);
        boolean boolean43 = dateTimeZone18.isStandardOffset((-31449598147L));
        int int45 = dateTimeZone18.getOffsetFromLocal((long) 53);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21600000 + "'", int23 == 21600000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21600000 + "'", int38 == 21600000);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) 'u');
        java.lang.String str8 = localDate5.toString();
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getName(10L);
        java.util.Locale locale18 = new java.util.Locale("70", "hi!");
        java.lang.String str19 = dateTimeZone12.getName((long) '4', locale18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(12L, dateTimeZone12);
        long long23 = dateTimeZone12.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime25 = localDate5.toDateTimeAtStartOfDay(dateTimeZone12);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone12.getShortName(120L, locale27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 829749, dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 34713, 20L, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11" + "'", str8, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+06:00" + "'", str14, "+06:00");
        org.junit.Assert.assertEquals(locale18.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+06:00" + "'", str19, "+06:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-31467224657L) + "'", long23 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+06:00" + "'", str28, "+06:00");
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minusMonths((int) (short) 1);
        java.lang.String str6 = yearMonth5.toString();
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval10.withPeriodAfterStart(readablePeriod11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = interval12.toPeriod(periodType13);
        org.joda.time.YearMonth yearMonth15 = yearMonth5.minus((org.joda.time.ReadablePeriod) period14);
        int int17 = period14.getValue((int) (byte) 0);
        java.lang.String str18 = period14.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1969-12" + "'", str6, "1969-12");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0S" + "'", str18, "PT0S");
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 100);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int10 = dateTimeZone8.getOffsetFromLocal((long) 6);
        long long12 = dateTimeZone5.getMillisKeepLocal(dateTimeZone8, (long) 10);
        org.joda.time.Interval interval13 = localDate3.toInterval(dateTimeZone5);
        org.joda.time.DateTime dateTime14 = localDate2.toDateTimeAtMidnight(dateTimeZone5);
        java.lang.String str15 = dateTimeZone5.toString();
        long long17 = dateTimeZone5.nextTransition((long) 0);
        long long19 = dateTimeZone5.previousTransition((long) '4');
        org.joda.time.DateTime dateTime20 = localDate1.toDateTimeAtStartOfDay(dateTimeZone5);
        int int22 = dateTimeZone5.getOffsetFromLocal(9223371988855200000L);
        int int24 = dateTimeZone5.getOffsetFromLocal(130645872000014L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21600000 + "'", int10 == 21600000);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+06:00" + "'", str15, "+06:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 21600000 + "'", int22 == 21600000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 21600000 + "'", int24 == 21600000);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("20");
        org.junit.Assert.assertNotNull(yearMonth1);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        int int13 = dateTime11.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfSecond(56384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56384 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.DateTime.Property property17 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        long long22 = dateTimeField19.add((long) (byte) 10, (-1));
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        int int26 = localDate25.getWeekyear();
        java.lang.String str27 = localDate25.toString();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTime(localTime28);
        java.util.Locale locale32 = new java.util.Locale("");
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate.Property property35 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property35.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        int int40 = dateTimeField38.get((long) 'u');
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = dateTimeField38.getAsText((long) 5, locale42);
        java.lang.String str44 = locale32.getDisplayVariant(locale42);
        java.lang.String str45 = locale42.getDisplayLanguage();
        java.lang.String str46 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDate25, (int) (byte) 100, locale42);
        java.util.Locale.Builder builder47 = builder2.setLocale(locale42);
        java.lang.String str48 = locale42.getDisplayVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyear" + "'", str16, "weekyear");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-31449599990L) + "'", long22 == (-31449599990L));
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11" + "'", str27, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "70" + "'", str43, "70");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinesisch" + "'", str45, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        int int13 = localDate12.getEra();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.millis();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withCenturyOfEra(21597);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(56316);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime21.withDate(56316, 9221, 4140);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9221 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        java.util.Locale locale21 = new java.util.Locale("");
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale21.getScript();
        java.lang.String str24 = locale21.getDisplayLanguage();
        java.lang.String str25 = locale21.getLanguage();
        java.lang.String str26 = dateTimeField18.getAsText(31144141328400000L, locale21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "88" + "'", str26, "88");
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronolgy();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyear();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        calendar3.roll(0, false);
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder15.setInstant((long) 32770);
        java.util.Calendar calendar18 = builder17.build();
        boolean boolean20 = calendar18.after((java.lang.Object) (byte) 10);
        java.util.Date date21 = calendar18.getTime();
        java.util.Date date23 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateMidnight dateMidnight33 = dateTime31.toDateMidnight();
        java.util.Date date34 = dateMidnight33.toDate();
        boolean boolean35 = date23.before(date34);
        calendar18.setTime(date34);
        calendar3.setTime(date34);
        calendar3.set(14, 1970, 0, 31, 32769);
        int int44 = calendar3.getMinimalDaysInFirstWeek();
        java.lang.String str45 = calendar3.getCalendarType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14,MONTH=1970,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=0,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=31,MINUTE=32769,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-21600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str32, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gregory" + "'", str45, "gregory");
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate5 = property2.roundHalfCeilingCopy();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale6);
        int int8 = property2.getMaximumShortTextLength(locale6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate.Property property11 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str34 = dateTimeFieldType33.getName();
        org.joda.time.DateTime.Property property35 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str48 = dateTimeFieldType47.getName();
        org.joda.time.DateTime.Property property49 = dateTime46.property(dateTimeFieldType47);
        int int50 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime51 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int int52 = dateTime46.getWeekyear();
        int int53 = property2.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.era();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType54.getField(chronology58);
        boolean boolean62 = dateTime46.isSupported(dateTimeFieldType54);
        org.joda.time.DateTime dateTime64 = dateTime46.withYear(1978);
        int int65 = dateTime64.getMonthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "weekyear" + "'", str48, "weekyear");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        java.util.Date date6 = new java.util.Date(625, 63397318, 22596, 56172, 62, 936);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 08 13:17:36 UTC 5285703");
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime22 = property20.addToCopy((long) 935);
        org.joda.time.DateTime dateTime24 = property20.addToCopy(0);
        org.joda.time.DateTime dateTime25 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime27 = dateTime25.minus(10L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }
}

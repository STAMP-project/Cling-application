import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        int int8 = property5.getMaximumValue();
        int int9 = property5.getMinimumValue();
        org.joda.time.YearMonth yearMonth11 = property5.addToCopy(11);
        java.lang.String str12 = property5.getAsText();
        org.joda.time.DateTimeField dateTimeField13 = property5.getField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(42);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale26.getVariant();
        java.util.Calendar calendar28 = dateTime25.toCalendar(locale26);
        boolean boolean29 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property40 = dateTime39.year();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property42 = localDate41.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property42.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate43.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime49.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str52 = dateTimeFieldType51.getName();
        org.joda.time.DateTime.Property property53 = dateTime50.property(dateTimeFieldType51);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime56 = dateTime39.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone59);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.DateTime dateTime64 = localDate61.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withMillis((long) 32772);
        org.joda.time.DateTime dateTime68 = dateTime66.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Interval interval76 = interval74.withChronology(chronology75);
        org.joda.time.Duration duration77 = interval74.toDuration();
        org.joda.time.DateTime dateTime78 = dateTime70.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime80 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) 'u');
        org.joda.time.DateTime dateTime82 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration77, 6);
        org.joda.time.DateTime dateTime84 = dateTime16.minusYears(99);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMonths(28797);
        org.joda.time.DateTime dateTime88 = dateTime84.withMillis(32770L);
        org.joda.time.Instant instant89 = dateTime84.toInstant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weekyear" + "'", str52, "weekyear");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfMonth();
        int int4 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.LocalDate localDate7 = property5.withMinimumValue();
        org.joda.time.LocalDate localDate8 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "42" + "'", str6, "42");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        java.lang.String str16 = property15.toString();
        org.joda.time.LocalDate localDate17 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate19 = property15.addToCopy((-1));
        int int20 = localDate19.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate19.withEra(9221);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9221 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.withDayOfMonth(3);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int33 = dateTimeZone31.getOffsetFromLocal((long) 6);
        long long35 = dateTimeZone28.getMillisKeepLocal(dateTimeZone31, (long) 10);
        org.joda.time.DateTime dateTime36 = dateTime26.withZone(dateTimeZone31);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime36.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        boolean boolean49 = dateTime48.isBeforeNow();
        int int50 = dateTime48.getDayOfYear();
        boolean boolean51 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean52 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property53 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime56 = property53.setCopy(107);
        java.lang.String str57 = property53.getName();
        org.joda.time.DateTime dateTime58 = property53.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology60 = null;
        boolean boolean61 = dateTimeFieldType59.isSupported(chronology60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType59.getDurationType();
        boolean boolean63 = dateTime58.isSupported(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = dateTime58.withWeekOfWeekyear((-113952));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -113952 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21600000 + "'", int33 == 21600000);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 42 + "'", int50 == 42);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "dayOfYear" + "'", str57, "dayOfYear");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.DateTime.Property property27 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = property27.roundFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime28.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTime dateTime38 = localDate35.toDateTimeAtMidnight(dateTimeZone37);
        int int39 = dateTime38.getMonthOfYear();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        long long45 = dateTimeZone30.getMillisKeepLocal(dateTimeZone41, (long) 7);
        org.joda.time.DateTime dateTime46 = dateTime14.toDateTime(dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime.Property property48 = dateTime46.property(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = property48.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime50 = property48.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime50.withWeekOfWeekyear(69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 7L + "'", long45 == 7L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.year();
        int int4 = localDate1.getDayOfMonth();
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate1.toDateTime(localTime5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DurationField durationField14 = durationFieldType8.getField(chronology11);
        org.joda.time.DurationField durationField15 = chronology11.millis();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(315532800002L, chronology11);
        org.joda.time.LocalDate localDate17 = localDate1.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDate17.get(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        int int7 = localDate6.getYear();
        org.joda.time.LocalDate localDate9 = localDate6.plusMonths(935);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        java.lang.Object obj11 = null;
        boolean boolean12 = dateTime10.equals(obj11);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime10.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime10.withYearOfCentury((-625));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -625 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2011 + "'", int7 == 2011);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate5 = property2.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate6 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        boolean boolean8 = durationFieldType0.isSupported(chronology7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate9.withDayOfWeek(71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval11.withPeriodAfterStart(readablePeriod12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval13.toPeriod(periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean17 = period15.isSupported(durationFieldType16);
        org.joda.time.YearMonth yearMonth19 = yearMonth7.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 32770);
        org.joda.time.YearMonth yearMonth20 = yearMonth1.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = yearMonth20.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth23 = yearMonth20.withMonthOfYear(1988);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1988 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        org.joda.time.YearMonth yearMonth19 = property5.setCopy(6);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.withYear(16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = yearMonth21.getFieldTypes();
        org.joda.time.YearMonth yearMonth24 = yearMonth21.plusMonths(32772);
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = yearMonth26.toInterval(dateTimeZone27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = yearMonth26.getFieldTypes();
        org.joda.time.YearMonth.Property property30 = yearMonth26.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = yearMonth26.toString(dateTimeFormatter31);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = yearMonth34.toInterval(dateTimeZone35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = yearMonth34.getFieldTypes();
        org.joda.time.YearMonth.Property property38 = yearMonth34.year();
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = yearMonth42.toInterval(dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Interval interval46 = interval44.withPeriodAfterStart(readablePeriod45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = interval46.toPeriod(periodType47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean50 = period48.isSupported(durationFieldType49);
        org.joda.time.YearMonth yearMonth52 = yearMonth40.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 32770);
        org.joda.time.YearMonth yearMonth53 = yearMonth34.minus((org.joda.time.ReadablePeriod) period48);
        boolean boolean54 = yearMonth26.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology55 = yearMonth53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology55.getZone();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.secondOfDay();
        org.joda.time.DurationField durationField59 = chronology55.weekyears();
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth(chronology55);
        org.joda.time.YearMonth yearMonth61 = yearMonth21.withChronologyRetainFields(chronology55);
        org.joda.time.DurationField durationField62 = chronology55.days();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01" + "'", str32, "1970-01");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.withLaterOffsetAtOverlap();
        int int14 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime13.minus((-259200000L));
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.LocalDate localDate27 = localDate19.plusMonths((int) (short) 1);
        java.lang.String str28 = localDate27.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate27.toDateTimeAtStartOfDay(dateTimeZone35);
        long long41 = dateTimeZone35.convertLocalToUTC(31536000000L, true, (long) 32770);
        org.joda.time.DateTime dateTime42 = dateTime13.toDateTime(dateTimeZone35);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.DurationField durationField46 = property44.getDurationField();
        java.util.Locale.LanguageRange languageRange48 = new java.util.Locale.LanguageRange("Taiwan");
        double double49 = languageRange48.getWeight();
        double double50 = languageRange48.getWeight();
        boolean boolean51 = property44.equals((java.lang.Object) double50);
        org.joda.time.LocalDate localDate52 = property44.roundHalfCeilingCopy();
        boolean boolean53 = dateTime42.equals((java.lang.Object) localDate52);
        org.joda.time.DateTime dateTime55 = dateTime42.minusMinutes((int) (byte) 0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-03-11" + "'", str28, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 31514400000L + "'", long41 == 31514400000L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = dateTimeField5.getType();
        boolean boolean7 = dateTimeField5.isLenient();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property1.getFieldType();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = locale8.stripExtensions();
        int int11 = property1.getMaximumTextLength(locale8);
        org.joda.time.DateTimeField dateTimeField12 = property1.getField();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate.Property property17 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        long long23 = dateTimeField20.addWrapField((long) 2, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale27 = new java.util.Locale("");
        java.lang.String str28 = dateTimeField20.getAsShortText(readablePartial24, 0, locale27);
        java.util.Locale.setDefault(category14, locale27);
        java.util.Locale.setDefault(category13, locale27);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale27.getDisplayName(locale31);
        java.util.Calendar.Builder builder33 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder35 = builder33.setInstant((long) 32770);
        java.util.Calendar calendar36 = builder35.build();
        java.util.Calendar.Builder builder40 = builder35.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getCountry();
        java.lang.String str43 = locale41.getDisplayCountry();
        java.util.Calendar.Builder builder44 = builder35.setLocale(locale41);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str56 = dateTimeFieldType55.getName();
        org.joda.time.DateTime.Property property57 = dateTime54.property(dateTimeFieldType55);
        org.joda.time.Interval interval58 = property57.toInterval();
        org.joda.time.DateTimeField dateTimeField59 = property57.getField();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate.Property property62 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate64 = property62.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField65 = property62.getField();
        int int67 = dateTimeField65.get((long) 'u');
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.lang.String str70 = dateTimeField65.getAsText((long) 5, locale69);
        int int71 = property57.getMaximumTextLength(locale69);
        java.util.Calendar.Builder builder72 = builder35.setLocale(locale69);
        java.util.Set<java.lang.Character> charSet73 = locale69.getExtensionKeys();
        java.lang.String str74 = locale27.getDisplayCountry(locale69);
        java.util.Set<java.lang.Character> charSet75 = locale27.getExtensionKeys();
        int int76 = property1.getMaximumShortTextLength(locale27);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FR" + "'", str9, "FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 315532800002L + "'", long23 == 315532800002L);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "weekyear" + "'", str56, "weekyear");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 70 + "'", int67 == 70);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "70" + "'", str70, "70");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(charSet75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.plusSeconds(0);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks(9);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime42.getZone();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45, locale47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.DateTime dateTime51 = dateTime28.withZone(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572621068,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=41,MILLISECOND=68,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+06:00" + "'", str50, "+06:00");
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        java.util.Locale locale2 = new java.util.Locale("4", "centuries");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale3.getScript();
        org.junit.Assert.assertEquals(locale2.toString(), "4_CENTURIES");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "4_CENTURIES");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate16 = localDate4.minusYears(10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = new java.util.Locale("");
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = new java.util.Locale("");
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale20, locale22, locale23, locale24, locale26, locale28, locale29, locale30, locale32, locale34, locale35, locale36, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet44);
        boolean boolean46 = localDate4.equals((java.lang.Object) strList45);
        org.joda.time.LocalDate localDate48 = localDate4.withWeekyear(20);
        int int49 = localDate4.getDayOfYear();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        java.lang.String str53 = property51.getName();
        long long54 = property51.remainder();
        int int55 = property51.getMinimumValue();
        org.joda.time.LocalDate localDate56 = property51.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property51.getFieldType();
        org.joda.time.LocalDate localDate58 = property51.roundHalfEvenCopy();
        java.lang.String str59 = property51.getName();
        org.joda.time.LocalDate localDate60 = property51.roundFloorCopy();
        org.joda.time.LocalDate.Property property61 = localDate60.weekOfWeekyear();
        org.joda.time.LocalDate localDate63 = localDate60.withYear(2011);
        int int64 = localDate4.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = yearMonth66.toInterval(dateTimeZone67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = yearMonth66.getFieldTypes();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.withYear((int) (short) 100);
        org.joda.time.YearMonth yearMonth73 = yearMonth66.plusMonths((int) '#');
        java.lang.String str75 = yearMonth66.toString("2029-02-11");
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DurationField durationField78 = durationFieldType76.getField(chronology77);
        org.joda.time.YearMonth yearMonth80 = yearMonth66.withFieldAdded(durationFieldType76, 48);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = localDate60.compareTo((org.joda.time.ReadablePartial) yearMonth80);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 42 + "'", int49 == 42);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "yearOfCentury" + "'", str53, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3542400000L + "'", long54 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "yearOfCentury" + "'", str59, "yearOfCentury");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2029-02-11" + "'", str75, "2029-02-11");
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(yearMonth80);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("FR");
        java.util.Locale locale3 = new java.util.Locale("");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate.Property property6 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        int int11 = dateTimeField9.get((long) 'u');
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = dateTimeField9.getAsText((long) 5, locale13);
        java.lang.String str15 = locale3.getDisplayVariant(locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime27 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str29 = dateTimeFieldType28.getName();
        org.joda.time.DateTime.Property property30 = dateTime27.property(dateTimeFieldType28);
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.DateTime dateTime34 = property30.setCopy((int) (byte) 10);
        int int35 = dateTime34.getYearOfCentury();
        org.joda.time.DateTime.Property property36 = dateTime34.millisOfDay();
        org.joda.time.DateTime.Property property37 = dateTime34.minuteOfDay();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale38.getDisplayCountry();
        int int40 = property37.getMaximumShortTextLength(locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str42 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet41);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "70" + "'", str14, "70");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyear" + "'", str29, "weekyear");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer6, (long) 64800000);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField31 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField32 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology10.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = dateTimeField33.set(204867179362L, "1978-04-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1978-04-01T00:00:00.000Z\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((-18));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-292275054), 359, 1964, 27, 34858, 58, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate35 = localDate23.minusYears(10);
        boolean boolean36 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 10);
        org.joda.time.Interval interval48 = localDate38.toInterval(dateTimeZone40);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtMidnight(dateTimeZone40);
        java.lang.String str50 = dateTimeZone40.toString();
        long long52 = dateTimeZone40.nextTransition((long) 0);
        long long54 = dateTimeZone40.previousTransition((long) '4');
        org.joda.time.DateTime dateTime55 = localDate35.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        org.joda.time.LocalDate localDate58 = property57.getLocalDate();
        org.joda.time.ReadableInstant readableInstant59 = null;
        int int60 = property57.getDifference(readableInstant59);
        org.joda.time.LocalDate localDate61 = property57.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean65 = dateTimeZone64.isFixed();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone64);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTime dateTime69 = localDate66.toDateTimeAtCurrentTime(dateTimeZone68);
        boolean boolean70 = localDate61.equals((java.lang.Object) dateTime69);
        org.joda.time.DateTime dateTime72 = dateTime69.minusDays(70);
        org.joda.time.DateTime dateTime74 = dateTime69.plus((long) 57);
        org.joda.time.DateTime dateTime75 = localDate35.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusDays(939);
        org.joda.time.DateTime.Property property78 = dateTime77.millisOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+06:00" + "'", str50, "+06:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("chinois (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"chinois (Taiwan)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.roundFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate4.plusDays(56170);
        java.util.Date date13 = new java.util.Date(0, (-34), 25156829, 21597, 32);
        org.joda.time.YearMonth yearMonth14 = org.joda.time.YearMonth.fromDateFields(date13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.withYear(0);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDate7.compareTo((org.joda.time.ReadablePartial) yearMonth16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals(date13.toString(), "Mon Sep 06 21:32:00 UTC 70776");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        boolean boolean23 = dateTime22.isBeforeNow();
        int int24 = dateTime22.getDayOfYear();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.Chronology chronology36 = dateTime34.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.monthOfYear();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime47.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str50 = dateTimeFieldType49.getName();
        org.joda.time.DateTime.Property property51 = dateTime48.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime52 = property51.roundFloorCopy();
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime52.getZone();
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        org.joda.time.Chronology chronology56 = chronology36.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfHalfday();
        int int60 = dateTimeField57.getDifference((long) 822, (long) 0);
        long long62 = dateTimeField57.roundHalfFloor(27710553600042L);
        int int63 = dateTime22.get(dateTimeField57);
        int int65 = dateTimeField57.getLeapAmount((-57154400107844L));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "weekyear" + "'", str50, "weekyear");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 27710553600000L + "'", long62 == 27710553600000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate2.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = property12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime26.toYearMonthDay();
        org.joda.time.DateTime dateTime31 = dateTime26.withYear(479);
        int int32 = dateTime26.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        org.joda.time.DateTime dateTime17 = dateTime13.minusYears(31);
        int int18 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime13.plusDays(21);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(locale6);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth11.toInterval(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonth11.getFieldTypes();
        org.joda.time.YearMonth.Property property15 = yearMonth11.year();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = locale16.stripExtensions();
        int int19 = property15.getMaximumTextLength(locale18);
        java.lang.String str20 = locale6.getDisplayName(locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone5, locale18);
        java.util.Locale locale25 = new java.util.Locale("zho", "1970-01-01T00:00:00.000+06:00", "Chinese");
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone5, locale25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = calendar26.getActualMaximum(120);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FR" + "'", str17, "FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572621468,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=468,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale25.toString(), "zho_1970-01-01T00:00:00.000+06:00_Chinese");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572621468,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=468,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder10 = builder6.setDate(2011, (int) (byte) 1, (int) 'x');
        java.util.Calendar.Builder builder14 = builder10.setDate((int) (byte) -1, (int) ' ', 100);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(52, 360000000, 937, 1980);
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder22 = builder20.setInstant((long) 32770);
        java.util.Calendar calendar23 = builder22.build();
        boolean boolean25 = calendar23.after((java.lang.Object) 70);
        long long26 = calendar23.getTimeInMillis();
        calendar23.setTimeInMillis(0L);
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder31 = builder29.setInstant((long) 32770);
        java.util.Calendar calendar32 = builder31.build();
        java.util.Date date33 = calendar32.getTime();
        java.util.TimeZone timeZone34 = calendar32.getTimeZone();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getCountry();
        java.lang.String str37 = locale35.getDisplayCountry();
        java.util.Locale.setDefault(locale35);
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = yearMonth40.toInterval(dateTimeZone41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = yearMonth40.getFieldTypes();
        org.joda.time.YearMonth.Property property44 = yearMonth40.year();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = locale45.getCountry();
        java.util.Locale locale47 = locale45.stripExtensions();
        int int48 = property44.getMaximumTextLength(locale47);
        java.lang.String str49 = locale35.getDisplayName(locale47);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone34, locale47);
        calendar23.setTimeZone(timeZone34);
        java.util.TimeZone timeZone52 = calendar23.getTimeZone();
        java.util.Calendar.Builder builder53 = builder19.setTimeZone(timeZone52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32770L + "'", long26 == 32770L);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "FR" + "'", str46, "FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "allemand" + "'", str49, "allemand");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572621491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 6);
        long long21 = dateTimeZone14.getMillisKeepLocal(dateTimeZone17, (long) 10);
        org.joda.time.Interval interval22 = localDate12.toInterval(dateTimeZone14);
        int int23 = localDate12.getYear();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate26 = localDate12.withFieldAdded(durationFieldType24, 365);
        org.joda.time.DateTime dateTime28 = dateTime8.withFieldAdded(durationFieldType24, 0);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate.Property property31 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property31.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str34 = property31.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property31.getFieldType();
        org.joda.time.DateTimeField dateTimeField36 = property31.getField();
        org.joda.time.LocalDate localDate37 = property31.roundFloorCopy();
        org.joda.time.LocalDate localDate38 = property31.getLocalDate();
        org.joda.time.LocalDate localDate39 = property31.roundHalfEvenCopy();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        boolean boolean41 = durationFieldType24.isSupported(chronology40);
        org.joda.time.DurationField durationField42 = chronology40.eras();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21600000 + "'", int19 == 21600000);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22" + "'", str34, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        int int15 = property12.getMaximumValueOverall();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property12.getDifference(readableInstant16);
        org.joda.time.DateTime dateTime18 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(1970);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis(63399288);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths(22);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("KR");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property8.getDifference(readableInstant10);
        org.joda.time.LocalDate localDate12 = property8.withMaximumValue();
        java.util.Locale locale15 = new java.util.Locale("70", "hi!");
        int int16 = property8.getMaximumShortTextLength(locale15);
        org.joda.time.LocalDate localDate17 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate.Property property20 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property20.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate23 = property20.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDate23.getFields();
        int int25 = localDate23.getDayOfWeek();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.LocalDate localDate36 = localDate28.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property37 = localDate28.dayOfMonth();
        org.joda.time.LocalDate localDate38 = property37.withMaximumValue();
        org.joda.time.LocalDate localDate39 = property37.roundCeilingCopy();
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfCentury(19);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property52 = dateTime51.year();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime68 = dateTime51.minusDays(32772);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.plus(readableDuration69);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTime68.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone71);
        org.joda.time.Interval interval73 = localDate39.toInterval(dateTimeZone71);
        boolean boolean74 = localDate23.isAfter((org.joda.time.ReadablePartial) localDate39);
        int int75 = localDate17.compareTo((org.joda.time.ReadablePartial) localDate23);
        boolean boolean76 = languageRange1.equals((java.lang.Object) localDate17);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kr" + "'", str4, "kr");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals(locale15.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime11.toGregorianCalendar();
        gregorianCalendar18.set((int) (byte) 0, 32769, 70, (int) (byte) -1, 2);
        boolean boolean25 = gregorianCalendar18.isWeekDateSupported();
        gregorianCalendar18.set(11865377, (int) (short) -1, 8, (int) 'u', 11865377, 19);
        int int33 = gregorianCalendar18.getMinimalDaysInFirstWeek();
        gregorianCalendar18.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = gregorianCalendar18.get(56384);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56384");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        int int15 = property12.getMaximumValueOverall();
        org.joda.time.DateTime dateTime16 = property12.withMinimumValue();
        boolean boolean18 = dateTime16.isEqual((long) 292278994);
        int int19 = dateTime16.getMillisOfSecond();
        org.joda.time.LocalDate localDate20 = dateTime16.toLocalDate();
        org.joda.time.DateTime dateTime21 = localDate20.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant22 = dateTime21.toInstant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        java.util.Date date20 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtMidnight(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateMidnight dateMidnight30 = dateTime28.toDateMidnight();
        java.util.Date date31 = dateMidnight30.toDate();
        boolean boolean32 = date20.before(date31);
        java.time.Instant instant33 = date20.toInstant();
        java.lang.String str34 = date20.toGMTString();
        calendar18.setTime(date20);
        int int36 = calendar18.getWeeksInWeekYear();
        int int38 = calendar18.getMaximum(1);
        java.time.Instant instant39 = calendar18.toInstant();
        int int41 = calendar18.getMaximum(13);
        // The following exception was thrown during execution in test generation
        try {
            calendar18.set(50400000, 34654295);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str29, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str34, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53 + "'", int36 == 53);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278994 + "'", int38 == 292278994);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = yearMonth2.toInterval(dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Interval interval6 = interval4.withPeriodAfterStart(readablePeriod5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = interval6.toPeriod(periodType7);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean18 = period16.isSupported(durationFieldType17);
        int int19 = period8.get(durationFieldType17);
        int int20 = period8.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, 9);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.plusMonths((int) (byte) 0);
        int[] intArray25 = yearMonth22.getValues();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.withYear(56156);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = yearMonth22.getFieldTypes();
        java.lang.String str30 = yearMonth22.toString("days");
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2]");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd");
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        long long6 = calendar3.getTimeInMillis();
        calendar3.setTimeInMillis(0L);
        boolean boolean9 = calendar3.isWeekDateSupported();
        java.lang.String str10 = calendar3.getCalendarType();
        calendar3.setMinimalDaysInFirstWeek(37);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=37,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32770L + "'", long6 == 32770L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property16.getDifference(readableInstant18);
        org.joda.time.LocalDate localDate20 = property16.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        boolean boolean29 = localDate20.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTime();
        boolean boolean33 = mutableInterval14.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime31.millisOfSecond();
        org.joda.time.DateTime dateTime35 = property34.roundHalfEvenCopy();
        int int36 = dateTime35.getSecondOfDay();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis(939);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        boolean boolean23 = dateTime22.isBeforeNow();
        int int24 = dateTime22.getDayOfYear();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property26 = dateTime13.centuryOfEra();
        int int27 = dateTime13.getEra();
        org.joda.time.DateTime.Property property28 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime29 = property28.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology11);
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.millisOfSecond();
        long long24 = dateTimeField21.set((-1325289599999L), 70);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1325289599930L) + "'", long24 == (-1325289599930L));
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        org.joda.time.LocalDate.Property property7 = localDate6.year();
        java.lang.Object obj8 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 32772);
        org.joda.time.DateTime dateTime20 = dateTime18.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime22 = dateTime18.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(obj8, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology23.minutes();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology23);
        long long28 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getDayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-11L) + "'", long28 == (-11L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property9.getDifference(readableInstant11);
        org.joda.time.LocalDate localDate13 = property9.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        boolean boolean22 = localDate13.equals((java.lang.Object) dateTime21);
        java.util.Date date23 = localDate13.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        boolean boolean26 = localDate13.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localDate31.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.LocalDate localDate43 = localDate31.minusYears(10);
        boolean boolean44 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate47 = localDate43.withFieldAdded(durationFieldType45, 70);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTime();
        org.joda.time.Chronology chronology58 = dateTime56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.monthOfYear();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property62.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = localDate63.toDateTimeAtStartOfDay(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str72 = dateTimeFieldType71.getName();
        org.joda.time.DateTime.Property property73 = dateTime70.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = property73.roundFloorCopy();
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime74.getZone();
        java.util.TimeZone timeZone77 = dateTimeZone76.toTimeZone();
        org.joda.time.Chronology chronology78 = chronology58.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfHalfday();
        org.joda.time.DurationField durationField80 = chronology78.seconds();
        boolean boolean81 = durationFieldType45.isSupported(chronology78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter6.withChronology(chronology78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter82.withPivotYear((java.lang.Integer) 23);
        java.lang.Integer int85 = dateTimeFormatter82.getPivotYear();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyear" + "'", str72, "weekyear");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNull(int85);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.YearMonth yearMonth10 = yearMonth6.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = yearMonth10.withChronologyRetainFields(chronology11);
        int int13 = yearMonth1.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth12.minus(readablePeriod14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = yearMonth12.toDateTime(readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        long long20 = mutableDateTime19.getMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1779378005L) + "'", long20 == (-1779378005L));
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("de", strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale22 = new java.util.Locale("");
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = new java.util.Locale("");
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getCountry();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale16, locale18, locale19, locale20, locale22, locale24, locale25, locale26, locale28, locale30, locale31, locale32, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale locale38 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = property43.getDifference(readableInstant45);
        org.joda.time.LocalDate localDate47 = property43.withMaximumValue();
        java.util.Locale locale50 = new java.util.Locale("70", "hi!");
        int int51 = property43.getMaximumShortTextLength(locale50);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = locale52.getCountry();
        java.util.Locale locale54 = locale52.stripExtensions();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar.Builder builder56 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder58 = builder56.setInstant((long) 32770);
        java.util.Calendar calendar59 = builder56.build();
        java.util.Date date61 = new java.util.Date((long) 10);
        java.util.Calendar.Builder builder62 = builder56.setInstant(date61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property64 = localDate63.yearOfCentury();
        org.joda.time.LocalDate.Property property65 = localDate63.yearOfCentury();
        org.joda.time.LocalDate localDate67 = property65.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate68 = property65.roundHalfCeilingCopy();
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale69);
        int int71 = property65.getMaximumShortTextLength(locale69);
        java.util.Calendar.Builder builder72 = builder62.setLocale(locale69);
        java.util.Locale locale73 = java.util.Locale.JAPAN;
        java.util.Locale locale77 = new java.util.Locale("hi!", "2022-02-11", "2022-02-11");
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale50, locale54, locale55, locale69, locale73, locale77 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale locale82 = java.util.Locale.lookup(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale.LanguageRange languageRange85 = new java.util.Locale.LanguageRange("KR");
        java.util.Locale.LanguageRange[] languageRangeArray86 = new java.util.Locale.LanguageRange[] { languageRange85 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList87 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList87, languageRangeArray86);
        java.util.Locale locale89 = java.util.Locale.GERMAN;
        java.lang.String str90 = locale89.getCountry();
        java.lang.String str91 = locale89.getDisplayCountry();
        java.util.Set<java.lang.String> strSet92 = locale89.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList87, (java.util.Collection<java.lang.String>) strSet92);
        java.util.Set<java.lang.String> strSet94 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList87, (java.util.Collection<java.lang.String>) strSet94, filteringMode95);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList83, filteringMode95);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FR" + "'", str17, "FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertEquals(locale50.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FR" + "'", str53, "FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale77.toString(), "hi!_2022-02-11_2022-02-11");
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNull(locale82);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(languageRangeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode95.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(localeList97);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(8);
        org.joda.time.DateTime dateTime20 = dateTime16.withMinuteOfHour(16);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        org.joda.time.DateTime dateTime23 = property21.setCopy(12);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        long long25 = dateTime23.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-2582988L) + "'", long25 == (-2582988L));
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Date date5 = new java.util.Date((long) 10);
        java.util.Calendar.Builder builder6 = builder0.setInstant(date5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate12 = property9.roundHalfCeilingCopy();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale13);
        int int15 = property9.getMaximumShortTextLength(locale13);
        java.util.Calendar.Builder builder16 = builder6.setLocale(locale13);
        java.util.Calendar.Builder builder20 = builder16.setWeekDate((int) (short) 0, 39, 21597772);
        java.util.Calendar.Builder builder25 = builder16.setTimeOfDay(292278993, 0, 13, 1969);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar26 = builder16.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 21597772");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str13 = dateTimeFieldType12.getName();
        org.joda.time.DateTime.Property property14 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        long long19 = dateTimeField16.add((long) (byte) 10, (-1));
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        int int23 = localDate22.getWeekyear();
        java.lang.String str24 = localDate22.toString();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTime dateTime26 = localDate22.toDateTime(localTime25);
        java.util.Locale locale29 = new java.util.Locale("");
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate.Property property32 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property32.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField35 = property32.getField();
        int int37 = dateTimeField35.get((long) 'u');
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = dateTimeField35.getAsText((long) 5, locale39);
        java.lang.String str41 = locale29.getDisplayVariant(locale39);
        java.lang.String str42 = locale39.getDisplayLanguage();
        java.lang.String str43 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDate22, (int) (byte) 100, locale39);
        java.lang.String str44 = locale1.getDisplayLanguage(locale39);
        java.lang.String str45 = locale0.getDisplayScript(locale1);
        java.util.Locale locale47 = new java.util.Locale("");
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate.Property property50 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property50.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField53 = property50.getField();
        int int55 = dateTimeField53.get((long) 'u');
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.lang.String str58 = dateTimeField53.getAsText((long) 5, locale57);
        java.lang.String str59 = locale47.getDisplayVariant(locale57);
        java.lang.String str60 = locale57.getDisplayCountry();
        java.lang.String str61 = locale57.getDisplayScript();
        java.util.Set<java.lang.String> strSet62 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str63 = locale0.getDisplayName(locale57);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weekyear" + "'", str13, "weekyear");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-31449599990L) + "'", long19 == (-31449599990L));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11" + "'", str24, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 70 + "'", int37 == 70);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "70" + "'", str40, "70");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese" + "'", str42, "Chinese");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 70 + "'", int55 == 70);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "70" + "'", str58, "70");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Taiwan" + "'", str60, "Taiwan");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str63, "\u7fa9\u5927\u5229\u6587");
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str31 = dateTimeFieldType30.getName();
        org.joda.time.DateTime.Property property32 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = property32.roundFloorCopy();
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime33.getZone();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology37 = chronology15.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfSecond();
        org.joda.time.DurationField durationField39 = chronology37.millis();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.minuteOfDay();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.LocalDate.Property property42 = localDate41.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        long long6 = property2.remainder();
        org.joda.time.LocalDate localDate7 = property2.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(8, 0);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtMidnight(dateTimeZone10);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3542400000L + "'", long6 == 3542400000L);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfFloorCopy();
        int int7 = property1.getLeapAmount();
        java.lang.String str8 = property1.getAsString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22" + "'", str8, "22");
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        int int10 = localDate4.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate4.withYearOfCentury(1284);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1284 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfHour();
        long long14 = dateTimeField12.roundHalfFloor(24332133632770L);
        org.joda.time.DurationField durationField15 = dateTimeField12.getRangeDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 24332133660000L + "'", long14 == 24332133660000L);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = yearMonth28.getFields();
        java.lang.String str31 = yearMonth28.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = yearMonth28.getFields();
        org.joda.time.YearMonth yearMonth34 = yearMonth28.minusMonths(35005);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01" + "'", str31, "1970-01");
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(yearMonth34);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        java.lang.String str10 = yearMonth9.toString();
        int[] intArray11 = yearMonth9.getValues();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-01" + "'", str10, "2022-01");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 1]");
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        long long15 = chronology10.add(536457600013L, (long) 2099, (int) (short) 1);
        org.joda.time.DurationField durationField16 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.centuryOfEra();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property22.getDifference(readableInstant24);
        org.joda.time.LocalDate localDate26 = property22.withMaximumValue();
        int int27 = property22.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale31 = new java.util.Locale("yearOfCentury");
        boolean boolean32 = dateTimeZone29.equals((java.lang.Object) locale31);
        java.lang.String str33 = property22.getAsShortText(locale31);
        java.lang.String str34 = dateTimeField19.getAsShortText(34713, locale31);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 536457602112L + "'", long15 == 536457602112L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 99 + "'", int27 == 99);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals(locale31.toString(), "yearofcentury");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22" + "'", str33, "22");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "34713" + "'", str34, "34713");
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = localDate11.toDateTimeAtMidnight(dateTimeZone17);
        long long23 = dateTimeZone5.getMillisKeepLocal(dateTimeZone17, (long) 9);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.DateTime dateTime25 = localDate3.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.LocalDate localDate27 = localDate3.withDayOfWeek(1);
        org.joda.time.LocalDate localDate29 = localDate27.minusYears((-1));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DurationField durationField32 = chronology30.years();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.monthOfYear();
        int int34 = dateTimeField33.getMaximumValue();
        boolean boolean35 = dateTimeField33.isLenient();
        long long37 = dateTimeField33.roundCeiling(3542400000L);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = yearMonth39.toInterval(dateTimeZone40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth39.getFieldTypes();
        org.joda.time.YearMonth.Property property43 = yearMonth39.year();
        int int44 = property43.getMinimumValue();
        java.lang.String str45 = property43.getName();
        java.lang.String str46 = property43.getName();
        org.joda.time.YearMonth yearMonth48 = property43.addWrapFieldToCopy(28);
        int int49 = yearMonth48.size();
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = yearMonth52.toInterval(dateTimeZone53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = yearMonth52.getFieldTypes();
        org.joda.time.YearMonth.Property property56 = yearMonth52.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = yearMonth52.toString(dateTimeFormatter57);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Interval interval62 = yearMonth60.toInterval(dateTimeZone61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = yearMonth60.getFieldTypes();
        org.joda.time.YearMonth.Property property64 = yearMonth60.year();
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.Interval interval70 = yearMonth68.toInterval(dateTimeZone69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval70.withPeriodAfterStart(readablePeriod71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval72.toPeriod(periodType73);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean76 = period74.isSupported(durationFieldType75);
        org.joda.time.YearMonth yearMonth78 = yearMonth66.withPeriodAdded((org.joda.time.ReadablePeriod) period74, 32770);
        org.joda.time.YearMonth yearMonth79 = yearMonth60.minus((org.joda.time.ReadablePeriod) period74);
        boolean boolean80 = yearMonth52.isAfter((org.joda.time.ReadablePartial) yearMonth79);
        org.joda.time.Chronology chronology81 = yearMonth79.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.clockhourOfDay();
        org.joda.time.DurationField durationField83 = chronology81.weeks();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField86 = chronology81.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField87 = chronology81.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField87.getType();
        java.util.Locale locale90 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale91 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale91);
        java.lang.String str93 = locale90.getDisplayLanguage(locale91);
        java.lang.String str94 = dateTimeField87.getAsText((-31536000000L), locale91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) yearMonth48, 56362, locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56362");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5097600000L + "'", long37 == 5097600000L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-292275054) + "'", int44 == (-292275054));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "year" + "'", str45, "year");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "year" + "'", str46, "year");
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01" + "'", str58, "1970-01");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Chinese" + "'", str93, "Chinese");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1" + "'", str94, "1");
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime11.minuteOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str36 = dateTimeFieldType35.getName();
        org.joda.time.DateTime.Property property37 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime39 = dateTime11.withField(dateTimeFieldType35, 1978);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfDay();
        int int41 = dateTime39.getSecondOfDay();
        org.joda.time.DateTime.Property property42 = dateTime39.dayOfYear();
        boolean boolean43 = dateTime39.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weekyear" + "'", str36, "weekyear");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime12 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate2.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(42);
        org.joda.time.Instant instant17 = dateTime14.toInstant();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime27 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str29 = dateTimeFieldType28.getName();
        org.joda.time.DateTime.Property property30 = dateTime27.property(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = property30.roundFloorCopy();
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime31.getZone();
        org.joda.time.DateTime dateTime35 = dateTime31.plusMonths(21597);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.LocalDate localDate46 = localDate38.plusMonths((int) (short) 1);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.LocalDate localDate57 = localDate49.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property58 = localDate49.dayOfMonth();
        int int59 = localDate49.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean61 = localDate49.isSupported(dateTimeFieldType60);
        boolean boolean62 = localDate38.isSupported(dateTimeFieldType60);
        boolean boolean63 = dateTime35.isSupported(dateTimeFieldType60);
        java.lang.String str64 = dateTimeFieldType60.toString();
        org.joda.time.DateTime dateTime66 = dateTime14.withField(dateTimeFieldType60, 56369);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyear" + "'", str29, "weekyear");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "yearOfEra" + "'", str64, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime.Property property18 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime21 = property18.setCopy(1);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate28 = localDate24.minusYears(11);
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        boolean boolean34 = localDate28.isSupported(dateTimeFieldType32);
        int int35 = dateTime21.get(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T15:43:42.701+06:00" + "'", str17, "2022-02-11T15:43:42.701+06:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        int int18 = dateTime16.getYear();
        org.joda.time.DateTime.Property property19 = dateTime16.weekOfWeekyear();
        boolean boolean21 = dateTime16.isAfter((long) (-7));
        org.joda.time.DateTime.Property property22 = dateTime16.dayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2099 + "'", int18 == 2099);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.minuteOfHour();
        org.joda.time.DurationField durationField39 = chronology33.months();
        org.joda.time.DurationField durationField40 = chronology33.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology33.dayOfYear();
        int int44 = dateTimeField41.getDifference((-1886400000L), 625L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-21) + "'", int44 == (-21));
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth11.toInterval(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Interval interval15 = interval13.withPeriodAfterStart(readablePeriod14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = interval15.toPeriod(periodType16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean19 = period17.isSupported(durationFieldType18);
        org.joda.time.YearMonth yearMonth21 = yearMonth9.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 32770);
        org.joda.time.YearMonth.Property property22 = yearMonth9.monthOfYear();
        org.joda.time.YearMonth yearMonth24 = yearMonth9.plusYears(0);
        int int25 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.DateTimeField dateTimeField26 = property5.getField();
        java.util.Calendar.Builder builder27 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder29 = builder27.setInstant((long) 32770);
        java.util.Calendar calendar30 = builder29.build();
        java.util.Date date31 = calendar30.getTime();
        java.util.TimeZone timeZone32 = calendar30.getTimeZone();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getCountry();
        java.lang.String str35 = locale33.getDisplayCountry();
        java.util.Locale.setDefault(locale33);
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = yearMonth38.toInterval(dateTimeZone39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = yearMonth38.getFieldTypes();
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = locale43.stripExtensions();
        int int46 = property42.getMaximumTextLength(locale45);
        java.lang.String str47 = locale33.getDisplayName(locale45);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone32, locale45);
        int int49 = property5.getMaximumTextLength(locale45);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "FR" + "'", str44, "FR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "allemand" + "'", str47, "allemand");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572622785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=42,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        int int11 = dateTime7.getMinuteOfHour();
        int int12 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime7.minusHours((-52));
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 3, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.DateMidnight dateMidnight8 = localDate7.toDateMidnight();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate.Property property11 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property11.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        int int16 = dateTimeField14.get((long) 'u');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        int int20 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDate19);
        boolean boolean21 = localDate7.isAfter((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime30.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property32 = dateTime31.year();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.getName();
        org.joda.time.DateTime.Property property45 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime48 = dateTime31.minusDays(32772);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime48.getZone();
        org.joda.time.DateMidnight dateMidnight52 = localDate19.toDateMidnight(dateTimeZone51);
        int int54 = dateTimeZone51.getStandardOffset((-31532022429L));
        org.joda.time.DateTime dateTime55 = localDate5.toDateTimeAtMidnight(dateTimeZone51);
        java.lang.String str57 = dateTimeZone51.getName(204867179362L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 21600000 + "'", int54 == 21600000);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+06:00" + "'", str57, "+06:00");
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        long long19 = dateTimeField14.roundHalfEven(100L);
        boolean boolean21 = dateTimeField14.isLeap(120L);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        int int25 = localDate24.getWeekyear();
        int int26 = localDate24.getWeekyear();
        int int27 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        long long29 = dateTimeField14.roundHalfCeiling((-360L));
        long long32 = dateTimeField14.getDifferenceAsLong(763200000L, (long) 28800);
        long long35 = dateTimeField14.set(31536000000L, 21597);
        org.joda.time.DurationField durationField36 = dateTimeField14.getLeapDurationField();
        java.lang.String str37 = dateTimeField14.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-280800000L) + "'", long19 == (-280800000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-280800000L) + "'", long29 == (-280800000L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 619399353600000L + "'", long35 == 619399353600000L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DateTimeField[weekyear]" + "'", str37, "DateTimeField[weekyear]");
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        int int34 = dateTimeField32.get((long) 'u');
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = dateTimeField32.getAsText((long) 5, locale36);
        int int38 = property24.getMaximumTextLength(locale36);
        java.util.Calendar.Builder builder39 = builder2.setLocale(locale36);
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 32770);
        java.util.Calendar calendar43 = builder42.build();
        boolean boolean45 = calendar43.after((java.lang.Object) 70);
        calendar43.set(10, 32772, (int) (byte) 1, 22, 0);
        long long52 = calendar43.getTimeInMillis();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime66.getZone();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        calendar43.setTimeZone(timeZone69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.Calendar.Builder builder74 = builder39.setTimeZone(timeZone69);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        long long79 = dateTimeZone75.convertLocalToUTC((long) 365, false, (-21599064L));
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(dateTimeZone75);
        long long84 = dateTimeZone75.convertLocalToUTC((long) 829749, true, (long) 22596);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24332133632770L + "'", long52 == 24332133632770L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr" + "'", str72, "fr");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572622895,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=42,MILLISECOND=895,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-21599635L) + "'", long79 == (-21599635L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-20770251L) + "'", long84 == (-20770251L));
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        java.lang.String str8 = property5.getName();
        org.joda.time.YearMonth yearMonth10 = property5.addWrapFieldToCopy(52);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears(56210);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property15.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        int int20 = dateTimeField18.get((long) 'u');
        long long23 = dateTimeField18.addWrapField((long) (short) -1, 1);
        org.joda.time.DurationField durationField24 = dateTimeField18.getDurationField();
        long long26 = dateTimeField18.roundHalfFloor((long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField18.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth29 = yearMonth10.withField(dateTimeFieldType27, 64800000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "year" + "'", str8, "year");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31535999999L + "'", long23 == 31535999999L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.util.Calendar calendar11 = dateTime8.toCalendar(locale9);
        boolean boolean12 = dateTime8.isEqualNow();
        int int13 = dateTime8.getWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime8.withYear(3891223);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.era();
        int int22 = dateTime8.get(dateTimeField21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, 2);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone25.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = dateTime8.withZoneRetainFields(dateTimeZone25);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillis((long) 32772);
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.withDurationAdded(readableDuration29, 292278994);
        java.util.Date date32 = dateTime26.toDate();
        int int33 = dateTime26.getMillisOfDay();
        org.joda.time.DateTime.Property property34 = dateTime26.yearOfCentury();
        int int35 = property14.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = dateTime26.withDurationAdded(readableDuration36, 86397);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime38.withDayOfMonth(107);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 107 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21597772 + "'", int33 == 21597772);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int7 = dateTimeZone5.getOffsetFromLocal((long) 6);
        long long9 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        org.joda.time.Interval interval10 = localDate0.toInterval(dateTimeZone2);
        int int11 = localDate0.getYear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate14 = localDate0.withFieldAdded(durationFieldType12, 365);
        org.joda.time.LocalDate localDate16 = localDate14.minusDays(292278993);
        org.joda.time.LocalDate localDate18 = localDate14.withYear(56505);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21600000 + "'", int7 == 21600000);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str3 = dateTimeZone1.getName(2656800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(10, 1970);
        java.util.Calendar calendar4 = builder3.build();
        boolean boolean5 = calendar4.isWeekDateSupported();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=7092000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=83,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtMidnight(dateTimeZone12);
        int int14 = dateTime13.getMonthOfYear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        boolean boolean27 = dateTime26.isBeforeNow();
        int int28 = dateTime26.getDayOfYear();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean30 = interval5.contains((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Period period31 = interval29.toPeriod();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTime();
        org.joda.time.Chronology chronology43 = dateTime41.getChronology();
        boolean boolean44 = dateTimeFieldType32.isSupported(chronology43);
        org.joda.time.Chronology chronology45 = chronology43.withUTC();
        org.joda.time.Interval interval46 = interval29.withChronology(chronology45);
        boolean boolean47 = interval29.containsNow();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = interval51.withChronology(chronology52);
        boolean boolean55 = interval51.isAfter(10L);
        boolean boolean57 = interval51.isAfter(24332133632770L);
        long long58 = interval51.getStartMillis();
        org.joda.time.Duration duration59 = interval51.toDuration();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate62 = property61.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDate62.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str71 = dateTimeFieldType70.getName();
        org.joda.time.DateTime.Property property72 = dateTime69.property(dateTimeFieldType70);
        org.joda.time.Interval interval73 = property72.toInterval();
        org.joda.time.DateTimeField dateTimeField74 = property72.getField();
        org.joda.time.DateTime dateTime76 = property72.addToCopy(5);
        org.joda.time.DateTime dateTime78 = dateTime76.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Interval interval84 = interval82.withChronology(chronology83);
        org.joda.time.Duration duration85 = interval82.toDuration();
        org.joda.time.DateTime dateTime86 = dateTime76.minus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Interval interval87 = interval51.withDurationAfterStart((org.joda.time.ReadableDuration) duration85);
        boolean boolean88 = interval29.contains((org.joda.time.ReadableInterval) interval51);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 42 + "'", int28 == 42);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "weekyear" + "'", str71, "weekyear");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        int int17 = dateTimeField14.get(0L);
        java.lang.String str18 = dateTimeField14.toString();
        int int19 = dateTimeField14.getMinimumValue();
        boolean boolean21 = dateTimeField14.isLeap(9223371988855200000L);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property23.getDifference(readableInstant25);
        org.joda.time.LocalDate localDate27 = property23.withMaximumValue();
        java.util.Locale locale30 = new java.util.Locale("70", "hi!");
        int int31 = property23.getMaximumShortTextLength(locale30);
        org.joda.time.LocalDate localDate32 = property23.withMaximumValue();
        org.joda.time.LocalDate localDate33 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property23.getFieldType();
        org.joda.time.LocalDate localDate35 = property23.roundHalfFloorCopy();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.years();
        boolean boolean37 = localDate35.isSupported(durationFieldType36);
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = yearMonth40.toInterval(dateTimeZone41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = yearMonth40.getFieldTypes();
        org.joda.time.YearMonth.Property property44 = yearMonth40.year();
        java.lang.String str45 = property44.toString();
        org.joda.time.YearMonth yearMonth47 = property44.addToCopy((int) (byte) 10);
        int int48 = property44.getMinimumValue();
        java.lang.String str49 = property44.getName();
        org.joda.time.YearMonth yearMonth50 = property44.getYearMonth();
        int[] intArray51 = yearMonth50.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = dateTimeField14.add((org.joda.time.ReadablePartial) localDate35, 562, intArray51, 56297158);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 562");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[weekyear]" + "'", str18, "DateTimeField[weekyear]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals(locale30.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[year]" + "'", str45, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-292275054) + "'", int48 == (-292275054));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "year" + "'", str49, "year");
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1]");
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        boolean boolean23 = dateTime22.isBeforeNow();
        int int24 = dateTime22.getDayOfYear();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property26 = dateTime13.centuryOfEra();
        long long27 = property26.remainder();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        long long30 = dateTimeField28.remainder((long) 11);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 729129600000L + "'", long27 == 729129600000L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 21600011L + "'", long30 == 21600011L);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.LocalDate localDate17 = property15.withMinimumValue();
        java.util.Date date18 = localDate17.toDate();
        int int19 = date18.getSeconds();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 00:00:00 UTC 1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfWeek();
        org.joda.time.LocalDate localDate12 = property11.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = localDate12.getField(23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 23");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(2022, 86397772, 7);
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(360240000, 2741, 98);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder13 = builder11.setInstant((long) 32770);
        java.util.Calendar calendar14 = builder13.build();
        boolean boolean16 = calendar14.after((java.lang.Object) 70);
        calendar14.set(10, 32772, (int) (byte) 1, 22, 0);
        long long23 = calendar14.getTimeInMillis();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str35 = dateTimeFieldType34.getName();
        org.joda.time.DateTime.Property property36 = dateTime33.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = property36.roundFloorCopy();
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime37.getZone();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        calendar14.setTimeZone(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.util.Calendar.Builder builder45 = builder6.setTimeZone(timeZone40);
        java.util.Calendar.Builder builder50 = builder6.setTimeOfDay((-1853), 86397772, (-113952), 6638);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24332133632770L + "'", long23 == 24332133632770L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weekyear" + "'", str35, "weekyear");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644572623338,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=43,MILLISECOND=338,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        int int34 = dateTimeField32.get((long) 'u');
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = dateTimeField32.getAsText((long) 5, locale36);
        int int38 = property24.getMaximumTextLength(locale36);
        java.util.Calendar.Builder builder39 = builder2.setLocale(locale36);
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 32770);
        java.util.Calendar calendar43 = builder42.build();
        boolean boolean45 = calendar43.after((java.lang.Object) 70);
        calendar43.set(10, 32772, (int) (byte) 1, 22, 0);
        long long52 = calendar43.getTimeInMillis();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime66.getZone();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        calendar43.setTimeZone(timeZone69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.Calendar.Builder builder74 = builder39.setTimeZone(timeZone69);
        java.util.Calendar.Builder builder78 = builder39.setTimeOfDay(935, (int) (byte) -1, 34628);
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar.Builder builder80 = builder78.setLocale(locale79);
        java.lang.String str82 = locale79.getExtension('a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24332133632770L + "'", long52 == 24332133632770L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr" + "'", str72, "fr");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572623366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=43,MILLISECOND=366,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        java.lang.String str18 = property5.getAsText();
        java.lang.String str19 = property5.getName();
        java.lang.String str20 = property5.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "year" + "'", str19, "year");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale33.getVariant();
        java.util.Calendar calendar35 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillis((long) 32772);
        org.joda.time.DateTime dateTime47 = dateTime45.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = interval53.withChronology(chronology54);
        org.joda.time.Duration duration56 = interval53.toDuration();
        org.joda.time.DateTime dateTime57 = dateTime49.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration56);
        boolean boolean59 = interval23.abuts((org.joda.time.ReadableInterval) interval58);
        long long60 = interval58.getStartMillis();
        org.joda.time.Interval interval62 = interval58.withStartMillis(345600000L);
        boolean boolean64 = interval62.isBefore(11L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644516000000L + "'", long60 == 1644516000000L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getMonthOfYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        boolean boolean45 = dateTime44.isBeforeNow();
        int int46 = dateTime44.getDayOfYear();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTime dateTime56 = localDate53.toDateTimeAtMidnight(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateMidnight dateMidnight58 = dateTime56.toDateMidnight();
        java.util.Date date59 = dateMidnight58.toDate();
        date59.setDate((int) (short) 10);
        long long62 = date59.getTime();
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.fromDateFields(date59);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateTime dateTime71 = localDate68.toDateTimeAtMidnight(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateMidnight dateMidnight73 = dateTime71.toDateMidnight();
        java.util.Date date74 = dateMidnight73.toDate();
        date74.setDate((int) (short) 10);
        boolean boolean77 = date59.before(date74);
        org.joda.time.LocalDate localDate78 = org.joda.time.LocalDate.fromDateFields(date74);
        org.joda.time.DateTime dateTime79 = dateTime20.withFields((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean82 = dateTimeZone81.isFixed();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int86 = dateTimeZone84.getOffsetFromLocal((long) 6);
        long long88 = dateTimeZone81.getMillisKeepLocal(dateTimeZone84, (long) 10);
        long long90 = dateTimeZone84.nextTransition((long) 'u');
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) dateTime79, dateTimeZone84);
        org.joda.time.DateTime.Property property92 = dateTime79.hourOfDay();
        org.joda.time.DateTime dateTime94 = dateTime79.minusMonths(56522945);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 42 + "'", int46 == 42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str57, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1836000000L) + "'", long62 == (-1836000000L));
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str72, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 21600000 + "'", int86 == 21600000);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10L + "'", long88 == 10L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 117L + "'", long90 == 117L);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate5 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = localDate5.getFields();
        boolean boolean8 = localDate5.equals((java.lang.Object) 34532134L);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        boolean boolean10 = localDate5.isSupported(durationFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTime();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str36 = dateTimeFieldType35.getName();
        org.joda.time.DateTime.Property property37 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime38 = property37.roundFloorCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime38.getZone();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.Chronology chronology42 = chronology22.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField43 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType11.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField45 = chronology22.weekyear();
        org.joda.time.Chronology chronology46 = chronology22.withUTC();
        org.joda.time.DurationField durationField47 = durationFieldType9.getField(chronology46);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weekyear" + "'", str36, "weekyear");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        long long6 = java.util.Date.UTC(68520000, 35005, (int) 'a', 355, (-34), 2848);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2162372205986008000L + "'", long6 == 2162372205986008000L);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        long long18 = dateTimeField16.roundFloor(2524202344759000L);
        long long20 = dateTimeField16.roundHalfCeiling(2656767228L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2524202330400000L + "'", long18 == 2524202330400000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2656800000L + "'", long20 == 2656800000L);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        int int10 = localDate4.getYearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        java.util.Locale locale15 = dateTimeFormatter13.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology18 = dateTimeFormatter13.getChronolgy();
        java.lang.Integer int19 = dateTimeFormatter13.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int23 = dateTimeZone21.getOffset((long) 2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter13.withZone(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = localDate4.toDateTimeAtCurrentTime(dateTimeZone21);
        boolean boolean27 = dateTime25.isAfter((-1889963999000L));
        int int28 = dateTime25.getYear();
        org.joda.time.DateTime.Property property29 = dateTime25.minuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21600000 + "'", int23 == 21600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 117 + "'", int28 == 117);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(1970L);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = yearMonth3.toInterval(dateTimeZone4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property7 = yearMonth3.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = yearMonth3.toString(dateTimeFormatter8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth11.toInterval(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonth11.getFieldTypes();
        org.joda.time.YearMonth.Property property15 = yearMonth11.year();
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodAfterStart(readablePeriod22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.YearMonth yearMonth29 = yearMonth17.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 32770);
        org.joda.time.YearMonth yearMonth30 = yearMonth11.minus((org.joda.time.ReadablePeriod) period25);
        boolean boolean31 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonth33.toInterval(dateTimeZone34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = yearMonth33.getFieldTypes();
        org.joda.time.YearMonth.Property property37 = yearMonth33.year();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = locale38.getCountry();
        int int40 = property37.getMaximumShortTextLength(locale38);
        int int41 = property37.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth44.toInterval(dateTimeZone45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = yearMonth44.getFieldTypes();
        org.joda.time.YearMonth.Property property48 = yearMonth44.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = yearMonth44.toString(dateTimeFormatter49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = yearMonth52.toInterval(dateTimeZone53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = yearMonth52.getFieldTypes();
        org.joda.time.YearMonth.Property property56 = yearMonth52.year();
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Interval interval62 = yearMonth60.toInterval(dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Interval interval64 = interval62.withPeriodAfterStart(readablePeriod63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = interval64.toPeriod(periodType65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean68 = period66.isSupported(durationFieldType67);
        org.joda.time.YearMonth yearMonth70 = yearMonth58.withPeriodAdded((org.joda.time.ReadablePeriod) period66, 32770);
        org.joda.time.YearMonth yearMonth71 = yearMonth52.minus((org.joda.time.ReadablePeriod) period66);
        boolean boolean72 = yearMonth44.isAfter((org.joda.time.ReadablePartial) yearMonth71);
        org.joda.time.Chronology chronology73 = yearMonth71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.monthOfYear();
        org.joda.time.DurationField durationField76 = chronology73.hours();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.yearOfEra();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType42.getField(chronology73);
        org.joda.time.YearMonth.Property property79 = yearMonth3.property(dateTimeFieldType42);
        org.joda.time.YearMonth yearMonth81 = yearMonth1.withField(dateTimeFieldType42, 9);
        java.lang.String str82 = yearMonth81.toString();
        java.util.TimeZone timeZone83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        java.lang.String str86 = dateTimeZone84.getName(10L);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone84);
        org.joda.time.Interval interval88 = yearMonth81.toInterval(dateTimeZone84);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01" + "'", str9, "1970-01");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FR" + "'", str39, "FR");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-292275054) + "'", int41 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01" + "'", str50, "1970-01");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0009-01" + "'", str82, "0009-01");
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+06:00" + "'", str86, "+06:00");
        org.junit.Assert.assertNotNull(interval88);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear(365);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTimeFormatter9.parseDateTime("2022-04-09T15:41:30.360+06:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays((int) 'u');
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        org.joda.time.LocalDate.Property property10 = localDate8.yearOfEra();
        java.util.Date date11 = localDate8.toDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Sep 06 00:00:00 UTC 2021");
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.withHourOfDay(15);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(13);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime(dateTimeZone28);
        int int30 = dateTime26.getWeekOfWeekyear();
        int int31 = dateTime26.getYearOfEra();
        int int32 = dateTime26.getYearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtMidnight(dateTimeZone13);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, (long) 9);
        long long21 = dateTimeZone13.previousTransition(52L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        java.util.Locale locale3 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale locale6 = new java.util.Locale("");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        int int14 = dateTimeField12.get((long) 'u');
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = dateTimeField12.getAsText((long) 5, locale16);
        java.lang.String str18 = locale6.getDisplayVariant(locale16);
        java.lang.String str19 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale3.getDisplayName(locale16);
        java.lang.String str21 = locale3.getScript();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale23);
        java.lang.String str25 = locale22.getDisplayLanguage(locale23);
        java.util.Set<java.lang.Character> charSet26 = locale22.getExtensionKeys();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale27.getCountry();
        java.lang.String str29 = locale22.getDisplayScript(locale27);
        java.util.Set<java.lang.String> strSet30 = locale22.getUnicodeLocaleKeys();
        java.lang.String str31 = locale3.getDisplayName(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = locale22.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12" + "'", str4, "1969-12");
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "70" + "'", str17, "70");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinesisch" + "'", str19, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekofweekyear (1969-12)" + "'", str20, "weekofweekyear (1969-12)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese" + "'", str25, "Chinese");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "KR" + "'", str28, "KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekofweekyear (1969-12)" + "'", str31, "weekofweekyear (1969-12)");
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getMonthOfYear();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 15, dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        int int17 = property15.getMaximumShortTextLength(locale16);
        org.joda.time.DateTime dateTime19 = property15.addToCopy(21600010);
        org.joda.time.DateTime dateTime21 = dateTime19.minusHours(79);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(56489, 9221, 34334, (-292275054), 2741, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        int int10 = localDate4.getYearOfCentury();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate.Property property13 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property13.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        long long19 = dateTimeField16.addWrapField((long) 2, (int) (byte) 10);
        int int21 = dateTimeField16.getMaximumValue((long) (-1));
        long long23 = dateTimeField16.roundCeiling(52L);
        boolean boolean24 = localDate4.equals((java.lang.Object) 52L);
        org.joda.time.LocalDate.Property property25 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = localDate4.withWeekyear(122);
        int int28 = localDate27.getWeekyear();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.LocalDate localDate39 = localDate31.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property40 = localDate31.dayOfMonth();
        org.joda.time.LocalDate.Property property41 = localDate31.weekyear();
        org.joda.time.LocalDate localDate43 = localDate31.minusWeeks((int) (short) 0);
        org.joda.time.Chronology chronology44 = localDate31.getChronology();
        org.joda.time.LocalDate.Property property45 = localDate31.era();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(0L);
        int int48 = property45.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDate localDate49 = dateTime47.toLocalDate();
        boolean boolean50 = localDate27.isAfter((org.joda.time.ReadablePartial) localDate49);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 315532800002L + "'", long19 == 315532800002L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 99 + "'", int21 == 99);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31536000000L + "'", long23 == 31536000000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 122 + "'", int28 == 122);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.plusSeconds(0);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        int int27 = dateTime25.getDayOfYear();
        int int28 = dateTime25.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getRangeDurationType();
        org.joda.time.DateTime dateTime32 = dateTime25.withFieldAdded(durationFieldType30, 1974);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        int int36 = localDate35.getWeekyear();
        java.lang.String str37 = localDate35.toString();
        org.joda.time.LocalTime localTime38 = null;
        org.joda.time.DateTime dateTime39 = localDate35.toDateTime(localTime38);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekyearOfCentury();
        boolean boolean42 = durationFieldType30.isSupported(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 42 + "'", int27 == 42);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11" + "'", str37, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        boolean boolean16 = property14.equals((java.lang.Object) 13);
        org.joda.time.DateTime dateTime18 = property14.addToCopy((int) (short) 1);
        org.joda.time.DateTime dateTime19 = property14.roundCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withWeekOfWeekyear(937);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 937 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime12 = localDate2.toDateTimeAtStartOfDay();
        int int13 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property14 = localDate2.weekyear();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.plus(readablePeriod16);
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder18.set(10, 1970);
        java.util.Calendar calendar22 = builder21.build();
        int int24 = calendar22.getGreatestMinimum(1);
        calendar22.setTimeInMillis(32772L);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate33 = localDate31.plusMonths(32772);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths(32772);
        int int41 = localDate31.compareTo((org.joda.time.ReadablePartial) localDate38);
        java.util.Date date42 = localDate38.toDate();
        calendar22.setTime(date42);
        long long44 = date42.getTime();
        boolean boolean45 = localDate17.equals((java.lang.Object) long44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth(dateTimeZone46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localDate17.compareTo((org.joda.time.ReadablePartial) yearMonth47);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-58471545600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=117,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Feb 11 00:00:00 UTC 117");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-58471545600000L) + "'", long44 == (-58471545600000L));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(yearMonth49);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getYear();
        org.joda.time.LocalDate.Property property19 = localDate16.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDate16.getFieldType(21597);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21597");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        java.lang.String str10 = property5.toString();
        java.util.Locale locale13 = new java.util.Locale("1970", "100");
        java.lang.String str14 = property5.getAsShortText(locale13);
        java.lang.String str15 = locale13.toLanguageTag();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[year]" + "'", str10, "Property[year]");
        org.junit.Assert.assertEquals(locale13.toString(), "1970_100");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und-100" + "'", str15, "und-100");
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        int int34 = dateTimeField32.get((long) 'u');
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = dateTimeField32.getAsText((long) 5, locale36);
        int int38 = property24.getMaximumTextLength(locale36);
        java.util.Calendar.Builder builder39 = builder2.setLocale(locale36);
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 32770);
        java.util.Calendar calendar43 = builder42.build();
        boolean boolean45 = calendar43.after((java.lang.Object) 70);
        calendar43.set(10, 32772, (int) (byte) 1, 22, 0);
        long long52 = calendar43.getTimeInMillis();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime66.getZone();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        calendar43.setTimeZone(timeZone69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.Calendar.Builder builder74 = builder39.setTimeZone(timeZone69);
        java.util.Date date81 = new java.util.Date(10, 99, 1, 70, 99, (int) (byte) -1);
        java.lang.String str82 = date81.toGMTString();
        int int83 = date81.getDay();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder84 = builder39.setInstant(date81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24332133632770L + "'", long52 == 24332133632770L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr" + "'", str72, "fr");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572624210,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=44,MILLISECOND=210,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Apr 03 23:38:59 UTC 1918");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "3 Apr 1918 23:38:59 GMT" + "'", str82, "3 Apr 1918 23:38:59 GMT");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(2);
        org.joda.time.YearMonth yearMonth12 = property5.getYearMonth();
        org.joda.time.Interval interval13 = yearMonth12.toInterval();
        org.joda.time.Interval interval14 = yearMonth12.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = yearMonth12.toString("fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("25 Dec 795212 03:36:12 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=25dec79521203:36:12gmt");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth6.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth6.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = yearMonth6.toString(dateTimeFormatter11);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth14.getFieldTypes();
        org.joda.time.YearMonth.Property property18 = yearMonth14.year();
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth22.toInterval(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval24.withPeriodAfterStart(readablePeriod25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval26.toPeriod(periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean30 = period28.isSupported(durationFieldType29);
        org.joda.time.YearMonth yearMonth32 = yearMonth20.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 32770);
        org.joda.time.YearMonth yearMonth33 = yearMonth14.minus((org.joda.time.ReadablePeriod) period28);
        boolean boolean34 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology35 = yearMonth33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter4.withChronology(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.months();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.monthOfYear();
        boolean boolean40 = dateTimeFieldType1.isSupported(chronology35);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((long) 69, chronology35);
        org.joda.time.Chronology chronology42 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01" + "'", str12, "1970-01");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        int int10 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 32772);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime20.withSecondOfMinute((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime20.minusHours(32772);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(6);
        boolean boolean29 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate.Property property32 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property32.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate35 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = localDate35.getFields();
        boolean boolean38 = localDate35.equals((java.lang.Object) 34532134L);
        int int39 = localDate35.getDayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str51 = dateTimeFieldType50.getName();
        org.joda.time.DateTime.Property property52 = dateTime49.property(dateTimeFieldType50);
        org.joda.time.DateTime dateTime53 = property52.roundFloorCopy();
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        org.joda.time.LocalDate localDate58 = property57.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone61);
        org.joda.time.DateTime dateTime64 = localDate58.toDateTimeAtStartOfDay(dateTimeZone61);
        org.joda.time.DateTime dateTime65 = dateTime64.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str67 = dateTimeFieldType66.getName();
        org.joda.time.DateTime.Property property68 = dateTime65.property(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = property68.roundFloorCopy();
        org.joda.time.DateTime.Property property70 = dateTime69.year();
        org.joda.time.DateTime dateTime72 = property70.addToCopy(42);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property74 = localDate73.yearOfCentury();
        org.joda.time.LocalDate localDate75 = property74.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean79 = dateTimeZone78.isFixed();
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone78);
        org.joda.time.DateTime dateTime81 = localDate75.toDateTimeAtStartOfDay(dateTimeZone78);
        org.joda.time.DateTime dateTime82 = dateTime81.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str84 = dateTimeFieldType83.getName();
        org.joda.time.DateTime.Property property85 = dateTime82.property(dateTimeFieldType83);
        boolean boolean87 = dateTime82.equals((java.lang.Object) 'u');
        boolean boolean88 = dateTime72.isBefore((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTime.Property property90 = dateTime72.property(dateTimeFieldType89);
        int int91 = dateTime54.get(dateTimeFieldType89);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType89.getRangeDurationType();
        org.joda.time.LocalDate.Property property93 = localDate35.property(dateTimeFieldType89);
        java.lang.String str94 = dateTimeFieldType89.getName();
        org.joda.time.DateTime.Property property95 = dateTime28.property(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "weekyear" + "'", str51, "weekyear");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "weekyear" + "'", str67, "weekyear");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "weekyear" + "'", str84, "weekyear");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "dayOfWeek" + "'", str94, "dayOfWeek");
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate16 = localDate4.minusYears(10);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale18.getDisplayVariant();
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale locale21 = locale18.stripExtensions();
        int int22 = property17.getMaximumShortTextLength(locale21);
        java.lang.String str23 = property17.getAsText();
        org.joda.time.LocalDate localDate24 = property17.roundCeilingCopy();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfEra();
        org.joda.time.LocalDate localDate26 = property25.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "107" + "'", str23, "107");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology8 = dateTimeFormatter2.getChronology();
        boolean boolean9 = dateTimeFormatter2.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = dateTimeFormatter2.parseLocalDateTime("secondOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.withDayOfMonth(3);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int33 = dateTimeZone31.getOffsetFromLocal((long) 6);
        long long35 = dateTimeZone28.getMillisKeepLocal(dateTimeZone31, (long) 10);
        org.joda.time.DateTime dateTime36 = dateTime26.withZone(dateTimeZone31);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime36.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        boolean boolean49 = dateTime48.isBeforeNow();
        int int50 = dateTime48.getDayOfYear();
        boolean boolean51 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean52 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property53 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime55 = dateTime36.plus(378691200100L);
        org.joda.time.DateTime.Property property56 = dateTime36.era();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone59);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.DateTime dateTime64 = localDate61.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withMillis((long) 32772);
        org.joda.time.DateTime dateTime68 = dateTime66.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime70 = dateTime68.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Interval interval76 = interval74.withChronology(chronology75);
        org.joda.time.Duration duration77 = interval74.toDuration();
        org.joda.time.DateTime dateTime78 = dateTime70.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime81 = dateTime78.withDurationAdded((long) ' ', (int) (byte) 100);
        int int82 = dateTime78.getSecondOfDay();
        org.joda.time.DateTime dateTime84 = dateTime78.plusMonths(57);
        org.joda.time.DateTime dateTime86 = dateTime78.plusMinutes(16);
        org.joda.time.DateTime dateTime89 = dateTime86.withDurationAdded(0L, 57);
        org.joda.time.DateTime.Property property90 = dateTime89.millisOfDay();
        int int91 = property56.compareTo((org.joda.time.ReadableInstant) dateTime89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = property56.setCopy(56539963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56539963 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21600000 + "'", int33 == 21600000);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 42 + "'", int50 == 42);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 21597 + "'", int82 == 21597);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572624475,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=475,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(33353, 21600000, 150, (-292275054), (-292275054), 56505, 479);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        boolean boolean19 = dateTimeFieldType7.isSupported(chronology18);
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(35435, 21601987, 86399, 21601100, 2922750, 940, 56433, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21601100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        org.joda.time.Duration duration6 = interval3.toDuration();
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval10.withPeriodAfterStart(readablePeriod11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = interval12.toPeriod(periodType13);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth16.toInterval(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Interval interval20 = interval18.withPeriodAfterStart(readablePeriod19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = interval20.toPeriod(periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean24 = period22.isSupported(durationFieldType23);
        int int25 = period14.get(durationFieldType23);
        int int26 = period14.size();
        java.lang.String str27 = period14.toString();
        org.joda.time.MutablePeriod mutablePeriod28 = period14.toMutablePeriod();
        org.joda.time.Interval interval29 = interval3.withPeriodAfterStart((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType30 = period14.getPeriodType();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0S" + "'", str27, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int4 = dateTimeZone2.getOffset((long) 2022);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 32770, dateTimeZone2);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime19.getZone();
        long long23 = dateTimeZone2.getMillisKeepLocal(dateTimeZone21, (long) 9);
        long long27 = dateTimeZone2.convertLocalToUTC((-1632961261000L), true, (long) 13);
        long long29 = dateTimeZone2.convertUTCToLocal(56211L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21600000 + "'", int4 == 21600000);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weekyear" + "'", str17, "weekyear");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1632982861000L) + "'", long27 == (-1632982861000L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 21656211L + "'", long29 == 21656211L);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        int int12 = localDate10.getDayOfWeek();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str35 = dateTimeFieldType34.getName();
        org.joda.time.DateTime.Property property36 = dateTime33.property(dateTimeFieldType34);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime39 = dateTime33.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime33.withMinuteOfHour(19);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str53 = dateTimeFieldType52.getName();
        org.joda.time.DateTime.Property property54 = dateTime51.property(dateTimeFieldType52);
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.DateTimeField dateTimeField56 = property54.getField();
        org.joda.time.DateTime dateTime58 = property54.addToCopy(5);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = interval64.withChronology(chronology65);
        org.joda.time.Duration duration67 = interval64.toDuration();
        org.joda.time.DateTime dateTime68 = dateTime58.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTime dateTime69 = dateTime41.plus((org.joda.time.ReadableDuration) duration67);
        int int70 = dateTime69.getCenturyOfEra();
        org.joda.time.DateTime.Property property71 = dateTime69.era();
        int int72 = dateTime69.getYear();
        org.joda.time.DateTime dateTime74 = dateTime69.withWeekyear(56335);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = interval78.withChronology(chronology79);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property82 = localDate81.yearOfCentury();
        org.joda.time.LocalDate localDate83 = property82.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean87 = dateTimeZone86.isFixed();
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone86);
        org.joda.time.DateTime dateTime89 = localDate83.toDateTimeAtStartOfDay(dateTimeZone86);
        org.joda.time.DateTime dateTime90 = dateTime89.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property91 = dateTime90.year();
        boolean boolean92 = interval80.contains((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Period period93 = interval80.toPeriod();
        java.lang.String str94 = period93.toString();
        int int95 = period93.size();
        org.joda.time.Period period96 = period93.toPeriod();
        org.joda.time.DateTime dateTime97 = dateTime69.minus((org.joda.time.ReadablePeriod) period93);
        org.joda.time.LocalDate localDate98 = localDate10.plus((org.joda.time.ReadablePeriod) period93);
        org.joda.time.LocalDate.Property property99 = localDate10.monthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weekyear" + "'", str35, "weekyear");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weekyear" + "'", str53, "weekyear");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20 + "'", int70 == 20);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "PT0.011S" + "'", str94, "PT0.011S");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 8 + "'", int95 == 8);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(localDate98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Locale locale6 = new java.util.Locale("5 Jun 798307 11:57:00 GMT", "PT0S", "1969");
        java.util.Calendar.Builder builder7 = builder2.setLocale(locale6);
        java.util.Locale locale9 = new java.util.Locale("");
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale9.getScript();
        java.util.Calendar.Builder builder12 = builder2.setLocale(locale9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder30 = builder2.setTimeZone(timeZone29);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = dateTime40.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str43 = dateTimeFieldType42.getName();
        org.joda.time.DateTime.Property property44 = dateTime41.property(dateTimeFieldType42);
        org.joda.time.Interval interval45 = property44.toInterval();
        org.joda.time.DateTimeField dateTimeField46 = property44.getField();
        long long49 = dateTimeField46.add((long) (byte) 10, (-1));
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        int int53 = localDate52.getWeekyear();
        java.lang.String str54 = localDate52.toString();
        org.joda.time.LocalTime localTime55 = null;
        org.joda.time.DateTime dateTime56 = localDate52.toDateTime(localTime55);
        java.util.Locale locale59 = new java.util.Locale("");
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate.Property property62 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate64 = property62.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField65 = property62.getField();
        int int67 = dateTimeField65.get((long) 'u');
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.lang.String str70 = dateTimeField65.getAsText((long) 5, locale69);
        java.lang.String str71 = locale59.getDisplayVariant(locale69);
        java.lang.String str72 = locale69.getDisplayLanguage();
        java.lang.String str73 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localDate52, (int) (byte) 100, locale69);
        java.util.Locale.setDefault(category31, locale69);
        java.util.Calendar.Builder builder75 = builder2.setLocale(locale69);
        boolean boolean76 = locale69.hasExtensions();
        java.util.Set<java.lang.String> strSet77 = locale69.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale6.toString(), "5 jun 798307 11:57:00 gmt_PT0S_1969");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "weekyear" + "'", str43, "weekyear");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-31449599990L) + "'", long49 == (-31449599990L));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-11" + "'", str54, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 70 + "'", int67 == 70);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "70" + "'", str70, "70");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese" + "'", str72, "Chinese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        org.joda.time.YearMonth yearMonth19 = property5.setCopy(6);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.withYear(16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = yearMonth21.getFieldTypes();
        org.joda.time.YearMonth yearMonth24 = yearMonth21.plusMonths(32772);
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = yearMonth26.toInterval(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Interval interval30 = interval28.withPeriodAfterStart(readablePeriod29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        java.lang.String str33 = period32.toString();
        org.joda.time.PeriodType periodType34 = period32.getPeriodType();
        org.joda.time.YearMonth yearMonth35 = yearMonth21.minus((org.joda.time.ReadablePeriod) period32);
        int int36 = yearMonth21.getMonthOfYear();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0S" + "'", str33, "PT0S");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1972);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.weekyear();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, readableDuration3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime1.toDateMidnight();
        org.joda.time.DateTime dateTime7 = dateTime1.minusMinutes((-9));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.DateTime.Property property14 = dateTime9.millisOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.DateTime.Property property27 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = property27.roundFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.DateTime dateTime30 = property29.withMinimumValue();
        boolean boolean31 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTime dateTime34 = dateTime30.withFieldAdded(durationFieldType32, 34713);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        boolean boolean8 = yearMonth1.equals((java.lang.Object) durationFieldType7);
        java.lang.String str10 = yearMonth1.toString("1969-12");
        org.joda.time.YearMonth yearMonth12 = yearMonth1.withYear(52);
        org.joda.time.Chronology chronology13 = yearMonth1.getChronology();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-12" + "'", str10, "1969-12");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(localTime13);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.DateTime dateTime17 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(7);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(68876);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68876 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        boolean boolean17 = dateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = interval21.withChronology(chronology22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        boolean boolean35 = interval23.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = interval23.toPeriod();
        org.joda.time.DateTime dateTime38 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 360240000);
        org.joda.time.LocalDate localDate39 = localDate4.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval40 = localDate4.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.DateTime dateTime43 = dateTime41.plus((-21599958L));
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(32772);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        boolean boolean13 = localDate11.equals((java.lang.Object) durationFieldType12);
        boolean boolean14 = localDate2.equals((java.lang.Object) boolean13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate.Property property17 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str31 = dateTimeFieldType30.getName();
        org.joda.time.DateTime.Property property32 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.DateTime dateTime34 = property32.addToCopy((-292275054));
        org.joda.time.DateTime dateTime36 = property32.addToCopy(11865377);
        int int37 = property17.getDifference((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = property17.roundHalfFloorCopy();
        int[] intArray39 = localDate38.getValues();
        int int40 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = localDate38.withDayOfYear((-2094381));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2094381 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-11865376) + "'", int37 == (-11865376));
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2022, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getMonthOfYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        boolean boolean45 = dateTime44.isBeforeNow();
        int int46 = dateTime44.getDayOfYear();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTime dateTime56 = localDate53.toDateTimeAtMidnight(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateMidnight dateMidnight58 = dateTime56.toDateMidnight();
        java.util.Date date59 = dateMidnight58.toDate();
        date59.setDate((int) (short) 10);
        long long62 = date59.getTime();
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.fromDateFields(date59);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateTime dateTime71 = localDate68.toDateTimeAtMidnight(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateMidnight dateMidnight73 = dateTime71.toDateMidnight();
        java.util.Date date74 = dateMidnight73.toDate();
        date74.setDate((int) (short) 10);
        boolean boolean77 = date59.before(date74);
        org.joda.time.LocalDate localDate78 = org.joda.time.LocalDate.fromDateFields(date74);
        org.joda.time.DateTime dateTime79 = dateTime20.withFields((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.secondOfMinute();
        long long86 = dateTimeField83.add((-21599064L), 47536525L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 42 + "'", int46 == 42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str57, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1836000000L) + "'", long62 == (-1836000000L));
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str72, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Dec 10 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 47514925936L + "'", long86 == 47514925936L);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone8);
        boolean boolean10 = interval5.overlaps((org.joda.time.ReadableInterval) interval9);
        long long11 = interval5.getEndMillis();
        org.joda.time.Duration duration12 = interval5.toDuration();
        boolean boolean13 = interval5.isAfterNow();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-21600000L) + "'", long11 == (-21600000L));
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        boolean boolean32 = dateTime31.isBeforeNow();
        int int33 = dateTime31.getDayOfYear();
        boolean boolean34 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime31.plusHours(92);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 42 + "'", int33 == 42);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.monthOfYear();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology31);
        boolean boolean36 = dateTime16.isSupported(dateTimeFieldType20);
        int int37 = dateTime16.getMinuteOfHour();
        int int38 = dateTime16.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T15:43:45.140+06:00" + "'", str17, "2022-02-11T15:43:45.140+06:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 43 + "'", int37 == 43);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 43 + "'", int38 == 43);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (-292277022));
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.getName();
        int int6 = localDate2.get(dateTimeFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        int int9 = localDate2.indexOf(dateTimeFieldType7);
        int int10 = localDate2.getDayOfMonth();
        int int11 = localDate2.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate2.withDayOfYear(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        calendar6.set(479, 1518171, 1518171, 9221, 50627, (-18994));
        calendar6.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = gregorianCalendar12.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(2);
        org.joda.time.YearMonth yearMonth12 = property5.getYearMonth();
        org.joda.time.Interval interval13 = yearMonth12.toInterval();
        org.joda.time.Interval interval14 = yearMonth12.toInterval();
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate.Property property20 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property20.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        long long26 = dateTimeField23.addWrapField((long) 2, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale30 = new java.util.Locale("");
        java.lang.String str31 = dateTimeField23.getAsShortText(readablePartial27, 0, locale30);
        java.util.Locale.setDefault(category17, locale30);
        java.util.Locale.setDefault(category16, locale30);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale30.getDisplayName(locale34);
        java.util.Calendar.Builder builder36 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder38 = builder36.setInstant((long) 32770);
        java.util.Calendar calendar39 = builder38.build();
        java.util.Calendar.Builder builder43 = builder38.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getCountry();
        java.lang.String str46 = locale44.getDisplayCountry();
        java.util.Calendar.Builder builder47 = builder38.setLocale(locale44);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime56.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str59 = dateTimeFieldType58.getName();
        org.joda.time.DateTime.Property property60 = dateTime57.property(dateTimeFieldType58);
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.DateTimeField dateTimeField62 = property60.getField();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property64 = localDate63.yearOfCentury();
        org.joda.time.LocalDate.Property property65 = localDate63.yearOfCentury();
        org.joda.time.LocalDate localDate67 = property65.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField68 = property65.getField();
        int int70 = dateTimeField68.get((long) 'u');
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.lang.String str73 = dateTimeField68.getAsText((long) 5, locale72);
        int int74 = property60.getMaximumTextLength(locale72);
        java.util.Calendar.Builder builder75 = builder38.setLocale(locale72);
        java.util.Set<java.lang.Character> charSet76 = locale72.getExtensionKeys();
        java.lang.String str77 = locale30.getDisplayCountry(locale72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = yearMonth12.toString("German", locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 315532800002L + "'", long26 == 315532800002L);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekyear" + "'", str59, "weekyear");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 70 + "'", int70 == 70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "70" + "'", str73, "70");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfHour();
        long long41 = dateTimeField39.roundHalfCeiling(0L);
        java.lang.String str43 = dateTimeField39.getAsText((long) 1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        int int13 = calendar3.getWeeksInWeekYear();
        calendar3.setTimeInMillis((long) (-46800000));
        java.lang.String str16 = calendar3.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-46800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.util.GregorianCalendar[time=-46800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str16, "java.util.GregorianCalendar[time=-46800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.withHourOfDay(15);
        org.joda.time.DateTime.Property property27 = dateTime20.centuryOfEra();
        org.joda.time.DateTime.Property property28 = dateTime20.weekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths(32772);
        org.joda.time.LocalDate localDate15 = localDate11.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property16 = localDate11.weekyear();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        int int18 = property16.getMaximumTextLength(locale17);
        java.util.Calendar.Builder builder19 = builder6.setLocale(locale17);
        java.util.Calendar.Builder builder21 = builder6.setLenient(true);
        java.util.Calendar.Builder builder25 = builder6.setDate((int) (short) 10, 56305647, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder27 = builder6.setInstant((long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        boolean boolean23 = dateTime22.isBeforeNow();
        int int24 = dateTime22.getDayOfYear();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        int int26 = dateTime13.getDayOfMonth();
        org.joda.time.Chronology chronology27 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime13.plusMinutes((-7));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime20.withMinuteOfHour(19);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        org.joda.time.DateTime dateTime45 = property41.addToCopy(5);
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = interval51.withChronology(chronology52);
        org.joda.time.Duration duration54 = interval51.toDuration();
        org.joda.time.DateTime dateTime55 = dateTime45.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime56 = dateTime28.plus((org.joda.time.ReadableDuration) duration54);
        int int57 = dateTime56.getCenturyOfEra();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime56.toYearMonthDay();
        java.lang.String str59 = yearMonthDay58.toString();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean63 = dateTimeZone62.isFixed();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone62);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.DateTime dateTime67 = localDate64.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withMillis((long) 32772);
        org.joda.time.DateTime dateTime71 = dateTime69.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime76 = dateTime71.withDurationAdded(readableDuration74, 292278994);
        org.joda.time.DateTime dateTime78 = dateTime76.minusSeconds(8);
        org.joda.time.DateTime dateTime80 = dateTime76.withMinuteOfHour(16);
        boolean boolean82 = dateTime80.isAfter(309303202800000L);
        org.joda.time.DateTime dateTime83 = yearMonthDay58.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = yearMonthDay58.getValue(414088);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 414088");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20 + "'", int57 == 20);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-11" + "'", str59, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        long long13 = property12.remainder();
        org.joda.time.DateTime dateTime15 = property12.setCopy(21600000);
        boolean boolean16 = dateTime15.isEqualNow();
        int int17 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy(86397772);
        int int21 = property18.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 21597772L + "'", long13 == 21597772L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 57 + "'", int17 == 57);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        java.lang.String str8 = property5.getAsText();
        java.lang.String str9 = property5.toString();
        org.joda.time.YearMonth yearMonth10 = property5.getYearMonth();
        org.joda.time.DurationField durationField11 = property5.getDurationField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[year]" + "'", str9, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (short) 100);
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval10.withPeriodAfterStart(readablePeriod11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = interval12.toPeriod(periodType13);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth16.toInterval(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Interval interval20 = interval18.withPeriodAfterStart(readablePeriod19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = interval20.toPeriod(periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean24 = period22.isSupported(durationFieldType23);
        int int25 = period14.get(durationFieldType23);
        int int26 = period14.size();
        java.util.Calendar.Builder builder27 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder29 = builder27.setInstant((long) 32770);
        java.util.Calendar calendar30 = builder27.build();
        java.util.Calendar.Builder builder34 = builder27.setWeekDate(17724494, 5, (int) '#');
        boolean boolean35 = period14.equals((java.lang.Object) 17724494);
        org.joda.time.YearMonth yearMonth36 = yearMonth6.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusMonths(56182);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = yearMonth36.getValue(2012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2012");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate2.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = property12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 10);
        org.joda.time.DateTime dateTime48 = dateTime38.withZone(dateTimeZone43);
        org.joda.time.DateTime.Property property49 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime51 = property49.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime52 = property49.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = property54.getDifference(readableInstant56);
        org.joda.time.LocalDate localDate58 = property54.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone61);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTime dateTime66 = localDate63.toDateTimeAtCurrentTime(dateTimeZone65);
        boolean boolean67 = localDate58.equals((java.lang.Object) dateTime66);
        org.joda.time.DateTime dateTime69 = dateTime66.minusDays(70);
        org.joda.time.DateTime dateTime71 = dateTime66.plus((long) 57);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = interval75.withChronology(chronology76);
        boolean boolean79 = interval75.isAfter(10L);
        boolean boolean81 = interval75.isAfter(24332133632770L);
        long long82 = interval75.getStartMillis();
        org.joda.time.Duration duration83 = interval75.toDuration();
        org.joda.time.DateTime dateTime85 = dateTime66.withDurationAdded((org.joda.time.ReadableDuration) duration83, 2848);
        org.joda.time.DateTime dateTime86 = dateTime52.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateTime dateTime87 = dateTime26.minus((org.joda.time.ReadableDuration) duration83);
        java.util.GregorianCalendar gregorianCalendar88 = dateTime26.toGregorianCalendar();
        java.lang.Object obj89 = gregorianCalendar88.clone();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(gregorianCalendar88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "java.util.GregorianCalendar[time=1641146400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "java.util.GregorianCalendar[time=1641146400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "java.util.GregorianCalendar[time=1641146400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(2022, 86397772, 7);
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(360240000, 2741, 98);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(5, 292278993, 56213);
        java.util.Calendar.Builder builder19 = builder10.setTimeOfDay(31800, (int) 'a', 122, 56316);
        java.util.Calendar.Builder builder23 = builder10.setDate(6, (-1), 56182);
        java.util.Calendar.Builder builder24 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder24.setInstant((long) 32770);
        java.util.Calendar calendar27 = builder26.build();
        java.util.Calendar.Builder builder31 = builder26.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Calendar.Builder builder35 = builder26.setLocale(locale32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime44.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str47 = dateTimeFieldType46.getName();
        org.joda.time.DateTime.Property property48 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.DateTimeField dateTimeField50 = property48.getField();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate.Property property53 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property53.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField56 = property53.getField();
        int int58 = dateTimeField56.get((long) 'u');
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.lang.String str61 = dateTimeField56.getAsText((long) 5, locale60);
        int int62 = property48.getMaximumTextLength(locale60);
        java.util.Calendar.Builder builder63 = builder26.setLocale(locale60);
        java.util.Calendar.Builder builder64 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder66 = builder64.setInstant((long) 32770);
        java.util.Calendar calendar67 = builder66.build();
        boolean boolean69 = calendar67.after((java.lang.Object) 70);
        calendar67.set(10, 32772, (int) (byte) 1, 22, 0);
        long long76 = calendar67.getTimeInMillis();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property78 = localDate77.yearOfCentury();
        org.joda.time.LocalDate localDate79 = property78.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean83 = dateTimeZone82.isFixed();
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone82);
        org.joda.time.DateTime dateTime85 = localDate79.toDateTimeAtStartOfDay(dateTimeZone82);
        org.joda.time.DateTime dateTime86 = dateTime85.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str88 = dateTimeFieldType87.getName();
        org.joda.time.DateTime.Property property89 = dateTime86.property(dateTimeFieldType87);
        org.joda.time.DateTime dateTime90 = property89.roundFloorCopy();
        org.joda.time.DateTime.Property property91 = dateTime90.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone92 = dateTime90.getZone();
        java.util.TimeZone timeZone93 = dateTimeZone92.toTimeZone();
        calendar67.setTimeZone(timeZone93);
        java.util.Locale locale95 = java.util.Locale.FRENCH;
        java.lang.String str96 = locale95.toLanguageTag();
        java.util.Calendar calendar97 = java.util.Calendar.getInstance(timeZone93, locale95);
        java.util.Calendar.Builder builder98 = builder63.setTimeZone(timeZone93);
        java.util.Calendar.Builder builder99 = builder10.setTimeZone(timeZone93);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 70 + "'", int58 == 70);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "70" + "'", str61, "70");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 24332133632770L + "'", long76 == 24332133632770L);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "weekyear" + "'", str88, "weekyear");
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "fr" + "'", str96, "fr");
        org.junit.Assert.assertNotNull(calendar97);
// flaky:         org.junit.Assert.assertEquals(calendar97.toString(), "java.util.GregorianCalendar[time=1644572625677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=45,MILLISECOND=677,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = yearMonth38.toInterval(dateTimeZone39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = yearMonth38.getFieldTypes();
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = yearMonth38.toString(dateTimeFormatter43);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth46.toInterval(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = yearMonth46.getFieldTypes();
        org.joda.time.YearMonth.Property property50 = yearMonth46.year();
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = yearMonth54.toInterval(dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Interval interval58 = interval56.withPeriodAfterStart(readablePeriod57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval58.toPeriod(periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean62 = period60.isSupported(durationFieldType61);
        org.joda.time.YearMonth yearMonth64 = yearMonth52.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 32770);
        org.joda.time.YearMonth yearMonth65 = yearMonth46.minus((org.joda.time.ReadablePeriod) period60);
        boolean boolean66 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth65);
        org.joda.time.Chronology chronology67 = yearMonth65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.year();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology67.getZone();
        org.joda.time.Chronology chronology70 = chronology33.withZone(dateTimeZone69);
        long long74 = chronology70.add((-31449599990L), (long) 19, (int) 'a');
        org.joda.time.DateTimeField dateTimeField75 = chronology70.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology70.millisOfDay();
        org.joda.time.DurationField durationField77 = dateTimeField76.getRangeDurationField();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01" + "'", str44, "1970-01");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-31449598147L) + "'", long74 == (-31449598147L));
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int11 = dateTimeZone9.getOffsetFromLocal((long) 6);
        long long13 = dateTimeZone6.getMillisKeepLocal(dateTimeZone9, (long) 10);
        org.joda.time.Interval interval14 = localDate4.toInterval(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = localDate3.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str16 = dateTimeZone6.toString();
        long long18 = dateTimeZone6.nextTransition((long) 0);
        long long20 = dateTimeZone6.previousTransition((long) '4');
        long long22 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (long) 1518171);
        long long25 = dateTimeZone6.convertLocalToUTC(970513889799839000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+06:00" + "'", str2, "+06:00");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21600000 + "'", int11 == 21600000);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+06:00" + "'", str16, "+06:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1518171L + "'", long22 == 1518171L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 970513889778239000L + "'", long25 == 970513889778239000L);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(chronology3);
        org.joda.time.YearMonth.Property property7 = yearMonth6.year();
        org.joda.time.Interval interval8 = yearMonth6.toInterval();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int7 = dateTimeZone5.getOffsetFromLocal((long) 6);
        long long9 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        org.joda.time.Interval interval10 = localDate0.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval10.withPeriodBeforeEnd(readablePeriod11);
        org.joda.time.Chronology chronology13 = interval10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21600000 + "'", int7 == 21600000);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Interval interval8 = interval6.withPeriodAfterStart(readablePeriod7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval14.withPeriodAfterStart(readablePeriod15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval16.toPeriod(periodType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean20 = period18.isSupported(durationFieldType19);
        int int21 = period10.get(durationFieldType19);
        org.joda.time.YearMonth yearMonth22 = yearMonth2.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = yearMonth26.toInterval(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Interval interval30 = interval28.withPeriodAfterStart(readablePeriod29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean34 = period32.isSupported(durationFieldType33);
        org.joda.time.YearMonth yearMonth36 = yearMonth24.withPeriodAdded((org.joda.time.ReadablePeriod) period32, 32770);
        org.joda.time.PeriodType periodType37 = period32.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType39 = period32.getFieldType((int) (short) 1);
        int int40 = period10.get(durationFieldType39);
        int int41 = period10.size();
        java.lang.String str42 = period10.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DurationField durationField33 = chronology30.minutes();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.Interval interval7 = interval3.withStartMillis((long) 32772);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology8.getDateTimeMillis(68520000, 822, 359, 56522945);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 822 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 32772);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime14.minusSeconds((int) (short) -1);
        boolean boolean19 = localDate2.equals((java.lang.Object) (short) -1);
        java.util.Date date20 = localDate2.toDate();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property22.getDifference(readableInstant24);
        org.joda.time.LocalDate localDate26 = property22.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        boolean boolean35 = localDate26.equals((java.lang.Object) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTime();
        int int39 = dateTime37.getYear();
        org.joda.time.LocalDate localDate40 = dateTime37.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str42 = dateTimeFieldType41.getName();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfCentury();
        org.joda.time.LocalDate.Property property46 = localDate44.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property46.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate49 = property46.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        boolean boolean51 = durationFieldType43.isSupported(chronology50);
        boolean boolean52 = dateTimeFieldType41.isSupported(chronology50);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DurationField durationField59 = durationFieldType53.getField(chronology56);
        org.joda.time.DurationField durationField60 = chronology56.millis();
        boolean boolean61 = dateTimeFieldType41.isSupported(chronology56);
        boolean boolean62 = localDate40.isSupported(dateTimeFieldType41);
        boolean boolean63 = localDate2.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDate localDate65 = localDate2.plusMonths((int) ' ');
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 21597);
        org.joda.time.DateTime dateTime68 = localDate65.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime71 = dateTime68.withDurationAdded((long) 86395544, 56505);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2099 + "'", int39 == 2099);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weekyear" + "'", str42, "weekyear");
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        long long13 = property12.remainder();
        org.joda.time.DateTime dateTime15 = property12.setCopy(21600000);
        org.joda.time.DateTime dateTime16 = property12.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField17 = property12.getField();
        org.joda.time.DateTimeField dateTimeField18 = property12.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField18.getType();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 21597772L + "'", long13 == 21597772L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        java.util.Date date6 = calendar3.getTime();
        date6.setMonth(2017);
        date6.setSeconds(21597);
        date6.setSeconds(32);
        date6.setHours(1957);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Apr 23 13:00:32 UTC 2138");
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 3, dateTimeZone2);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTime dateTime22 = property20.addToCopy(42);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str34 = dateTimeFieldType33.getName();
        org.joda.time.DateTime.Property property35 = dateTime32.property(dateTimeFieldType33);
        boolean boolean37 = dateTime32.equals((java.lang.Object) 'u');
        boolean boolean38 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTime.Property property40 = dateTime22.property(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType39.getDurationType();
        org.joda.time.LocalDate localDate43 = localDate5.withFieldAdded(durationFieldType41, 32770);
        java.lang.String str44 = durationFieldType41.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weekyear" + "'", str17, "weekyear");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "days" + "'", str44, "days");
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfMonth();
        int int4 = localDate0.getDayOfWeek();
        int int5 = localDate0.getMonthOfYear();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDate0.getFieldType(34531018);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34531018");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        java.util.Locale locale3 = new java.util.Locale("English (United Kingdom)", "Englisch (Kanada)", "+99:10");
        org.junit.Assert.assertEquals(locale3.toString(), "english (united kingdom)_ENGLISCH (KANADA)_+99:10");
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonth8.getFieldTypes();
        org.joda.time.YearMonth.Property property12 = yearMonth8.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = yearMonth8.toString(dateTimeFormatter13);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((long) (short) 1, chronology17);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.PeriodType periodType27 = period26.getPeriodType();
        org.joda.time.YearMonth yearMonth29 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 2);
        boolean boolean30 = yearMonth8.isBefore((org.joda.time.ReadablePartial) yearMonth29);
        int int31 = yearMonth29.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth29.plusYears(2922749);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((long) (short) 1, chronology35);
        org.joda.time.Chronology chronology37 = yearMonth36.getChronology();
        java.lang.String str38 = yearMonth36.toString();
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = yearMonth40.toInterval(dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Interval interval44 = interval42.withPeriodAfterStart(readablePeriod43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval44.toPeriod(periodType45);
        boolean boolean48 = interval44.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval49 = interval44.toMutableInterval();
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = yearMonth53.toInterval(dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Interval interval57 = interval55.withPeriodAfterStart(readablePeriod56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = interval57.toPeriod(periodType58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean61 = period59.isSupported(durationFieldType60);
        org.joda.time.YearMonth yearMonth63 = yearMonth51.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 32770);
        org.joda.time.PeriodType periodType64 = period59.getPeriodType();
        boolean boolean65 = interval44.equals((java.lang.Object) period59);
        org.joda.time.YearMonth yearMonth67 = yearMonth36.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 6);
        org.joda.time.MutablePeriod mutablePeriod68 = period59.toMutablePeriod();
        org.joda.time.YearMonth yearMonth69 = yearMonth29.minus((org.joda.time.ReadablePeriod) period59);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970" + "'", str6, "1970");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01" + "'", str14, "1970-01");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01" + "'", str38, "1970-01");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(yearMonth69);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyear();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = dateTimeField4.getAsShortText((long) 12, locale6);
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = dateTimeField4.getAsShortText((long) 5, locale9);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale11.toLanguageTag();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970" + "'", str7, "1970");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str12, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-CN" + "'", str14, "zh-CN");
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str7 = date6.toGMTString();
        java.util.Date date14 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        boolean boolean15 = date6.before(date14);
        int int16 = date14.getMinutes();
        int int17 = date14.getTimezoneOffset();
        java.util.Date date21 = new java.util.Date(17, (int) (byte) 100, 0);
        boolean boolean22 = date14.after(date21);
        int int23 = date14.getSeconds();
        java.time.Instant instant24 = date14.toInstant();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str7, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertEquals(date14.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Apr 30 00:00:00 UTC 1925");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int7 = dateTimeZone5.getOffsetFromLocal((long) 6);
        long long9 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        org.joda.time.Interval interval10 = localDate0.toInterval(dateTimeZone2);
        int int11 = localDate0.getYear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate14 = localDate0.withFieldAdded(durationFieldType12, 365);
        int int15 = localDate0.size();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        boolean boolean26 = dateTime24.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = interval30.withChronology(chronology31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property43 = dateTime42.year();
        boolean boolean44 = interval32.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period45 = interval32.toPeriod();
        org.joda.time.DateTime dateTime47 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 360240000);
        org.joda.time.LocalDate localDate48 = localDate0.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalDate.Property property49 = localDate0.weekyear();
        org.joda.time.LocalDate localDate51 = localDate0.withYear(7);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21600000 + "'", int7 == 21600000);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime12 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate2.toDateTime(readableInstant13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property25 = dateTime24.year();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str37 = dateTimeFieldType36.getName();
        org.joda.time.DateTime.Property property38 = dateTime35.property(dateTimeFieldType36);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime35);
        int int40 = dateTime35.getHourOfDay();
        boolean boolean41 = dateTime35.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime35.toYearMonthDay();
        org.joda.time.DateTime dateTime44 = dateTime35.plusHours(2011);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = interval48.withChronology(chronology49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime59.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property61 = dateTime60.year();
        boolean boolean62 = interval50.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period63 = interval50.toPeriod();
        org.joda.time.DateTime dateTime64 = dateTime35.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime14.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime.Property property66 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime67 = property66.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property66.getFieldType();
        org.joda.time.Interval interval69 = property66.toInterval();
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyear" + "'", str37, "weekyear");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("0107-02-11");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 0107-02-11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone12.getShortName((long) (byte) 10);
        org.joda.time.DateTime dateTime15 = localDate10.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfSecond();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy(3);
        int int20 = dateTime19.getSecondOfMinute();
        int int21 = dateTime19.getSecondOfDay();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime19.toYearMonthDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.size();
        org.joda.time.LocalTime localTime3 = null;
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int12 = dateTimeZone10.getOffsetFromLocal((long) 6);
        long long14 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        org.joda.time.Interval interval15 = localDate5.toInterval(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = localDate4.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.String str17 = dateTimeZone7.toString();
        long long19 = dateTimeZone7.nextTransition((long) 0);
        boolean boolean21 = dateTimeZone7.isStandardOffset(31535997772L);
        long long24 = dateTimeZone7.convertLocalToUTC((long) 22, true);
        org.joda.time.DateTime dateTime25 = localDate1.toDateTime(localTime3, dateTimeZone7);
        org.joda.time.LocalDate localDate27 = localDate1.plusDays(56172);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = localDate1.toString("cinese");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21600000 + "'", int12 == 21600000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+06:00" + "'", str17, "+06:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-21599978L) + "'", long24 == (-21599978L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        java.lang.String str8 = property5.getAsText();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        int int10 = property5.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property5.getFieldType();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear(69);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime27 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property28 = dateTime27.year();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime38);
        int int43 = dateTime38.getHourOfDay();
        boolean boolean44 = dateTime38.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime38.toYearMonthDay();
        org.joda.time.DateTime dateTime47 = dateTime38.minus(1050308164619000L);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int52 = dateTimeZone50.getOffset((long) 2022);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 32770, dateTimeZone50);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.yearOfCentury();
        org.joda.time.LocalDate localDate56 = property55.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone59);
        org.joda.time.DateTime dateTime62 = localDate56.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime62.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str65 = dateTimeFieldType64.getName();
        org.joda.time.DateTime.Property property66 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime67 = property66.roundFloorCopy();
        org.joda.time.DateTime.Property property68 = dateTime67.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime67.getZone();
        long long71 = dateTimeZone50.getMillisKeepLocal(dateTimeZone69, (long) 9);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((java.lang.Object) dateTime47, dateTimeZone69);
        org.joda.time.LocalDate localDate74 = localDate72.plusYears(935);
        org.joda.time.Chronology chronology75 = localDate72.getChronology();
        org.joda.time.LocalDate localDate76 = localDate15.withFields((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.Chronology chronology77 = localDate15.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 21600000 + "'", int52 == 21600000);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekyear" + "'", str65, "weekyear");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 9L + "'", long71 == 9L);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minusMonths((int) (short) 1);
        org.joda.time.YearMonth.Property property6 = yearMonth1.year();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        int int8 = property6.getMaximumShortTextLength(locale7);
        java.lang.String str9 = property6.getAsShortText();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.toLanguageTag();
        int int12 = property6.getMaximumShortTextLength(locale10);
        int int13 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        long long20 = dateTimeField14.addWrapField(0L, (int) (short) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeField14.getAsShortText(70, locale22);
        org.joda.time.DurationField durationField24 = dateTimeField14.getDurationField();
        java.lang.String str25 = dateTimeField14.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 315705600000L + "'", long20 == 315705600000L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DateTimeField[weekyear]" + "'", str25, "DateTimeField[weekyear]");
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        int int10 = dateTime7.getWeekOfWeekyear();
        int int11 = dateTime7.getSecondOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime25.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime25.withMinuteOfHour(11);
        boolean boolean38 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime7.minusMinutes(56156);
        org.joda.time.DateMidnight dateMidnight41 = dateTime7.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 56626 + "'", int11 == 56626);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight41);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(57);
        org.joda.time.LocalDate localDate10 = localDate4.minusWeeks(1980);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        int int7 = date6.getDay();
        long long8 = date6.getTime();
        int int9 = date6.getMonth();
        int int10 = date6.getHours();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1889963999000L) + "'", long8 == (-1889963999000L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval5.toMutableInterval();
        org.joda.time.Duration duration12 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology13 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.era();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getWeekyear();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime5);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        int int10 = dateTimeField8.getMinimumValue((long) (-9));
        int int12 = dateTimeField8.get((-21599965L));
        long long14 = dateTimeField8.remainder((-25L));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 69 + "'", int12 == 69);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31535999975L + "'", long14 == 31535999975L);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime10 = dateTime7.toDateTimeISO();
        int int11 = dateTime10.getEra();
        int int12 = dateTime10.getEra();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str35 = dateTimeFieldType34.getName();
        org.joda.time.DateTime.Property property36 = dateTime33.property(dateTimeFieldType34);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime39 = dateTime22.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withMillis((long) 32772);
        org.joda.time.DateTime dateTime51 = dateTime49.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime56 = dateTime51.withDurationAdded(readableDuration54, 292278994);
        org.joda.time.DateTime dateTime58 = dateTime56.minusSeconds(8);
        org.joda.time.DateTime dateTime60 = dateTime56.withMinuteOfHour(16);
        boolean boolean61 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = dateTime60.withMillisOfSecond(1);
        boolean boolean64 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime66 = dateTime10.plusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime66.withWeekOfWeekyear(18);
        int int69 = dateTime66.getDayOfWeek();
        boolean boolean71 = dateTime66.isAfter((long) 21597772);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weekyear" + "'", str35, "weekyear");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = property5.getAsText(locale8);
        org.joda.time.YearMonth yearMonth12 = property5.setCopy(12);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.000Z");
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((-1L), (int) (byte) -1);
        org.joda.time.DateTime dateTime19 = dateTime14.withMinuteOfHour(6);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.Interval interval22 = yearMonth12.toInterval(dateTimeZone20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((long) (short) 1, chronology25);
        org.joda.time.Chronology chronology27 = yearMonth26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.millisOfSecond();
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = yearMonth30.toInterval(dateTimeZone31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = yearMonth30.getFieldTypes();
        org.joda.time.YearMonth.Property property34 = yearMonth30.year();
        java.lang.String str35 = property34.toString();
        org.joda.time.YearMonth yearMonth37 = property34.addToCopy((int) (byte) 10);
        long long39 = chronology27.set((org.joda.time.ReadablePartial) yearMonth37, (long) (-292275054));
        org.joda.time.YearMonth.Property property40 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((long) (short) 1, chronology42);
        org.joda.time.Chronology chronology44 = yearMonth43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyear();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = dateTimeField45.getAsShortText((long) 12, locale47);
        java.util.Locale.setDefault(locale47);
        java.lang.String str50 = property40.getAsText(locale47);
        java.lang.String str51 = dateTimeZone20.getName(0L, locale47);
        int int53 = dateTimeZone20.getOffset((long) 35312);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[year]" + "'", str35, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 317918924946L + "'", long39 == 317918924946L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "gennaio" + "'", str50, "gennaio");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 797, (-1514786399958L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMillis(796407);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property17.getDifference(readableInstant19);
        org.joda.time.LocalDate localDate21 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate28 = localDate26.plusMonths(32772);
        org.joda.time.LocalDate localDate29 = localDate21.withFields((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTime dateTime30 = localDate21.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property31 = localDate21.yearOfEra();
        int int32 = localDate21.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        boolean boolean39 = localDate37.isSupported(durationFieldType38);
        org.joda.time.LocalDate localDate41 = localDate37.minusDays(57);
        org.joda.time.LocalDate localDate43 = localDate37.plusYears((int) (byte) 10);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        boolean boolean45 = localDate21.isAfter((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalTime localTime46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate43.toDateTime(localTime46, dateTimeZone47);
        org.joda.time.Chronology chronology49 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int56 = dateTimeZone54.getOffsetFromLocal((long) 6);
        long long58 = dateTimeZone51.getMillisKeepLocal(dateTimeZone54, (long) 10);
        org.joda.time.Chronology chronology59 = chronology49.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) 1644572335681L, chronology59);
        boolean boolean61 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2099 + "'", int32 == 2099);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21600000 + "'", int56 == 21600000);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        int int3 = dateTimeZone1.getOffsetFromLocal((-176767952680800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 432000000 + "'", int3 == 432000000);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusWeeks(21600000);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(3);
        int int19 = dateTime18.getDayOfWeek();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = localDate22.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property31 = localDate22.dayOfMonth();
        int int32 = localDate22.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean34 = localDate22.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDate localDate36 = localDate22.plusMonths(86397);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 10);
        org.joda.time.Interval interval48 = localDate38.toInterval(dateTimeZone40);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = dateTime57.getMonthOfYear();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime(dateTimeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property63 = localDate62.yearOfCentury();
        org.joda.time.LocalDate localDate64 = property63.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone67);
        org.joda.time.DateTime dateTime70 = localDate64.toDateTimeAtStartOfDay(dateTimeZone67);
        boolean boolean71 = dateTime70.isBeforeNow();
        int int72 = dateTime70.getDayOfYear();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime.Property property74 = dateTime61.minuteOfDay();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property76 = localDate75.yearOfCentury();
        org.joda.time.LocalDate localDate77 = property76.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean81 = dateTimeZone80.isFixed();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone80);
        org.joda.time.DateTime dateTime83 = localDate77.toDateTimeAtStartOfDay(dateTimeZone80);
        org.joda.time.DateTime dateTime84 = dateTime83.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str86 = dateTimeFieldType85.getName();
        org.joda.time.DateTime.Property property87 = dateTime84.property(dateTimeFieldType85);
        org.joda.time.DateTime dateTime89 = dateTime61.withField(dateTimeFieldType85, 1978);
        org.joda.time.LocalDate.Property property90 = localDate37.property(dateTimeFieldType85);
        boolean boolean91 = localDate22.isSupported(dateTimeFieldType85);
        org.joda.time.DateTime dateTime93 = dateTime18.withField(dateTimeFieldType85, 13);
        boolean boolean95 = dateTime18.isAfter((-797444739357L));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21600000 + "'", int45 == 21600000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 42 + "'", int72 == 42);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "weekyear" + "'", str86, "weekyear");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 9);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plusYears(625);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.withYear((-625));
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = yearMonth7.toInterval(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonth7.getFieldTypes();
        org.joda.time.YearMonth.Property property11 = yearMonth7.year();
        int int12 = property11.getMinimumValue();
        int int13 = property11.getMinimumValueOverall();
        int int14 = property11.getMinimumValue();
        org.joda.time.DurationField durationField15 = property11.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        boolean boolean17 = yearMonth5.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292275054) + "'", int12 == (-292275054));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime24.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.DateTime.Property property28 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime31 = dateTime25.plusMillis((int) (byte) 0);
        boolean boolean32 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.LocalDate localDate43 = localDate35.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property44 = localDate35.dayOfMonth();
        org.joda.time.DateTime dateTime45 = localDate35.toDateTimeAtStartOfDay();
        boolean boolean46 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime4.minusHours((-11865376));
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes((int) ' ');
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        org.joda.time.LocalDate.Property property7 = localDate6.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withYear((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType11.getDurationType();
        boolean boolean15 = localDate10.isSupported(dateTimeFieldType11);
        java.lang.String str16 = dateTimeFieldType11.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyearOfCentury" + "'", str16, "weekyearOfCentury");
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        java.lang.String str8 = property5.getName();
        java.lang.String str9 = property5.toString();
        org.joda.time.DurationField durationField10 = property5.getDurationField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "year" + "'", str8, "year");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[year]" + "'", str9, "Property[year]");
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        boolean boolean12 = dateTime7.isAfterNow();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property15.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        int int20 = dateTimeField18.get((long) 'u');
        long long23 = dateTimeField18.addWrapField((long) (short) -1, 1);
        org.joda.time.DurationField durationField24 = dateTimeField18.getDurationField();
        long long26 = dateTimeField18.roundHalfFloor((long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField18.getType();
        boolean boolean28 = dateTime7.isSupported(dateTimeFieldType27);
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str42 = dateTimeFieldType41.getName();
        org.joda.time.DateTime.Property property43 = dateTime40.property(dateTimeFieldType41);
        org.joda.time.Interval interval44 = property43.toInterval();
        org.joda.time.DateTimeField dateTimeField45 = property43.getField();
        long long48 = dateTimeField45.add((long) (byte) 10, (-1));
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate51 = property50.getLocalDate();
        int int52 = localDate51.getWeekyear();
        java.lang.String str53 = localDate51.toString();
        org.joda.time.LocalTime localTime54 = null;
        org.joda.time.DateTime dateTime55 = localDate51.toDateTime(localTime54);
        java.util.Locale locale58 = new java.util.Locale("");
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property60 = localDate59.yearOfCentury();
        org.joda.time.LocalDate.Property property61 = localDate59.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property61.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField64 = property61.getField();
        int int66 = dateTimeField64.get((long) 'u');
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = dateTimeField64.getAsText((long) 5, locale68);
        java.lang.String str70 = locale58.getDisplayVariant(locale68);
        java.lang.String str71 = locale68.getDisplayLanguage();
        java.lang.String str72 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localDate51, (int) (byte) 100, locale68);
        java.util.Locale.setDefault(category30, locale68);
        java.util.Locale locale74 = java.util.Locale.getDefault(category30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = dateTime7.toString("10-Dec-1969 4:00:00 PM", locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31535999999L + "'", long23 == 31535999999L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weekyear" + "'", str42, "weekyear");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-31449599990L) + "'", long48 == (-31449599990L));
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11" + "'", str53, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 70 + "'", int66 == 70);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "70" + "'", str69, "70");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "cinese" + "'", str71, "cinese");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "100" + "'", str72, "100");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate16 = localDate4.minusYears(10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = new java.util.Locale("");
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = new java.util.Locale("");
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale20, locale22, locale23, locale24, locale26, locale28, locale29, locale30, locale32, locale34, locale35, locale36, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet44);
        boolean boolean46 = localDate4.equals((java.lang.Object) strList45);
        org.joda.time.LocalDate localDate48 = localDate4.withCenturyOfEra(13);
        java.util.Date date49 = localDate48.toDate();
        date49.setHours((-3599));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Sep 14 01:00:00 UTC 1316");
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime.Property property10 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.plusYears(1970);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds(21597);
        org.joda.time.DateTime dateTime16 = dateTime12.withEra(0);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 32772);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime35 = dateTime31.minusSeconds((int) (short) -1);
        boolean boolean36 = localDate19.equals((java.lang.Object) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getRangeDurationType();
        int int39 = localDate19.indexOf(dateTimeFieldType37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate.Property property42 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property42.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate45 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone48);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateTime dateTime53 = localDate50.toDateTimeAtMidnight(dateTimeZone52);
        int int54 = dateTime53.getMonthOfYear();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTime dateTime57 = dateTime53.toDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate45.toDateTimeAtStartOfDay(dateTimeZone56);
        java.util.Locale locale64 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str65 = locale64.getCountry();
        java.util.Locale locale67 = new java.util.Locale("");
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.yearOfCentury();
        org.joda.time.LocalDate.Property property70 = localDate68.yearOfCentury();
        org.joda.time.LocalDate localDate72 = property70.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField73 = property70.getField();
        int int75 = dateTimeField73.get((long) 'u');
        java.util.Locale locale77 = java.util.Locale.TAIWAN;
        java.lang.String str78 = dateTimeField73.getAsText((long) 5, locale77);
        java.lang.String str79 = locale67.getDisplayVariant(locale77);
        java.lang.String str80 = locale77.getDisplayLanguage();
        java.lang.String str81 = locale64.getDisplayName(locale77);
        java.lang.String str82 = dateTimeZone56.getName((long) (short) 10, locale64);
        org.joda.time.DateTime dateTime83 = localDate19.toDateTimeAtMidnight(dateTimeZone56);
        org.joda.time.DateTime dateTime85 = dateTime83.minusMillis(99);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean88 = dateTimeZone87.isFixed();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int92 = dateTimeZone90.getOffsetFromLocal((long) 6);
        long long94 = dateTimeZone87.getMillisKeepLocal(dateTimeZone90, (long) 10);
        org.joda.time.DateTime dateTime95 = dateTime85.withZoneRetainFields(dateTimeZone87);
        org.joda.time.DateTime dateTime96 = dateTime85.withLaterOffsetAtOverlap();
        boolean boolean97 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime96);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals(locale64.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1969-12" + "'", str65, "1969-12");
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 70 + "'", int75 == 70);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "70" + "'", str78, "70");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "cinese" + "'", str80, "cinese");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "weekofweekyear (1969-12)" + "'", str81, "weekofweekyear (1969-12)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 21600000 + "'", int92 == 21600000);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 10L + "'", long94 == 10L);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear(69);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) 6);
        long long28 = dateTimeZone21.getMillisKeepLocal(dateTimeZone24, (long) 10);
        org.joda.time.Interval interval29 = localDate19.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime30 = localDate18.toDateTimeAtMidnight(dateTimeZone21);
        long long34 = dateTimeZone21.convertLocalToUTC(11L, false, 0L);
        org.joda.time.Interval interval35 = localDate15.toInterval(dateTimeZone21);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime44.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property46 = dateTime45.year();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str58 = dateTimeFieldType57.getName();
        org.joda.time.DateTime.Property property59 = dateTime56.property(dateTimeFieldType57);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime56);
        int int61 = dateTime56.getHourOfDay();
        boolean boolean62 = dateTime56.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay63 = dateTime56.toYearMonthDay();
        org.joda.time.DateTime dateTime65 = dateTime56.withYear(34530606);
        boolean boolean66 = dateTime65.isAfterNow();
        org.joda.time.DateTime dateTime68 = dateTime65.minusDays(292278994);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime68.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime71 = dateTime68.withYearOfEra(56362);
        boolean boolean72 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21600000 + "'", int26 == 21600000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-21599989L) + "'", long34 == (-21599989L));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "weekyear" + "'", str58, "weekyear");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTime dateTime16 = property12.setCopy((int) (byte) 10);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime.Property property18 = dateTime16.millisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.withEarlierOffsetAtOverlap();
        boolean boolean22 = dateTime16.isEqual((-21599902L));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate16 = localDate4.minusYears(10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = new java.util.Locale("");
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = new java.util.Locale("");
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale20, locale22, locale23, locale24, locale26, locale28, locale29, locale30, locale32, locale34, locale35, locale36, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet44);
        boolean boolean46 = localDate4.equals((java.lang.Object) strList45);
        org.joda.time.LocalDate localDate48 = localDate4.withCenturyOfEra(13);
        java.util.Date date49 = localDate48.toDate();
        java.time.Instant instant50 = date49.toInstant();
        java.util.Date date51 = java.util.Date.from(instant50);
        java.util.Date date52 = java.util.Date.from(instant50);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Feb 11 00:00:00 UTC 1317");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Fri Feb 11 00:00:00 UTC 1317");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Fri Feb 11 00:00:00 UTC 1317");
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        int int7 = property6.getMinimumValue();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = yearMonth10.getFieldTypes();
        org.joda.time.YearMonth.Property property14 = yearMonth10.year();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = locale15.stripExtensions();
        int int18 = property14.getMaximumTextLength(locale17);
        org.joda.time.DateTimeField dateTimeField19 = property14.getField();
        java.lang.String str20 = property14.getAsString();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = property14.getAsText(locale21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = property6.setCopy("+79:00", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+79:00\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FR" + "'", str16, "FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        calendar3.clear(0);
        calendar3.set((int) (byte) 0, (-1853), 6638, (int) (short) 100, 72048, 32772);
        calendar3.roll(0, 28797);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=138,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=330,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=54,SECOND=12,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate35 = localDate23.minusYears(10);
        boolean boolean36 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate39 = localDate35.withFieldAdded(durationFieldType37, 70);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTime();
        org.joda.time.Chronology chronology50 = dateTime48.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.monthOfYear();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime66.getZone();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        org.joda.time.Chronology chronology70 = chronology50.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField71 = chronology70.clockhourOfHalfday();
        org.joda.time.DurationField durationField72 = chronology70.seconds();
        boolean boolean73 = durationFieldType37.isSupported(chronology70);
        org.joda.time.Chronology chronology74 = chronology70.withUTC();
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology79 = localDate78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.secondOfMinute();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DurationField durationField82 = durationFieldType76.getField(chronology79);
        org.joda.time.DurationField durationField83 = chronology79.millis();
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(315532800002L, chronology79);
        long long86 = chronology70.set((org.joda.time.ReadablePartial) localDate84, (-30997947298523000L));
        org.joda.time.DateTimeField dateTimeField87 = chronology70.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 315517477000L + "'", long86 == 315517477000L);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        long long13 = property12.remainder();
        org.joda.time.DateTime dateTime14 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMillis((-52));
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property19.getDifference(readableInstant21);
        org.joda.time.LocalDate localDate23 = property19.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        boolean boolean32 = localDate23.equals((java.lang.Object) dateTime31);
        java.util.Date date33 = localDate23.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        boolean boolean36 = localDate23.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localDate41.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.LocalDate localDate53 = localDate41.minusYears(10);
        boolean boolean54 = localDate23.isAfter((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.days();
        boolean boolean56 = localDate53.isSupported(durationFieldType55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        java.lang.String str61 = chronology59.toString();
        org.joda.time.DurationField durationField62 = durationFieldType55.getField(chronology59);
        long long66 = chronology59.add((-2228L), (long) 50627, 939);
        org.joda.time.DateTime dateTime67 = dateTime15.withChronology(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 31535997772L + "'", long13 == 31535997772L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 47536525L + "'", long66 == 47536525L);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "inglese (Canada)" + "'", str2, "inglese (Canada)");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572627525,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=47,MILLISECOND=525,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonth1.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        boolean boolean35 = dateTime34.isBeforeNow();
        int int36 = dateTime34.getDayOfYear();
        boolean boolean37 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property38 = dateTime25.minuteOfHour();
        int int39 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime41 = dateTime11.minusWeeks(936);
        org.joda.time.DateTime.Property property42 = dateTime11.yearOfCentury();
        org.joda.time.DateTime dateTime44 = dateTime11.minusSeconds(21597);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 42 + "'", int36 == 42);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(32770, 56406, 67, 8771, 48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8771 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        java.lang.String str3 = localDate1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        long long9 = dateTimeZone4.convertLocalToUTC((-21599986L), false, 1L);
        long long12 = dateTimeZone4.adjustOffset((long) 28, true);
        org.joda.time.DateTime dateTime13 = localDate1.toDateTimeAtCurrentTime(dateTimeZone4);
        org.joda.time.LocalDate.Property property14 = localDate1.dayOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-21599986L) + "'", long9 == (-21599986L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28L + "'", long12 == 28L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "utc" + "'", str2, "utc");
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("years");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setLanguageTag("2022-02-11T15:38:12.218+06:00/2022-02-11T15:38:12.218+06:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.add((long) (byte) 10, (-1));
        int int19 = dateTimeField14.getMaximumValue(34522218L);
        long long22 = dateTimeField14.add((long) 693, (long) 21600000);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate29 = localDate25.minusYears(11);
        int int30 = localDate29.getYear();
        org.joda.time.LocalDate localDate32 = localDate29.plusDays(100);
        org.joda.time.LocalDate.Property property33 = localDate32.weekyear();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate44 = dateTime42.toLocalDate();
        int[] intArray45 = localDate44.getValues();
        int int46 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate32, intArray45);
        long long48 = dateTimeField14.roundHalfEven((long) 1957);
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate.Property property53 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property53.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField56 = property53.getField();
        long long59 = dateTimeField56.addWrapField((long) 2, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale63 = new java.util.Locale("");
        java.lang.String str64 = dateTimeField56.getAsShortText(readablePartial60, 0, locale63);
        java.util.Locale.setDefault(category50, locale63);
        java.util.Locale locale66 = java.util.Locale.getDefault(category50);
        java.lang.String str67 = locale66.getDisplayCountry();
        java.lang.String str68 = dateTimeField14.getAsText((-599392742399878L), locale66);
        java.lang.String str69 = locale66.getDisplayCountry();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31449599990L) + "'", long17 == (-31449599990L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 681630163200000693L + "'", long22 == 681630163200000693L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2011 + "'", int30 == 2011);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 11]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-292275054) + "'", int46 == (-292275054));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-280800000L) + "'", long48 == (-280800000L));
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 315532800002L + "'", long59 == 315532800002L);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-17024" + "'", str68, "-17024");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        java.lang.String str5 = localDate2.toString();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getName(10L);
        java.util.Locale locale15 = new java.util.Locale("70", "hi!");
        java.lang.String str16 = dateTimeZone9.getName((long) '4', locale15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(12L, dateTimeZone9);
        long long20 = dateTimeZone9.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime22 = localDate2.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.LocalDate localDate24 = localDate2.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDate localDate26 = localDate2.plusDays(35435);
        int int27 = localDate2.size();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11" + "'", str5, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals(locale15.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-31445624657L) + "'", long20 == (-31445624657L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval5.toMutableInterval();
        org.joda.time.Duration duration12 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology13 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfHalfday();
        java.lang.String str16 = chronology13.toString();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate10 = dateTime8.toLocalDate();
        org.joda.time.Interval interval11 = localDate10.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone12.getShortName((long) (byte) 10);
        org.joda.time.DateTime dateTime15 = localDate10.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfSecond();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy(3);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        java.lang.String str19 = calendar18.getCalendarType();
        calendar18.set(56165, (-2740), 6);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property25.getDifference(readableInstant27);
        org.joda.time.LocalDate localDate29 = property25.withMaximumValue();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths(32772);
        org.joda.time.LocalDate localDate37 = localDate29.withFields((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTime dateTime38 = localDate29.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property39 = localDate29.yearOfEra();
        int int40 = localDate29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.minutes();
        boolean boolean47 = localDate45.isSupported(durationFieldType46);
        org.joda.time.LocalDate localDate49 = localDate45.minusDays(57);
        org.joda.time.LocalDate localDate51 = localDate45.plusYears((int) (byte) 10);
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        boolean boolean53 = localDate29.isAfter((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.LocalTime localTime54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = localDate51.toDateTime(localTime54, dateTimeZone55);
        org.joda.time.Chronology chronology57 = localDate51.getChronology();
        int[] intArray58 = localDate51.getValues();
        boolean boolean59 = calendar18.before((java.lang.Object) intArray58);
        int int60 = calendar18.getMinimalDaysInFirstWeek();
        calendar18.set(56172, 10, 56268539, (-34), 292275055, (int) (short) 1);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=56172,MONTH=10,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=56268539,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=-34,MINUTE=292275055,SECOND=1,MILLISECOND=837,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2099 + "'", int40 == 2099);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1980, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str31 = dateTimeFieldType30.getName();
        org.joda.time.DateTime.Property property32 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = property32.roundFloorCopy();
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime33.getZone();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology37 = chronology15.withZone(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology15.getDateTimeMillis(34930131L, 64800000, 50400000, 822, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64800000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime.Property property10 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.plusYears(1970);
        long long13 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime7.plusMinutes(99);
        org.joda.time.DateTime.Property property16 = dateTime7.era();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = property18.getDifference(readableInstant20);
        org.joda.time.LocalDate localDate22 = property18.withMaximumValue();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.Interval interval24 = localDate22.toInterval();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str36 = dateTimeFieldType35.getName();
        org.joda.time.DateTime.Property property37 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property37.getFieldType();
        java.lang.String str40 = dateTimeFieldType39.toString();
        int int41 = localDate22.get(dateTimeFieldType39);
        boolean boolean42 = dateTime7.isSupported(dateTimeFieldType39);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone48);
        org.joda.time.DateTime dateTime51 = localDate45.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        org.joda.time.Chronology chronology53 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35027893L + "'", long13 == 35027893L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weekyear" + "'", str36, "weekyear");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2099 + "'", int41 == 2099);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        java.util.Date date5 = new java.util.Date((int) (short) 0, (-1), (-292275054), (int) (byte) 10, (int) 'u');
        java.lang.String str6 = date5.toGMTString();
        int int7 = date5.getDay();
        java.lang.String str8 = date5.toGMTString();
        int int9 = date5.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval10 = new org.joda.time.Interval((java.lang.Object) int9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jun 05 11:57:00 UTC 798307");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "5 Jun 798307 11:57:00 GMT" + "'", str6, "5 Jun 798307 11:57:00 GMT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "5 Jun 798307 11:57:00 GMT" + "'", str8, "5 Jun 798307 11:57:00 GMT");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 796407 + "'", int9 == 796407);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(778, 414088);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 414088");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property1.getFieldType();
        org.joda.time.LocalDate localDate8 = property1.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        org.joda.time.Interval interval11 = localDate8.toInterval(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getMonthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        boolean boolean33 = dateTime32.isBeforeNow();
        int int34 = dateTime32.getDayOfYear();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtMidnight(dateTimeZone42);
        int int44 = dateTime43.getMonthOfYear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime(dateTimeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone53);
        boolean boolean57 = dateTime56.isBeforeNow();
        int int58 = dateTime56.getDayOfYear();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean60 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone63);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.DateTime dateTime68 = localDate65.toDateTimeAtMidnight(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.DateMidnight dateMidnight70 = dateTime68.toDateMidnight();
        java.util.Date date71 = dateMidnight70.toDate();
        date71.setDate((int) (short) 10);
        long long74 = date71.getTime();
        org.joda.time.LocalDate localDate75 = org.joda.time.LocalDate.fromDateFields(date71);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean79 = dateTimeZone78.isFixed();
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone78);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.DateTime dateTime83 = localDate80.toDateTimeAtMidnight(dateTimeZone82);
        java.lang.String str84 = dateTime83.toString();
        org.joda.time.DateMidnight dateMidnight85 = dateTime83.toDateMidnight();
        java.util.Date date86 = dateMidnight85.toDate();
        date86.setDate((int) (short) 10);
        boolean boolean89 = date71.before(date86);
        org.joda.time.LocalDate localDate90 = org.joda.time.LocalDate.fromDateFields(date86);
        org.joda.time.DateTime dateTime91 = dateTime32.withFields((org.joda.time.ReadablePartial) localDate90);
        org.joda.time.Chronology chronology92 = dateTime91.getChronology();
        org.joda.time.DurationField durationField93 = chronology92.weeks();
        org.joda.time.Interval interval94 = interval11.withChronology(chronology92);
        boolean boolean95 = interval94.containsNow();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 42 + "'", int58 == 42);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str69, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sat Jan 10 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 777600000L + "'", long74 == 777600000L);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str84, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sat Jan 10 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        int int12 = property11.get();
        org.joda.time.LocalDate localDate14 = property11.addToCopy(0);
        int int15 = localDate14.size();
        org.joda.time.LocalDate.Property property16 = localDate14.centuryOfEra();
        int int17 = localDate14.getDayOfMonth();
        org.joda.time.LocalDate.Property property18 = localDate14.centuryOfEra();
        int int19 = property18.getLeapAmount();
        org.joda.time.LocalDate localDate20 = property18.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        boolean boolean6 = dateTimeFormatter4.isParser();
        java.util.Locale locale7 = dateTimeFormatter4.getLocale();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillis((long) 32772);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime17.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter4.withChronology(chronology22);
        org.joda.time.Chronology chronology25 = dateTimeFormatter24.getChronolgy();
        org.joda.time.DurationField durationField26 = chronology25.halfdays();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(21600003L, 31535997772L, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfDay();
        org.joda.time.DurationField durationField29 = chronology25.minutes();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.dayOfYear();
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(208814213392000L);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths(32772);
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate12 = localDate8.withFieldAdded(durationFieldType10, 57);
        boolean boolean13 = localDate1.isAfter((org.joda.time.ReadablePartial) localDate8);
        int int14 = localDate8.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 28 + "'", int14 == 28);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate5.size();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder0.build();
        java.util.Date date5 = new java.util.Date((long) 10);
        java.util.Calendar.Builder builder6 = builder0.setInstant(date5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate12 = property9.roundHalfCeilingCopy();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale13);
        int int15 = property9.getMaximumShortTextLength(locale13);
        java.util.Calendar.Builder builder16 = builder6.setLocale(locale13);
        java.util.Calendar.Builder builder20 = builder16.setWeekDate((int) (short) 0, 39, 21597772);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(69, 9, 935);
        java.util.Calendar.Builder builder28 = builder20.setDate((-1783), 34655543, 34628);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder30 = builder28.setCalendarType("DateTimeField[clockhourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: DateTimeField[clockhourOfHalfday]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        java.lang.String str11 = property5.getAsString();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = property5.getAsText(locale12);
        org.joda.time.DurationField durationField14 = property5.getDurationField();
        org.joda.time.DurationField durationField15 = property5.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth17 = property5.setCopy("DateTimeField[minuteOfDay]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[minuteOfDay]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970" + "'", str11, "1970");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays(70);
        org.joda.time.DateTime.Property property17 = dateTime13.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime13.withEra(414088);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 414088 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        int int25 = dateTime20.getHourOfDay();
        boolean boolean26 = dateTime20.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime20.toYearMonthDay();
        org.joda.time.DateTime dateTime29 = dateTime20.withYear(34530606);
        boolean boolean30 = dateTime29.isAfterNow();
        org.joda.time.DateTime.Property property31 = dateTime29.year();
        org.joda.time.LocalDate localDate32 = dateTime29.toLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks((int) (short) 1);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int43 = dateTimeZone41.getOffsetFromLocal((long) 6);
        long long45 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 10);
        org.joda.time.Interval interval46 = localDate36.toInterval(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = localDate35.toDateTimeAtMidnight(dateTimeZone38);
        java.lang.String str48 = dateTimeZone38.toString();
        long long51 = dateTimeZone38.convertLocalToUTC((long) 42, true);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (byte) 100);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean58 = dateTimeZone57.isFixed();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int62 = dateTimeZone60.getOffsetFromLocal((long) 6);
        long long64 = dateTimeZone57.getMillisKeepLocal(dateTimeZone60, (long) 10);
        org.joda.time.Interval interval65 = localDate55.toInterval(dateTimeZone57);
        org.joda.time.DateTime dateTime66 = localDate54.toDateTimeAtMidnight(dateTimeZone57);
        java.lang.String str67 = dateTimeZone57.toString();
        long long69 = dateTimeZone57.nextTransition((long) 0);
        long long71 = dateTimeZone57.previousTransition((long) '4');
        org.joda.time.DateTime dateTime72 = localDate53.toDateTimeAtStartOfDay(dateTimeZone57);
        int int74 = dateTimeZone57.getOffsetFromLocal(9223371988855200000L);
        long long76 = dateTimeZone38.getMillisKeepLocal(dateTimeZone57, (long) (-1));
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean81 = dateTimeZone80.isFixed();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int85 = dateTimeZone83.getOffsetFromLocal((long) 6);
        long long87 = dateTimeZone80.getMillisKeepLocal(dateTimeZone83, (long) 10);
        org.joda.time.Interval interval88 = localDate78.toInterval(dateTimeZone80);
        org.joda.time.DateTime dateTime89 = localDate77.toDateTimeAtMidnight(dateTimeZone80);
        java.lang.String str90 = dateTimeZone80.toString();
        long long92 = dateTimeZone80.nextTransition((long) 0);
        boolean boolean94 = dateTimeZone80.isStandardOffset(31535997772L);
        long long96 = dateTimeZone57.getMillisKeepLocal(dateTimeZone80, 315511200000L);
        org.joda.time.DateMidnight dateMidnight97 = localDate32.toDateMidnight(dateTimeZone57);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 21600000 + "'", int43 == 21600000);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+06:00" + "'", str48, "+06:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-21599958L) + "'", long51 == (-21599958L));
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21600000 + "'", int62 == 21600000);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+06:00" + "'", str67, "+06:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 21600000 + "'", int74 == 21600000);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 21600000 + "'", int85 == 21600000);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10L + "'", long87 == 10L);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+06:00" + "'", str90, "+06:00");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 315511200000L + "'", long96 == 315511200000L);
        org.junit.Assert.assertNotNull(dateMidnight97);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(16);
        org.joda.time.YearMonth yearMonth13 = property5.addWrapFieldToCopy(22);
        org.joda.time.YearMonth yearMonth15 = property5.setCopy((int) (byte) 10);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.withMonthOfYear(8);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.plusMonths((-40176));
        org.joda.time.YearMonth yearMonth21 = yearMonth19.withYear(31);
        int int22 = yearMonth19.getMonthOfYear();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        calendar3.setFirstDayOfWeek(42);
        calendar3.set(13, (int) 'x', 9);
        calendar3.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar3.clear(941);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 941");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=42,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:32 UTC 1970");
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        boolean boolean3 = property1.isLeap();
        org.joda.time.LocalDate localDate4 = property1.withMinimumValue();
        java.util.Date date5 = localDate4.toDate();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonth8.getFieldTypes();
        org.joda.time.YearMonth.Property property12 = yearMonth8.year();
        int int13 = property12.getMinimumValue();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = property12.getAsText(locale14);
        org.joda.time.YearMonth yearMonth16 = property12.getYearMonth();
        org.joda.time.DurationField durationField17 = property12.getRangeDurationField();
        org.joda.time.YearMonth yearMonth19 = property12.addWrapFieldToCopy(18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusMonths(34654295);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDate4.compareTo((org.joda.time.ReadablePartial) yearMonth19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 UTC 2000");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        java.util.Date date3 = new java.util.Date(67, 562, 38);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 08 00:00:00 UTC 2013");
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 32772);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime14.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.era();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = chronology19.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withChronology(chronology19);
        java.io.Writer writer25 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTime dateTime33 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) 6);
        long long44 = dateTimeZone37.getMillisKeepLocal(dateTimeZone40, (long) 10);
        org.joda.time.DateTime dateTime45 = dateTime35.withZone(dateTimeZone40);
        org.joda.time.DateTime.Property property46 = dateTime45.weekOfWeekyear();
        org.joda.time.DateTime dateTime48 = dateTime45.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks((int) '#');
        int int51 = dateTime50.getMinuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime50.minusDays(43);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(writer25, (org.joda.time.ReadableInstant) dateTime53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 21600000 + "'", int42 == 21600000);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) (byte) 10);
        java.util.Date date6 = calendar3.getTime();
        java.util.Date date8 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = localDate13.toDateTimeAtMidnight(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateMidnight dateMidnight18 = dateTime16.toDateMidnight();
        java.util.Date date19 = dateMidnight18.toDate();
        boolean boolean20 = date8.before(date19);
        calendar3.setTime(date19);
        // The following exception was thrown during execution in test generation
        try {
            calendar3.roll(86399999, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str17, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        org.joda.time.DateTime dateTime17 = dateTime13.minusYears(31);
        org.joda.time.DateTime dateTime19 = dateTime13.minusMillis(70);
        long long20 = dateTime19.getMillis();
        int int21 = dateTime19.getYearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1641146399930L + "'", long20 == 1641146399930L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval11.withPeriodAfterStart(readablePeriod12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval13.toPeriod(periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean17 = period15.isSupported(durationFieldType16);
        org.joda.time.YearMonth yearMonth19 = yearMonth7.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 32770);
        org.joda.time.YearMonth yearMonth20 = yearMonth1.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter25.getZone();
        java.util.Locale locale27 = dateTimeFormatter25.getLocale();
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = yearMonth29.toInterval(dateTimeZone30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = yearMonth29.getFieldTypes();
        org.joda.time.YearMonth.Property property33 = yearMonth29.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = yearMonth29.toString(dateTimeFormatter34);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = yearMonth37.toInterval(dateTimeZone38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = yearMonth37.getFieldTypes();
        org.joda.time.YearMonth.Property property41 = yearMonth37.year();
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = yearMonth45.toInterval(dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Interval interval49 = interval47.withPeriodAfterStart(readablePeriod48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval49.toPeriod(periodType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean53 = period51.isSupported(durationFieldType52);
        org.joda.time.YearMonth yearMonth55 = yearMonth43.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 32770);
        org.joda.time.YearMonth yearMonth56 = yearMonth37.minus((org.joda.time.ReadablePeriod) period51);
        boolean boolean57 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology58 = yearMonth56.getChronology();
        org.joda.time.Chronology chronology59 = yearMonth56.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter25.withChronology(chronology59);
        org.joda.time.DurationField durationField61 = chronology59.halfdays();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(0L, 536457600013L, chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.centuryOfEra();
        org.joda.time.YearMonth yearMonth64 = yearMonth1.withChronologyRetainFields(chronology59);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = yearMonth66.toInterval(dateTimeZone67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = yearMonth66.getFieldTypes();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.withYear((int) (short) 100);
        org.joda.time.YearMonth yearMonth73 = yearMonth66.plusMonths((int) '#');
        java.lang.String str75 = yearMonth66.toString("2029-02-11");
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DurationField durationField78 = durationFieldType76.getField(chronology77);
        org.joda.time.YearMonth yearMonth80 = yearMonth66.withFieldAdded(durationFieldType76, 48);
        org.joda.time.YearMonth yearMonth82 = yearMonth1.withFieldAdded(durationFieldType76, 12);
        int int83 = yearMonth1.size();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNull(dateTimeZone26);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01" + "'", str35, "1970-01");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2029-02-11" + "'", str75, "2029-02-11");
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.centuryOfEra();
        boolean boolean41 = dateTimeField40.isLenient();
        int int43 = dateTimeField40.get(0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        int int5 = dateTimeField3.getMinimumValue((long) 'a');
        long long7 = dateTimeField3.roundCeiling(442143330606L);
        java.lang.String str8 = dateTimeField3.toString();
        java.lang.String str10 = dateTimeField3.getAsText((-20081829L));
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 473385600000L + "'", long7 == 473385600000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str8, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "69" + "'", str10, "69");
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        boolean boolean8 = yearMonth1.equals((java.lang.Object) durationFieldType7);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        java.lang.String str17 = period16.toString();
        org.joda.time.YearMonth yearMonth19 = yearMonth1.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 100);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = yearMonth21.toInterval(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Interval interval25 = interval23.withPeriodAfterStart(readablePeriod24);
        org.joda.time.Interval interval27 = interval23.withStartMillis((long) 32772);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.YearMonth yearMonth30 = yearMonth1.withChronologyRetainFields(chronology28);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = yearMonth32.toInterval(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Interval interval36 = interval34.withPeriodAfterStart(readablePeriod35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = interval36.toPeriod(periodType37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        java.util.Date date45 = new java.util.Date((int) (short) 0, (-1), (-292275054), (int) (byte) 10, (int) 'u');
        boolean boolean46 = period38.equals((java.lang.Object) (-292275054));
        org.joda.time.YearMonth yearMonth47 = yearMonth30.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period48 = period38.toPeriod();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals(date45.toString(), "Mon Jun 05 11:57:00 UTC 798307");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        org.joda.time.DateTime.Property property10 = dateTime7.weekOfWeekyear();
        boolean boolean12 = dateTime7.equals((java.lang.Object) "1970-01");
        int int13 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime7.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.LocalDate localDate26 = localDate18.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property27 = localDate18.dayOfMonth();
        org.joda.time.LocalDate localDate28 = property27.withMaximumValue();
        java.lang.String str30 = localDate28.toString("1969-12");
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate37 = localDate35.plusMonths(32772);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate44 = localDate42.plusMonths(32772);
        int int45 = localDate35.compareTo((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDate42.getFieldType(0);
        int int48 = localDate28.get(dateTimeFieldType47);
        boolean boolean49 = dateTime7.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str8, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969-12" + "'", str30, "1969-12");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str7 = date6.toGMTString();
        java.util.Date date14 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        boolean boolean15 = date6.before(date14);
        int int16 = date14.getMinutes();
        date14.setHours(25156829);
        date14.setMonth(28797);
        org.joda.time.YearMonth yearMonth21 = org.joda.time.YearMonth.fromDateFields(date14);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str7, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 26 05:00:01 UTC 7179");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonth21);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getAsShortText();
        int int8 = property5.getMinimumValueOverall();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getDisplayCountry();
        int int11 = property5.getMaximumTextLength(locale9);
        java.lang.String str12 = property5.getAsShortText();
        org.joda.time.YearMonth yearMonth14 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DurationField durationField15 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970" + "'", str7, "1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-292275054) + "'", int8 == (-292275054));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone6);
        org.joda.time.LocalDate localDate11 = localDate3.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate14 = property12.addToCopy(10);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(32770);
        org.joda.time.LocalDate localDate18 = localDate16.plusYears(42);
        org.joda.time.LocalDate localDate20 = localDate18.plusYears(693);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int27 = dateTimeZone25.getOffset((long) 2022);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 32770, dateTimeZone25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime42.getZone();
        long long46 = dateTimeZone25.getMillisKeepLocal(dateTimeZone44, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int53 = dateTimeZone51.getOffsetFromLocal((long) 6);
        long long55 = dateTimeZone48.getMillisKeepLocal(dateTimeZone51, (long) 10);
        long long57 = dateTimeZone25.getMillisKeepLocal(dateTimeZone51, (long) 1970);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        long long60 = dateTimeZone51.previousTransition((long) 86397);
        org.joda.time.Interval interval61 = new org.joda.time.Interval(1000L, 21600003L, dateTimeZone51);
        java.util.TimeZone timeZone62 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime63 = localDate18.toDateTimeAtMidnight(dateTimeZone51);
        int int65 = dateTimeZone51.getOffset(3092601600000L);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(9223311522476380326L, dateTimeZone51);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 21600000 + "'", int27 == 21600000);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 9L + "'", long46 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 21600000 + "'", int53 == 21600000);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1970L + "'", long57 == 1970L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86397L + "'", long60 == 86397L);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21600000 + "'", int65 == 21600000);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("107");
        java.util.Locale.Builder builder6 = builder2.addUnicodeLocaleAttribute("107");
        java.util.Locale locale7 = builder2.build();
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder11 = builder2.setExtension('u', "Deutsch");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("1-Feb-2138 12:00:32 AM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1-Feb-2138 12:00:32 AM [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.YearMonth yearMonth10 = yearMonth6.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = yearMonth10.withChronologyRetainFields(chronology11);
        int int13 = yearMonth1.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth12.minus(readablePeriod14);
        org.joda.time.YearMonth yearMonth17 = yearMonth12.withYear(1);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) '#');
        org.joda.time.YearMonth.Property property20 = yearMonth17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.DurationField durationField22 = property20.getDurationField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval3.withChronology(chronology4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        boolean boolean17 = interval5.contains((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime19 = dateTime15.withWeekyear(2848);
        org.joda.time.DateTime.Property property20 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.plusMinutes(11865377);
        org.joda.time.DateTime dateTime24 = dateTime15.minus((long) 2922750);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(2022);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        int int14 = gregorianCalendar12.getActualMinimum(13);
        gregorianCalendar12.setFirstDayOfWeek((-292275054));
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 32770);
        java.util.Calendar calendar20 = builder19.build();
        boolean boolean22 = calendar20.after((java.lang.Object) 70);
        calendar20.setTimeInMillis((-1L));
        calendar20.set((int) (byte) 1, 17724494, 935, 360240000, 21597);
        java.util.TimeZone timeZone31 = calendar20.getTimeZone();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone31);
        gregorianCalendar12.setTimeZone(timeZone31);
        gregorianCalendar12.set(56360, 21632, 35, 935, (int) 'u');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=17724494,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=935,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=360240000,MINUTE=21597,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572628784,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=48,MILLISECOND=784,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int7 = dateTimeField5.get((long) 'u');
        long long10 = dateTimeField5.addWrapField((long) (short) -1, 1);
        boolean boolean12 = dateTimeField5.isLeap((long) 32772);
        boolean boolean13 = dateTimeField5.isLenient();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 31535999999L + "'", long10 == 31535999999L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale9 = new java.util.Locale("");
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = new java.util.Locale("");
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale3, locale5, locale6, locale7, locale9, locale11, locale12, locale13, locale15, locale17, locale18, locale19, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property30.getDifference(readableInstant32);
        org.joda.time.LocalDate localDate34 = property30.withMaximumValue();
        java.util.Locale locale37 = new java.util.Locale("70", "hi!");
        int int38 = property30.getMaximumShortTextLength(locale37);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = locale39.getCountry();
        java.util.Locale locale41 = locale39.stripExtensions();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar.Builder builder43 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder45 = builder43.setInstant((long) 32770);
        java.util.Calendar calendar46 = builder43.build();
        java.util.Date date48 = new java.util.Date((long) 10);
        java.util.Calendar.Builder builder49 = builder43.setInstant(date48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate.Property property52 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate54 = property52.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate55 = property52.roundHalfCeilingCopy();
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale56);
        int int58 = property52.getMaximumShortTextLength(locale56);
        java.util.Calendar.Builder builder59 = builder49.setLocale(locale56);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = new java.util.Locale("hi!", "2022-02-11", "2022-02-11");
        java.util.Locale[] localeArray65 = new java.util.Locale[] { locale37, locale41, locale42, locale56, locale60, locale64 };
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap69);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FR" + "'", str4, "FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertEquals(locale37.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "FR" + "'", str40, "FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_2022-02-11_2022-02-11");
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withLocale(locale6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate.Property property11 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property11.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        long long17 = dateTimeField14.addWrapField((long) 2, (int) (byte) 10);
        int int19 = dateTimeField14.getMaximumValue((long) (-1));
        long long21 = dateTimeField14.roundCeiling(52L);
        long long23 = dateTimeField14.roundHalfEven(100L);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = locale24.stripExtensions();
        java.lang.String str27 = locale24.getDisplayVariant();
        java.lang.String str28 = locale24.getCountry();
        int int29 = dateTimeField14.getMaximumShortTextLength(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter4.withLocale(locale24);
        java.lang.StringBuffer stringBuffer31 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.minutes();
        boolean boolean38 = localDate36.isSupported(durationFieldType37);
        int int39 = localDate36.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(stringBuffer31, (org.joda.time.ReadablePartial) localDate36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 315532800002L + "'", long17 == 315532800002L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31536000000L + "'", long21 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "FR" + "'", str25, "FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FR" + "'", str28, "FR");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property7.getDifference(readableInstant9);
        org.joda.time.LocalDate localDate11 = property7.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        boolean boolean20 = localDate11.equals((java.lang.Object) dateTime19);
        java.util.Date date21 = localDate11.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        boolean boolean24 = localDate11.isSupported(dateTimeFieldType22);
        java.lang.String str25 = dateTimeFieldType22.toString();
        boolean boolean26 = localDate5.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.LocalDate localDate37 = localDate29.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property38 = localDate29.dayOfMonth();
        org.joda.time.LocalDate localDate39 = property38.withMaximumValue();
        int int40 = localDate39.getEra();
        org.joda.time.LocalDate localDate42 = localDate39.withDayOfYear(100);
        int int43 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.LocalDate.Property property44 = localDate39.weekOfWeekyear();
        java.lang.String str45 = property44.getAsString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyear" + "'", str25, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9" + "'", str45, "9");
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int17 = dateTimeZone15.getOffsetFromLocal((long) 6);
        long long19 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        org.joda.time.Interval interval20 = localDate10.toInterval(dateTimeZone12);
        org.joda.time.DateTime dateTime21 = localDate9.toDateTimeAtMidnight(dateTimeZone12);
        long long25 = dateTimeZone12.convertLocalToUTC(11L, false, 0L);
        java.lang.String str27 = dateTimeZone12.getName((long) 238);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter7.withZone(dateTimeZone12);
        java.lang.Appendable appendable29 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = yearMonth31.toInterval(dateTimeZone32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = yearMonth31.getFieldTypes();
        org.joda.time.YearMonth.Property property35 = yearMonth31.year();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(appendable29, (org.joda.time.ReadablePartial) yearMonth31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21600000 + "'", int17 == 21600000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-21599989L) + "'", long25 == (-21599989L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+06:00" + "'", str27, "+06:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-11T15:40:23.208+06:00");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        java.lang.String str10 = property5.getAsText();
        java.lang.String str11 = property5.getAsShortText();
        org.joda.time.YearMonth yearMonth13 = property5.setCopy(0);
        org.joda.time.DateTimeField dateTimeField14 = property5.getField();
        org.joda.time.YearMonth yearMonth16 = property5.addWrapFieldToCopy(86397772);
        int int17 = yearMonth16.size();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970" + "'", str10, "1970");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970" + "'", str11, "1970");
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime24 = dateTime19.plusMillis(6);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        boolean boolean34 = dateTime33.isBeforeNow();
        int int35 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime33.minusYears(48);
        int int38 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime19.withMillis((long) 86397);
        org.joda.time.DateTime dateTime42 = dateTime40.minusYears(2011);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears(4);
        org.joda.time.DateTime.Property property45 = dateTime42.yearOfCentury();
        org.joda.time.DateTime dateTime46 = property45.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        int int10 = property5.getMinimumValueOverall();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withDefaultYear((int) (short) 1);
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronology();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale17.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withLocale(locale17);
        java.lang.String str20 = locale17.getCountry();
        java.lang.String str21 = property5.getAsText(locale17);
        org.joda.time.DurationField durationField22 = property5.getDurationField();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = yearMonth24.toInterval(dateTimeZone25);
        org.joda.time.YearMonth yearMonth28 = yearMonth24.minusMonths((int) (short) 1);
        org.joda.time.YearMonth.Property property29 = yearMonth24.year();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        int int31 = property29.getMaximumShortTextLength(locale30);
        java.lang.String str32 = property29.getAsShortText();
        org.joda.time.YearMonth yearMonth34 = property29.setCopy((int) (byte) 100);
        org.joda.time.YearMonth yearMonth36 = property29.setCopy(796407);
        org.joda.time.YearMonth yearMonth38 = property29.addWrapFieldToCopy((-113952));
        int int39 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth38);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "IT" + "'", str20, "IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970" + "'", str32, "1970");
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(2022);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) 'u');
        java.lang.String str15 = localDate12.toString();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getName(10L);
        java.util.Locale locale25 = new java.util.Locale("70", "hi!");
        java.lang.String str26 = dateTimeZone19.getName((long) '4', locale25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(12L, dateTimeZone19);
        long long30 = dateTimeZone19.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime32 = localDate12.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.LocalDate localDate34 = localDate12.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDate.Property property35 = localDate34.monthOfYear();
        org.joda.time.DateTime dateTime36 = dateTime7.withFields((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate38 = localDate34.minusYears(2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11" + "'", str15, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+06:00" + "'", str21, "+06:00");
        org.junit.Assert.assertEquals(locale25.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+06:00" + "'", str26, "+06:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-31467224657L) + "'", long30 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        java.lang.String str30 = yearMonth28.toString();
        org.joda.time.YearMonth yearMonth32 = yearMonth28.minusMonths((-1));
        org.joda.time.YearMonth yearMonth34 = yearMonth32.plusYears(1978);
        java.lang.String str36 = yearMonth34.toString("13");
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01" + "'", str30, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "13" + "'", str36, "13");
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str7 = date6.toGMTString();
        date6.setSeconds(10);
        int int10 = date6.getSeconds();
        date6.setMinutes(19);
        date6.setYear(107);
        org.joda.time.YearMonth yearMonth15 = org.joda.time.YearMonth.fromDateFields(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Feb 10 10:19:10 UTC 2007");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str7, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.year();
        int int4 = localDate1.getDayOfMonth();
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate1.toDateTime(localTime5);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTime dateTime17 = localDate14.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(99);
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtMidnight(dateTimeZone28);
        int int30 = dateTime29.getMonthOfYear();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        boolean boolean43 = dateTime42.isBeforeNow();
        int int44 = dateTime42.getDayOfYear();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime47 = dateTime42.plusSeconds(0);
        org.joda.time.DateTime.Property property48 = dateTime47.monthOfYear();
        boolean boolean49 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime47);
        java.lang.String str50 = dateTime21.toString();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = interval54.withChronology(chronology55);
        boolean boolean58 = interval54.isAfter(10L);
        boolean boolean60 = interval54.isAfter(24332133632770L);
        long long61 = interval54.getStartMillis();
        org.joda.time.Duration duration62 = interval54.toDuration();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property64 = localDate63.yearOfCentury();
        org.joda.time.LocalDate localDate65 = property64.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean69 = dateTimeZone68.isFixed();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone68);
        org.joda.time.DateTime dateTime71 = localDate65.toDateTimeAtStartOfDay(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = dateTime71.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str74 = dateTimeFieldType73.getName();
        org.joda.time.DateTime.Property property75 = dateTime72.property(dateTimeFieldType73);
        org.joda.time.DateTime dateTime76 = property75.roundFloorCopy();
        org.joda.time.DateTime dateTime77 = dateTime76.toDateTime();
        org.joda.time.DateTime.Property property78 = dateTime76.dayOfMonth();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime80 = dateTime21.plus((org.joda.time.ReadableDuration) duration62);
        boolean boolean81 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 42 + "'", int44 == 42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1978-04-01T00:00:00.000+06:00" + "'", str50, "1978-04-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "weekyear" + "'", str74, "weekyear");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 61, chronology1);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        long long11 = interval5.getEndMillis();
        org.joda.time.MutableInterval mutableInterval12 = interval5.toMutableInterval();
        org.joda.time.Interval interval13 = interval5.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology14.getDateTimeMillis(360000000, 778, 18032772, 34940889, 56510, (-18994), 56305647);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34940889 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-21600000L) + "'", long11 == (-21600000L));
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        int int36 = dateTimeZone33.getStandardOffset(9L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572629272,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=49,MILLISECOND=272,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21600000 + "'", int36 == 21600000);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        boolean boolean23 = dateTime22.isBeforeNow();
        int int24 = dateTime22.getDayOfYear();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate.Property property28 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property28.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate31 = property28.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate35 = localDate31.withField(dateTimeFieldType33, 13);
        int int36 = dateTime22.get(dateTimeFieldType33);
        java.util.Date date37 = dateTime22.toDate();
        int int38 = date37.getYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 42 + "'", int36 == 42);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Feb 10 18:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 122 + "'", int38 == 122);
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        int int12 = localDate2.getYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        org.joda.time.DateTime dateTime29 = localDate2.toDateTimeAtMidnight(dateTimeZone28);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str34 = dateTimeZone32.getName(10L);
        java.util.Locale locale38 = new java.util.Locale("70", "hi!");
        java.lang.String str39 = dateTimeZone32.getName((long) '4', locale38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(12L, dateTimeZone32);
        long long43 = dateTimeZone32.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone32);
        long long48 = dateTimeZone32.convertLocalToUTC(442143330606L, false, (-1843200000L));
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.DateTime dateTime50 = localDate2.toDateTimeAtCurrentTime(dateTimeZone32);
        java.util.TimeZone timeZone51 = dateTimeZone32.toTimeZone();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone51);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+06:00" + "'", str34, "+06:00");
        org.junit.Assert.assertEquals(locale38.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+06:00" + "'", str39, "+06:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-31467224657L) + "'", long43 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 442121730606L + "'", long48 == 442121730606L);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572629369,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=49,MILLISECOND=369,ZONE_OFFSET=21600000,DST_OFFSET=0]");
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        java.lang.String str5 = localDate2.toString();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getName(10L);
        java.util.Locale locale15 = new java.util.Locale("70", "hi!");
        java.lang.String str16 = dateTimeZone9.getName((long) '4', locale15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(12L, dateTimeZone9);
        long long20 = dateTimeZone9.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime22 = localDate2.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.LocalDate localDate24 = localDate2.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDate.Property property25 = localDate2.yearOfCentury();
        boolean boolean27 = property25.equals((java.lang.Object) "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=39,MONTH=117,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=2848,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=2011,MINUTE=8,SECOND=120,MILLISECOND=907,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11" + "'", str5, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+06:00" + "'", str11, "+06:00");
        org.junit.Assert.assertEquals(locale15.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+06:00" + "'", str16, "+06:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-31467224657L) + "'", long20 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(10L);
        java.util.Locale locale9 = new java.util.Locale("70", "hi!");
        java.lang.String str10 = dateTimeZone3.getName((long) '4', locale9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(12L, dateTimeZone3);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) '#', dateTimeZone3);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillis((long) 32772);
        org.joda.time.DateTime dateTime25 = dateTime23.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime27 = dateTime23.withSecondOfMinute((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.minusHours(32772);
        org.joda.time.DateTime dateTime31 = dateTime29.plusYears(6);
        boolean boolean32 = dateTime12.equals((java.lang.Object) dateTime29);
        org.joda.time.DateTime dateTime34 = dateTime29.minusSeconds(56388);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+06:00" + "'", str5, "+06:00");
        org.junit.Assert.assertEquals(locale9.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+06:00" + "'", str10, "+06:00");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getName(10L);
        org.joda.time.Interval interval13 = localDate4.toInterval(dateTimeZone10);
        org.joda.time.LocalDate localDate15 = localDate4.plusWeeks(28800000);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter18.getZone();
        java.util.Locale locale20 = dateTimeFormatter18.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology23 = dateTimeFormatter18.getChronolgy();
        java.lang.Integer int24 = dateTimeFormatter18.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter18.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = localDate4.toString(dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+06:00" + "'", str12, "+06:00");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(dateTimeParser25);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str12 = dateTimeFieldType11.getName();
        org.joda.time.DateTime.Property property13 = dateTime10.property(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime14.getZone();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        int int19 = dateTimeZone16.getStandardOffset((-1597744752000L));
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) "1", dateTimeZone16);
        long long23 = dateTimeZone16.adjustOffset((-58787100000000L), false);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weekyear" + "'", str12, "weekyear");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21600000 + "'", int19 == 21600000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-58787100000000L) + "'", long23 == (-58787100000000L));
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        int int7 = localDate4.getCenturyOfEra();
        int int8 = localDate4.getWeekyear();
        org.joda.time.LocalDate.Property property9 = localDate4.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = interval13.withChronology(chronology14);
        boolean boolean17 = interval13.isAfter(10L);
        boolean boolean19 = interval13.isAfter(24332133632770L);
        long long20 = interval13.getStartMillis();
        org.joda.time.Duration duration21 = interval13.toDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int38 = dateTimeZone36.getOffsetFromLocal((long) 6);
        long long40 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) 10);
        org.joda.time.DateTime dateTime41 = dateTime31.withZone(dateTimeZone36);
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        org.joda.time.DateTime dateTime44 = dateTime41.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime48 = dateTime46.minusMonths(38);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime46);
        long long50 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21600000 + "'", int38 == 21600000);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 34L + "'", long50 == 34L);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        org.joda.time.DurationField durationField18 = property5.getRangeDurationField();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale20);
        java.lang.String str22 = locale19.getDisplayLanguage(locale20);
        java.lang.String str23 = property5.getAsText(locale19);
        boolean boolean24 = locale19.hasExtensions();
        java.lang.String str25 = locale19.getISO3Country();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CHN" + "'", str25, "CHN");
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        int int34 = dateTimeField32.get((long) 'u');
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = dateTimeField32.getAsText((long) 5, locale36);
        int int38 = property24.getMaximumTextLength(locale36);
        java.util.Calendar.Builder builder39 = builder2.setLocale(locale36);
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 32770);
        java.util.Calendar calendar43 = builder42.build();
        boolean boolean45 = calendar43.after((java.lang.Object) 70);
        calendar43.set(10, 32772, (int) (byte) 1, 22, 0);
        long long52 = calendar43.getTimeInMillis();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime66.getZone();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        calendar43.setTimeZone(timeZone69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.Calendar.Builder builder74 = builder39.setTimeZone(timeZone69);
        java.util.Calendar.Builder builder78 = builder74.setTimeOfDay(1, (int) '#', 14);
        java.util.Calendar.Builder builder82 = builder74.setDate(34654295, 34530, 936);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder84 = builder82.setInstant((long) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24332133632770L + "'", long52 == 24332133632770L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr" + "'", str72, "fr");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572629691,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=49,MILLISECOND=691,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder8 = builder0.setLenient(true);
        java.util.Calendar.Builder builder12 = builder0.setDate(21597772, 21597772, 69);
        java.util.Calendar.Builder builder17 = builder12.setTimeOfDay((int) (byte) 100, (int) 'u', (-113952), 0);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate.Property property20 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property20.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        long long26 = dateTimeField23.addWrapField((long) 2, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale30 = new java.util.Locale("");
        java.lang.String str31 = dateTimeField23.getAsShortText(readablePartial27, 0, locale30);
        java.lang.String str32 = locale30.getLanguage();
        java.lang.String str33 = locale30.getVariant();
        java.util.Calendar.Builder builder34 = builder12.setLocale(locale30);
        java.util.Calendar.Builder builder38 = builder34.setDate(20, 56210, 942);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 315532800002L + "'", long26 == 315532800002L);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("107");
        java.util.Locale.Builder builder6 = builder2.addUnicodeLocaleAttribute("107");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((long) (short) 1, chronology8);
        org.joda.time.Chronology chronology10 = yearMonth9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = dateTimeField11.getAsShortText((long) 12, locale13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = dateTimeField11.getAsShortText((long) 5, locale16);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale18);
        java.util.Locale.Builder builder22 = builder2.setLocale(locale18);
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str19, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(8);
        org.joda.time.DateTime dateTime20 = dateTime16.withMinuteOfHour(16);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        org.joda.time.DateTime dateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.Chronology chronology33 = dateTime31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.monthOfYear();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime22, chronology33);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime36.withDurationAdded((long) 10, 34628);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int39 = dateTimeZone37.getOffsetFromLocal((long) 6);
        long long41 = dateTimeZone34.getMillisKeepLocal(dateTimeZone37, (long) 10);
        org.joda.time.DateTime dateTime42 = dateTime32.withZone(dateTimeZone37);
        org.joda.time.DateTime.Property property43 = dateTime42.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = dateTime42.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property47.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        org.joda.time.DateTime dateTime54 = localDate48.toDateTimeAtStartOfDay(dateTimeZone51);
        boolean boolean55 = dateTime54.isBeforeNow();
        int int56 = dateTime54.getDayOfYear();
        boolean boolean57 = dateTime42.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property58 = dateTime42.millisOfSecond();
        boolean boolean59 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21600000 + "'", int39 == 21600000);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 42 + "'", int56 == 42);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfHalfday();
        long long7 = dateTimeField5.roundCeiling((long) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((long) (short) 1, chronology9);
        org.joda.time.Chronology chronology11 = yearMonth10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyear();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = dateTimeField12.getAsShortText((long) 12, locale14);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = dateTimeField12.getAsShortText((long) 5, locale17);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        int int22 = dateTimeField5.getMaximumShortTextLength(locale19);
        java.lang.String str23 = locale19.getCountry();
        java.util.Set<java.lang.String> strSet24 = locale19.getUnicodeLocaleKeys();
        java.lang.String str25 = locale19.getDisplayLanguage();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3600000L + "'", long7 == 3600000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str20, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CN" + "'", str23, "CN");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u6587" + "'", str25, "\u4e2d\u6587");
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth6.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth6.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = yearMonth6.toString(dateTimeFormatter11);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth14.getFieldTypes();
        org.joda.time.YearMonth.Property property18 = yearMonth14.year();
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth22.toInterval(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval24.withPeriodAfterStart(readablePeriod25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval26.toPeriod(periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean30 = period28.isSupported(durationFieldType29);
        org.joda.time.YearMonth yearMonth32 = yearMonth20.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 32770);
        org.joda.time.YearMonth yearMonth33 = yearMonth14.minus((org.joda.time.ReadablePeriod) period28);
        boolean boolean34 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology35 = yearMonth33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter4.withChronology(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.months();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.halfdayOfDay();
        org.joda.time.DurationField durationField42 = chronology35.halfdays();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth(dateTimeZone44);
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Interval interval49 = yearMonth47.toInterval(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Interval interval51 = interval49.withPeriodAfterStart(readablePeriod50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = yearMonth55.toInterval(dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Interval interval59 = interval57.withPeriodAfterStart(readablePeriod58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval59.toPeriod(periodType60);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean63 = period61.isSupported(durationFieldType62);
        int int64 = period53.get(durationFieldType62);
        org.joda.time.YearMonth yearMonth65 = yearMonth45.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Interval interval71 = yearMonth69.toInterval(dateTimeZone70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Interval interval73 = interval71.withPeriodAfterStart(readablePeriod72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval73.toPeriod(periodType74);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean77 = period75.isSupported(durationFieldType76);
        org.joda.time.YearMonth yearMonth79 = yearMonth67.withPeriodAdded((org.joda.time.ReadablePeriod) period75, 32770);
        org.joda.time.PeriodType periodType80 = period75.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType82 = period75.getFieldType((int) (short) 1);
        int int83 = period53.get(durationFieldType82);
        int int84 = period53.size();
        long long87 = chronology35.add((org.joda.time.ReadablePeriod) period53, (long) 122, 20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval88 = new org.joda.time.Interval(27648000100L, (long) 12, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01" + "'", str12, "1970-01");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 122L + "'", long87 == 122L);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.minuteOfDay();
        int int9 = dateTimeField7.getMinimumValue(12L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("Monday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        int int16 = localDate5.getYearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter19.getZone();
        java.util.Locale locale21 = dateTimeFormatter19.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeFormatter19.getChronolgy();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.LocalDate localDate35 = localDate27.plusMonths((int) (short) 1);
        java.lang.String str36 = localDate35.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTime dateTime44 = localDate41.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate35.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter19.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter46.getZone();
        org.joda.time.DateTime dateTime48 = localDate5.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate5.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2099 + "'", int16 == 2099);
        org.junit.Assert.assertNull(dateTimeZone20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-03-11" + "'", str36, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("1969-12-10T15:43:15.921+06:00", (double) 316);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=316.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths(32772);
        org.joda.time.LocalDate localDate15 = localDate11.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property16 = localDate11.weekyear();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        int int18 = property16.getMaximumTextLength(locale17);
        java.util.Calendar.Builder builder19 = builder6.setLocale(locale17);
        java.util.Calendar.Builder builder21 = builder6.setLenient(true);
        java.util.Calendar.Builder builder25 = builder21.setDate(8, 63397318, 2017);
        java.util.Calendar.Builder builder29 = builder21.setTimeOfDay(9, 69, 2017);
        java.util.Calendar.Builder builder34 = builder21.setTimeOfDay(122, 360000000, 21600, 9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder21.setCalendarType("2022-02-11T15:38:01.085+06:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2022-02-11T15:38:01.085+06:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        java.lang.String str10 = dateTimeZone6.getName(57L);
        long long14 = dateTimeZone6.convertLocalToUTC((long) (byte) 0, false, (long) 1980);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = localDate15.getField(1972);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1972");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+06:00" + "'", str10, "+06:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-21600000L) + "'", long14 == (-21600000L));
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(375, (-18), 91, 28800, 107, 693);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28800 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTime dateTime16 = property12.setCopy((int) (byte) 10);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime.Property property18 = dateTime16.millisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime21 = dateTime16.withWeekyear(21597);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(1056);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime(dateTimeZone23);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        int int16 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.plusDays(6);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(796407);
        java.util.Date date21 = dateTime18.toDate();
        date21.setSeconds(32772);
        java.lang.String str24 = date21.toLocaleString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 18 03:06:12 UTC 117");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0117-2-18 3:06:12" + "'", str24, "0117-2-18 3:06:12");
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(46756829L, dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T18:59:16.829+06:00" + "'", str3, "1970-01-01T18:59:16.829+06:00");
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property14.setCopy(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property14.getFieldType();
        org.joda.time.DateTime dateTime19 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime20 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = interval24.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = dateTime35.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime36.year();
        boolean boolean38 = interval26.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property39 = dateTime36.yearOfCentury();
        org.joda.time.DateTime.Property property40 = dateTime36.hourOfDay();
        java.lang.String str41 = dateTime36.toString();
        org.joda.time.DateTime dateTime44 = dateTime36.withDurationAdded(21599948L, 366);
        boolean boolean45 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-11T00:00:00.000+06:00" + "'", str41, "2022-02-11T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays(70);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 32770);
        java.util.Calendar calendar20 = builder19.build();
        java.util.Calendar.Builder builder24 = builder19.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getCountry();
        java.lang.String str27 = locale25.getDisplayCountry();
        java.util.Calendar.Builder builder28 = builder19.setLocale(locale25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfCentury();
        org.joda.time.LocalDate.Property property46 = localDate44.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property46.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField49 = property46.getField();
        int int51 = dateTimeField49.get((long) 'u');
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = dateTimeField49.getAsText((long) 5, locale53);
        int int55 = property41.getMaximumTextLength(locale53);
        java.util.Calendar.Builder builder56 = builder19.setLocale(locale53);
        java.util.Calendar.Builder builder57 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder59 = builder57.setInstant((long) 32770);
        java.util.Calendar calendar60 = builder59.build();
        boolean boolean62 = calendar60.after((java.lang.Object) 70);
        calendar60.set(10, 32772, (int) (byte) 1, 22, 0);
        long long69 = calendar60.getTimeInMillis();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property71 = localDate70.yearOfCentury();
        org.joda.time.LocalDate localDate72 = property71.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean76 = dateTimeZone75.isFixed();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone75);
        org.joda.time.DateTime dateTime78 = localDate72.toDateTimeAtStartOfDay(dateTimeZone75);
        org.joda.time.DateTime dateTime79 = dateTime78.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str81 = dateTimeFieldType80.getName();
        org.joda.time.DateTime.Property property82 = dateTime79.property(dateTimeFieldType80);
        org.joda.time.DateTime dateTime83 = property82.roundFloorCopy();
        org.joda.time.DateTime.Property property84 = dateTime83.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime83.getZone();
        java.util.TimeZone timeZone86 = dateTimeZone85.toTimeZone();
        calendar60.setTimeZone(timeZone86);
        java.util.Locale locale88 = java.util.Locale.FRENCH;
        java.lang.String str89 = locale88.toLanguageTag();
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(timeZone86, locale88);
        java.util.Calendar.Builder builder91 = builder56.setTimeZone(timeZone86);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        org.joda.time.DateTime dateTime93 = dateTime16.withZoneRetainFields(dateTimeZone92);
        org.joda.time.DateTime.Property property94 = dateTime93.minuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "70" + "'", str54, "70");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 24332133632770L + "'", long69 == 24332133632770L);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "weekyear" + "'", str81, "weekyear");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "fr" + "'", str89, "fr");
        org.junit.Assert.assertNotNull(calendar90);
// flaky:         org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=1644572630277,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=50,MILLISECOND=277,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        int int16 = property15.getMaximumValue();
        org.joda.time.LocalDate localDate17 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate19 = property15.addToCopy(69);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(1980);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("-292275054");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear(31);
        int int13 = dateTimeFormatter10.getDefaultYear();
        boolean boolean14 = dateTimeFormatter10.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDate1.toString(dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillis((long) 32772);
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime11.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj1, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DurationField durationField20 = chronology16.hours();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology16);
        boolean boolean22 = durationFieldType0.isSupported(chronology16);
        java.lang.String str23 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weeks" + "'", str23, "weeks");
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.withCenturyOfEra((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(99, 10);
        org.joda.time.Interval interval12 = localDate8.toInterval(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = interval16.withChronology(chronology17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        boolean boolean30 = interval18.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period31 = interval18.toPeriod();
        java.lang.String str32 = period31.toString();
        int int33 = period31.size();
        org.joda.time.Period period34 = period31.toPeriod();
        org.joda.time.LocalDate localDate36 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 479);
        org.joda.time.Period period37 = period34.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = period34.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.011S" + "'", str32, "PT0.011S");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.millisOfDay();
        long long37 = dateTimeField35.remainder(604800936L);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.Chronology chronology41 = dateTimeFormatter40.getChronology();
        boolean boolean42 = dateTimeFormatter40.isParser();
        java.util.Locale locale43 = dateTimeFormatter40.getLocale();
        java.util.Locale locale47 = new java.util.Locale("zho", "1970-01-01T00:00:00.000+06:00", "Chinese");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter40.withLocale(locale47);
        java.lang.String str49 = locale47.getVariant();
        java.util.Locale locale53 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str54 = locale47.getDisplayVariant(locale53);
        java.lang.String str55 = locale47.getDisplayVariant();
        int int56 = dateTimeField35.getMaximumShortTextLength(locale47);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertEquals(locale47.toString(), "zho_1970-01-01T00:00:00.000+06:00_Chinese");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertEquals(locale53.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese" + "'", str54, "Chinese");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese" + "'", str55, "Chinese");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime.Property property21 = dateTime20.monthOfYear();
        java.lang.String str22 = property21.toString();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        int int25 = dateTimeField23.getMinimumValue(280799640L);
        long long27 = dateTimeField23.roundFloor(24330412800000L);
        long long29 = dateTimeField23.roundFloor(6638L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-03-11" + "'", str11, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[monthOfYear]" + "'", str22, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 24330391200000L + "'", long27 == 24330391200000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-21600000L) + "'", long29 == (-21600000L));
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        calendar3.setLenient(false);
        java.util.TimeZone timeZone7 = calendar3.getTimeZone();
        calendar3.set((-456819), 4140, 36, 360000000, 772);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar3.getMinimum((-824033));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -824033");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-456819,MONTH=4140,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=36,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=360000000,MINUTE=772,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str5 = property2.getAsString();
        org.joda.time.LocalDate localDate6 = property2.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        boolean boolean13 = localDate11.isSupported(durationFieldType12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        boolean boolean24 = dateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = interval28.withChronology(chronology29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime40.year();
        boolean boolean42 = interval30.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period43 = interval30.toPeriod();
        org.joda.time.DateTime dateTime45 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 360240000);
        org.joda.time.LocalDate localDate46 = localDate11.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.LocalDate localDate47 = localDate6.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology48 = localDate6.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.halfdayOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.eras();
        boolean boolean8 = yearMonth1.equals((java.lang.Object) durationFieldType7);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        java.lang.String str17 = period16.toString();
        org.joda.time.YearMonth yearMonth19 = yearMonth1.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 100);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = yearMonth21.toInterval(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Interval interval25 = interval23.withPeriodAfterStart(readablePeriod24);
        org.joda.time.Interval interval27 = interval23.withStartMillis((long) 32772);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.YearMonth yearMonth30 = yearMonth1.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = chronology28.weeks();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        java.lang.Object obj1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField15 = chronology12.millis();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj1, chronology12);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 42, chronology12);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 32772);
        int int20 = localDate19.getDayOfYear();
        org.joda.time.LocalDate.Property property21 = localDate19.year();
        int int22 = localDate19.getDayOfMonth();
        org.joda.time.LocalDate localDate24 = localDate19.withCenturyOfEra(7);
        int[] intArray26 = chronology12.get((org.joda.time.ReadablePartial) localDate24, (long) 2000);
        org.joda.time.DurationField durationField27 = chronology12.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology12.secondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.monthOfYear();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime42.getZone();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.Chronology chronology46 = chronology26.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfHalfday();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfDay();
        long long53 = chronology46.add((long) 42, (long) 39, 1970);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.weekyearOfCentury();
        org.joda.time.DateTime dateTime55 = dateTime15.withChronology(chronology46);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime.Property property57 = dateTime55.secondOfDay();
        long long58 = property57.remainder();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone61);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTime dateTime66 = localDate63.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean71 = dateTimeZone70.isFixed();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int75 = dateTimeZone73.getOffsetFromLocal((long) 6);
        long long77 = dateTimeZone70.getMillisKeepLocal(dateTimeZone73, (long) 10);
        org.joda.time.DateTime dateTime78 = dateTime68.withZone(dateTimeZone73);
        org.joda.time.DateTime.Property property79 = dateTime78.weekOfWeekyear();
        org.joda.time.DateTime.Property property80 = dateTime78.weekOfWeekyear();
        org.joda.time.DateTime dateTime82 = dateTime78.withYear(56182);
        long long83 = property57.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 76872L + "'", long53 == 76872L);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-9223372016892000000L) + "'", long56 == (-9223372016892000000L));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 21600000 + "'", int75 == 21600000);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-9223372016892032L) + "'", long83 == (-9223372016892032L));
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        int int18 = dateTime16.getYear();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.minusHours(43);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2099 + "'", int18 == 2099);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime.Property property10 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.plusYears(1970);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTime(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology15.getDateTimeMillis((long) 64, (-1783), 56172, 2922789, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1783 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str7 = date6.toGMTString();
        java.util.Date date14 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        boolean boolean15 = date6.before(date14);
        int int16 = date14.getMinutes();
        int int17 = date14.getTimezoneOffset();
        long long18 = date14.getTime();
        java.util.Date date22 = new java.util.Date(14, 292278994, 292278993);
        int int23 = date22.getDay();
        boolean boolean24 = date14.before(date22);
        int int25 = date14.getDate();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str7, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertEquals(date14.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1889963999000L) + "'", long18 == (-1889963999000L));
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jul 16 00:00:00 UTC 25158729");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (short) 100);
        org.joda.time.YearMonth yearMonth8 = yearMonth1.plusMonths((int) '#');
        java.lang.String str10 = yearMonth1.toString("2029-02-11");
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DurationField durationField13 = durationFieldType11.getField(chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth1.withFieldAdded(durationFieldType11, 48);
        org.joda.time.YearMonth.Property property16 = yearMonth1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        long long20 = dateTimeField17.getDifferenceAsLong(131L, 327846187000L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2029-02-11" + "'", str10, "2029-02-11");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-124L) + "'", long20 == (-124L));
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.hourOfHalfday();
        java.lang.String str20 = chronology15.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology15.getDateTimeMillis((long) (-46800000), 9, 21597772, 18, 18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21597772 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+06:00]" + "'", str20, "ISOChronology[+06:00]");
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property23.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate26 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDate26.getFields();
        org.joda.time.DateTime dateTime28 = dateTime20.withFields((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        int int32 = localDate31.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str34 = dateTimeFieldType33.getName();
        int int35 = localDate31.get(dateTimeFieldType33);
        boolean boolean36 = localDate26.isSupported(dateTimeFieldType33);
        int int37 = localDate26.size();
        org.joda.time.DateTime dateTime38 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate39 = dateTime38.toLocalDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-03-11" + "'", str11, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        int int7 = property5.getMinimumValueOverall();
        int int8 = property5.get();
        java.lang.String str9 = property5.getAsText();
        org.joda.time.YearMonth yearMonth11 = property5.addWrapFieldToCopy((int) 'u');
        java.lang.String str12 = property5.getAsText();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-292275054) + "'", int7 == (-292275054));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setWeekDate((int) (short) 0, 32772, (-292275054));
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder2.setLocale(locale8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        int int34 = dateTimeField32.get((long) 'u');
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = dateTimeField32.getAsText((long) 5, locale36);
        int int38 = property24.getMaximumTextLength(locale36);
        java.util.Calendar.Builder builder39 = builder2.setLocale(locale36);
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 32770);
        java.util.Calendar calendar43 = builder42.build();
        boolean boolean45 = calendar43.after((java.lang.Object) 70);
        calendar43.set(10, 32772, (int) (byte) 1, 22, 0);
        long long52 = calendar43.getTimeInMillis();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime66.getZone();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        calendar43.setTimeZone(timeZone69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.Calendar.Builder builder74 = builder39.setTimeZone(timeZone69);
        java.util.Calendar.Builder builder78 = builder74.setTimeOfDay(1, (int) '#', 14);
        java.util.Calendar.Builder builder82 = builder74.setDate(34654295, 34530, 936);
        java.util.Calendar.Builder builder86 = builder74.setTimeOfDay(25156829, 15, 21601100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24332133632770L + "'", long52 == 24332133632770L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr" + "'", str72, "fr");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572630989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=50,MILLISECOND=989,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getCountry();
        int int16 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str17 = property5.getAsShortText(locale14);
        org.joda.time.DurationField durationField18 = property5.getRangeDurationField();
        org.joda.time.DurationField durationField19 = property5.getDurationField();
        int int20 = property5.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth22 = property5.setCopy((int) 'u');
        org.joda.time.YearMonth yearMonth24 = yearMonth22.plusYears(86399);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = yearMonth24.getField(1964);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1964");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-292275054) + "'", int20 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime20.withMinuteOfHour(19);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        org.joda.time.DateTime dateTime45 = property41.addToCopy(5);
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = interval51.withChronology(chronology52);
        org.joda.time.Duration duration54 = interval51.toDuration();
        org.joda.time.DateTime dateTime55 = dateTime45.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime56 = dateTime28.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour(57);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(13);
        org.joda.time.DateTime dateTime61 = dateTime58.withZone(dateTimeZone60);
        int int62 = dateTime58.getHourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate2.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = property12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime26.toYearMonthDay();
        org.joda.time.DateTime dateTime31 = dateTime26.withYear(479);
        int int32 = dateTime31.getEra();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(13);
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime(dateTimeZone34);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 100);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) 6);
        long long20 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.Interval interval21 = localDate11.toInterval(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = localDate10.toDateTimeAtMidnight(dateTimeZone13);
        java.lang.String str23 = dateTimeZone13.toString();
        long long25 = dateTimeZone13.nextTransition((long) 0);
        long long27 = dateTimeZone13.previousTransition((long) '4');
        org.joda.time.DateTime dateTime28 = localDate9.toDateTimeAtStartOfDay(dateTimeZone13);
        int int30 = dateTimeZone13.getOffsetFromLocal(9223371988855200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter7.withZoneUTC();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21600000 + "'", int18 == 21600000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+06:00" + "'", str23, "+06:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21600000 + "'", int30 == 21600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        org.joda.time.LocalDate localDate11 = localDate4.withCenturyOfEra(42);
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.LocalDate localDate14 = property12.addWrapFieldToCopy(56172);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime24.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.DateTime.Property property28 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        long long33 = dateTimeField30.add((long) (byte) 10, (-1));
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        int int37 = localDate36.getWeekyear();
        java.lang.String str38 = localDate36.toString();
        org.joda.time.LocalTime localTime39 = null;
        org.joda.time.DateTime dateTime40 = localDate36.toDateTime(localTime39);
        java.util.Locale locale43 = new java.util.Locale("");
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfCentury();
        org.joda.time.LocalDate.Property property46 = localDate44.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property46.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField49 = property46.getField();
        int int51 = dateTimeField49.get((long) 'u');
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = dateTimeField49.getAsText((long) 5, locale53);
        java.lang.String str55 = locale43.getDisplayVariant(locale53);
        java.lang.String str56 = locale53.getDisplayLanguage();
        java.lang.String str57 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDate36, (int) (byte) 100, locale53);
        java.lang.String str58 = locale15.getDisplayLanguage(locale53);
        int int59 = property12.getMaximumTextLength(locale15);
        java.lang.String str60 = locale15.getISO3Country();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-31449599990L) + "'", long33 == (-31449599990L));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11" + "'", str38, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "70" + "'", str54, "70");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587" + "'", str56, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "100" + "'", str57, "100");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property1.getField();
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder7.setInstant((long) 32770);
        java.util.Calendar calendar10 = builder9.build();
        boolean boolean12 = calendar10.after((java.lang.Object) 70);
        calendar10.set(10, 32772, (int) (byte) 1, 22, 0);
        calendar10.roll(0, false);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields(calendar10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDate22.getFieldTypes();
        java.util.Locale locale27 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale30 = new java.util.Locale("");
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate.Property property33 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property33.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField36 = property33.getField();
        int int38 = dateTimeField36.get((long) 'u');
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.lang.String str41 = dateTimeField36.getAsText((long) 5, locale40);
        java.lang.String str42 = locale30.getDisplayVariant(locale40);
        java.lang.String str43 = locale40.getDisplayLanguage();
        java.lang.String str44 = locale27.getDisplayName(locale40);
        java.lang.String str45 = locale40.toLanguageTag();
        java.lang.String str46 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate22, locale40);
        java.lang.String str47 = locale40.getISO3Country();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-148633495167230,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertEquals(locale27.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12" + "'", str28, "1969-12");
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 70 + "'", int38 == 70);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "70" + "'", str41, "70");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587" + "'", str43, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekofweekyear (1969-12)" + "'", str44, "weekofweekyear (1969-12)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh-TW" + "'", str45, "zh-TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "41" + "'", str46, "41");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "TWN" + "'", str47, "TWN");
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfMinute();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField7 = durationFieldType1.getField(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(315532800002L, chronology4);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfYear();
        int int11 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate.Property property12 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate14 = localDate9.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(238);
        org.joda.time.LocalDate localDate18 = localDate16.plusYears(56522945);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        int int5 = date4.getMonth();
        int int6 = date4.getDate();
        date4.setDate(1978);
        date4.setMonth(0);
        java.util.Date date12 = new java.util.Date((long) (short) 1);
        int int13 = date12.getSeconds();
        int int14 = date12.getSeconds();
        org.joda.time.YearMonth yearMonth15 = org.joda.time.YearMonth.fromDateFields(date12);
        java.time.Instant instant16 = date12.toInstant();
        date12.setYear(52);
        date12.setMinutes(56170);
        boolean boolean21 = date4.before(date12);
        int int22 = date12.getDate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Jun 01 00:00:32 UTC 1975");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Feb 09 00:10:00 UTC 1952");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.YearMonth yearMonth11 = property5.setCopy(16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth11.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = yearMonth11.getValue(86395544);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86395544");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        org.joda.time.DateTime dateTime11 = interval5.getEnd();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 10);
        int int14 = dateTime13.getSecondOfDay();
        boolean boolean15 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMonths(1667);
        org.joda.time.DateTime.Property property18 = dateTime13.minuteOfHour();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21600 + "'", int14 == 21600);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(42, (-1), 14);
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(19017, (-292277022), 1439, 16);
        java.util.Date date12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder0.setInstant(date12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(3087712571000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth3 = yearMonth1.withMonthOfYear(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth6.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth6.year();
        int int11 = property10.getMinimumValue();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale12.getDisplayVariant(locale14);
        java.util.Locale.Builder builder16 = builder0.setLocale(locale14);
        java.util.Locale locale17 = builder0.build();
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet18);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTime dateTime14 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) 32772);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime20 = dateTime16.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter3.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter3.withPivotYear(57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.parse("P1D", dateTimeFormatter27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis(4);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = localDate25.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.DateTime.Property property36 = dateTime35.year();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.DateTime.Property property50 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        org.joda.time.DateTime dateTime54 = property50.addToCopy(5);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = interval60.withChronology(chronology61);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.DateTime dateTime64 = dateTime54.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval65 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime66 = dateTime16.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime68 = dateTime16.plusYears(21597772);
        org.joda.time.DateTime dateTime70 = dateTime16.plusMonths(59);
        org.joda.time.DateTime dateTime71 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime72 = dateTime16.toDateTimeISO();
        org.joda.time.format.DateTimePrinter dateTimePrinter73 = null;
        org.joda.time.format.DateTimeParser dateTimeParser74 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter73, dateTimeParser74);
        org.joda.time.Chronology chronology76 = dateTimeFormatter75.getChronology();
        boolean boolean77 = dateTimeFormatter75.isParser();
        java.util.Locale locale78 = dateTimeFormatter75.getLocale();
        org.joda.time.Chronology chronology79 = dateTimeFormatter75.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTime16.toString(dateTimeFormatter75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyear" + "'", str49, "weekyear");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(locale78);
        org.junit.Assert.assertNull(chronology79);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField23 = chronology15.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime9.era();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime9.toDateTime(chronology31);
        java.util.Date date33 = dateTime32.toDate();
        org.joda.time.DateTime dateTime35 = dateTime32.minusHours((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime35.centuryOfEra();
        boolean boolean38 = dateTime35.isBefore((long) 35435);
        boolean boolean39 = dateTime35.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate22.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.getName();
        org.joda.time.DateTime.Property property45 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime46.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTime dateTime56 = localDate53.toDateTimeAtMidnight(dateTimeZone55);
        int int57 = dateTime56.getMonthOfYear();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime(dateTimeZone59);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        long long63 = dateTimeZone48.getMillisKeepLocal(dateTimeZone59, (long) 7);
        org.joda.time.DateTime dateTime64 = dateTime32.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime11.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime67 = dateTime65.plusWeeks(34940889);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 7L + "'", long63 == 7L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property1.getField();
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder7.setInstant((long) 32770);
        java.util.Calendar calendar10 = builder9.build();
        boolean boolean12 = calendar10.after((java.lang.Object) 70);
        calendar10.set(10, 32772, (int) (byte) 1, 22, 0);
        calendar10.roll(0, false);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields(calendar10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDate22.getFieldTypes();
        java.util.Locale locale27 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale30 = new java.util.Locale("");
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate.Property property33 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property33.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField36 = property33.getField();
        int int38 = dateTimeField36.get((long) 'u');
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.lang.String str41 = dateTimeField36.getAsText((long) 5, locale40);
        java.lang.String str42 = locale30.getDisplayVariant(locale40);
        java.lang.String str43 = locale40.getDisplayLanguage();
        java.lang.String str44 = locale27.getDisplayName(locale40);
        java.lang.String str45 = locale40.toLanguageTag();
        java.lang.String str46 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate22, locale40);
        int int48 = dateTimeField6.getLeapAmount(625L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-148633495167230,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertEquals(locale27.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12" + "'", str28, "1969-12");
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 70 + "'", int38 == 70);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "70" + "'", str41, "70");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese" + "'", str43, "Chinese");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekofweekyear (1969-12)" + "'", str44, "weekofweekyear (1969-12)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh-TW" + "'", str45, "zh-TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "41" + "'", str46, "41");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.setLanguage("TWN");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval9 = new org.joda.time.Interval((java.lang.Object) builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Locale$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone15);
        java.lang.String str17 = localDate16.toString();
        int int18 = localDate16.getYearOfCentury();
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = localDate24.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int36 = dateTimeZone34.getOffsetFromLocal((long) 6);
        long long38 = dateTimeZone31.getMillisKeepLocal(dateTimeZone34, (long) 10);
        org.joda.time.DateTime dateTime39 = dateTime29.withZone(dateTimeZone34);
        org.joda.time.DateTime.Property property40 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime42 = property40.addToCopy((long) 935);
        int int43 = property19.compareTo((org.joda.time.ReadableInstant) dateTime42);
        int int44 = property19.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11" + "'", str17, "2022-02-11");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21600000 + "'", int36 == 21600000);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonth8.getFieldTypes();
        org.joda.time.YearMonth.Property property12 = yearMonth8.year();
        java.lang.String str13 = property12.toString();
        java.lang.String str14 = property12.getName();
        java.lang.String str15 = property12.getAsText();
        org.joda.time.DateTimeField dateTimeField16 = property12.getField();
        org.joda.time.YearMonth yearMonth17 = property12.getYearMonth();
        org.joda.time.Chronology chronology18 = yearMonth17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(50616, 19017, 1969, 21601100, 35312, 0, 98, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21601100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[year]" + "'", str13, "Property[year]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(32772);
        org.joda.time.LocalDate localDate13 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property15 = localDate5.yearOfEra();
        java.lang.String str16 = property15.toString();
        org.joda.time.LocalDate localDate17 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate18 = property15.getLocalDate();
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        long long20 = property15.remainder();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3542400000L + "'", long20 == 3542400000L);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        java.util.Date date1 = new java.util.Date((-1886400000L));
        java.util.Date date8 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.lang.String str9 = date8.toGMTString();
        java.util.Date date16 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        boolean boolean17 = date8.before(date16);
        int int18 = date16.getMinutes();
        date16.setHours(25156829);
        date16.setDate(2017);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate29 = localDate27.plusMonths(32772);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths(32772);
        int int37 = localDate27.compareTo((org.joda.time.ReadablePartial) localDate34);
        java.util.Date date38 = localDate34.toDate();
        boolean boolean39 = date16.before(date38);
        int int40 = date1.compareTo(date38);
        org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 10 04:00:00 UTC 1969");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10 Feb 1910 10:00:01 GMT" + "'", str9, "10 Feb 1910 10:00:01 GMT");
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jun 25 05:00:01 UTC 4785");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Wed Feb 11 00:00:00 UTC 117");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("kor");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        org.joda.time.YearMonth yearMonth11 = property5.addToCopy(4);
        org.joda.time.YearMonth yearMonth13 = property5.setCopy(21632);
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = yearMonth15.toInterval(dateTimeZone16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = yearMonth15.getFieldTypes();
        org.joda.time.YearMonth.Property property19 = yearMonth15.year();
        java.lang.String str20 = property19.toString();
        org.joda.time.YearMonth yearMonth21 = property19.getYearMonth();
        org.joda.time.YearMonth yearMonth23 = property19.setCopy(2022);
        org.joda.time.YearMonth yearMonth25 = property19.setCopy(2);
        org.joda.time.YearMonth yearMonth26 = property19.getYearMonth();
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = yearMonth28.toInterval(dateTimeZone29);
        org.joda.time.YearMonth yearMonth32 = yearMonth28.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = yearMonth32.withChronologyRetainFields(chronology33);
        int int35 = yearMonth32.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        boolean boolean37 = yearMonth32.isSupported(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth26.withField(dateTimeFieldType36, (int) (short) -1);
        java.lang.String str40 = dateTimeFieldType36.toString();
        int int41 = yearMonth13.get(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate43 = yearMonth13.toLocalDate(35435);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35435 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "year" + "'", str40, "year");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 21632 + "'", int41 == 21632);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths(99);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getMonthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        boolean boolean33 = dateTime32.isBeforeNow();
        int int34 = dateTime32.getDayOfYear();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.plusSeconds(0);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        boolean boolean39 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean41 = dateTime37.isBefore((long) 86397);
        org.joda.time.DateTime dateTime43 = dateTime37.minusDays(17);
        org.joda.time.DateTime dateTime45 = dateTime37.minusHours((int) (byte) 100);
        java.lang.String str47 = dateTime45.toString("-9114-02-11");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-9114-02-11" + "'", str47, "-9114-02-11");
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate22.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.getName();
        org.joda.time.DateTime.Property property45 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime46.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTime dateTime56 = localDate53.toDateTimeAtMidnight(dateTimeZone55);
        int int57 = dateTime56.getMonthOfYear();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime(dateTimeZone59);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        long long63 = dateTimeZone48.getMillisKeepLocal(dateTimeZone59, (long) 7);
        org.joda.time.DateTime dateTime64 = dateTime32.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime11.toDateTime(dateTimeZone59);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone59);
        org.joda.time.LocalDate localDate68 = localDate66.plusWeeks(365);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean74 = dateTimeZone73.isFixed();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone73);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.DateTime dateTime78 = localDate75.toDateTimeAtMidnight(dateTimeZone77);
        int int79 = dateTime78.getMonthOfYear();
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        org.joda.time.DateTime dateTime82 = dateTime78.toDateTime(dateTimeZone81);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone81);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone81);
        java.lang.String str86 = dateTimeZone81.getShortName((long) 2022);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) 98, (long) 2848, dateTimeZone81);
        org.joda.time.DateTime dateTime88 = localDate68.toDateTimeAtCurrentTime(dateTimeZone81);
        long long91 = dateTimeZone81.adjustOffset((long) 375, false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 7L + "'", long63 == 7L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+06:00" + "'", str86, "+06:00");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 375L + "'", long91 == 375L);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        long long19 = dateTimeField17.roundHalfEven((-1889963999000L));
        int int21 = dateTimeField17.getMinimumValue((long) 4140);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1893477600000L) + "'", long19 == (-1893477600000L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        int int23 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime26 = property24.addWrapFieldToCopy((-292275054));
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(292278994);
        java.lang.String str29 = dateTime26.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-11T18:00:00.000+06:00" + "'", str29, "2022-02-11T18:00:00.000+06:00");
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getWeekOfWeekyear();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getName(10L);
        java.util.Locale locale11 = new java.util.Locale("70", "hi!");
        java.lang.String str12 = dateTimeZone5.getName((long) '4', locale11);
        org.joda.time.DateTime dateTime13 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        long long16 = dateTimeZone5.adjustOffset(86377L, false);
        java.lang.String str17 = dateTimeZone5.getID();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+06:00" + "'", str7, "+06:00");
        org.junit.Assert.assertEquals(locale11.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+06:00" + "'", str12, "+06:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86377L + "'", long16 == 86377L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+06:00" + "'", str17, "+06:00");
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime14 = property12.addToCopy((-292275054));
        org.joda.time.DateTime dateTime16 = property12.addToCopy(11865377);
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded((-21599978L), 3);
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        int int15 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate17 = localDate4.minusDays(131);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        int int21 = dateTimeField19.getMaximumValue(536457600000L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        int int5 = property1.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property1.getFieldType();
        org.joda.time.LocalDate localDate8 = property1.roundHalfEvenCopy();
        java.lang.String str9 = property1.getName();
        org.joda.time.LocalDate localDate10 = property1.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 32772);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = interval28.withChronology(chronology29);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.DateTime dateTime32 = dateTime24.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate.Property property35 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property35.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str38 = property35.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property35.getFieldType();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        boolean boolean41 = dateTime24.isSupported(dateTimeFieldType39);
        int int42 = localDate10.get(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = localDate10.withDayOfMonth(1978);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1978 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfCentury" + "'", str9, "yearOfCentury");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "22" + "'", str38, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.setTimeInMillis((-1L));
        calendar3.set((int) (byte) 1, 17724494, 935, 360240000, 21597);
        java.lang.String str14 = calendar3.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=17724494,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=935,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=360240000,MINUTE=21597,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=17724494,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=935,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=360240000,MINUTE=21597,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str14, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=17724494,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=935,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=360240000,MINUTE=21597,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth5.withChronologyRetainFields(chronology6);
        int int8 = yearMonth5.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = yearMonth5.getField(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        int int27 = property24.getMaximumValueOverall();
        org.joda.time.DateTime dateTime28 = property24.roundHalfEvenCopy();
        int int29 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate40 = dateTime38.toLocalDate();
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTimeISO();
        int int42 = dateTime41.getMonthOfYear();
        int int43 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property44 = dateTime28.dayOfMonth();
        org.joda.time.DateTime dateTime45 = property44.roundFloorCopy();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property47.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone51);
        org.joda.time.DateTime dateTime54 = localDate48.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = dateTime54.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str57 = dateTimeFieldType56.getName();
        org.joda.time.DateTime.Property property58 = dateTime55.property(dateTimeFieldType56);
        org.joda.time.Interval interval59 = property58.toInterval();
        org.joda.time.DateTimeField dateTimeField60 = property58.getField();
        org.joda.time.DateTime dateTime62 = property58.addToCopy(5);
        org.joda.time.DateTime dateTime64 = dateTime62.withWeekyear(10);
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekyear((-1853));
        int int67 = property44.getDifference((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "weekyear" + "'", str57, "weekyear");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 734828 + "'", int67 == 734828);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        int int1 = yearMonth0.getYear();
        int int2 = yearMonth0.getYear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = new java.util.Locale("31 Dec 1969 18:00:00 GMT");
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 32772);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime14.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property19 = dateTime14.monthOfYear();
        org.joda.time.DateTime dateTime21 = dateTime14.withDayOfMonth(3);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int38 = dateTimeZone36.getOffsetFromLocal((long) 6);
        long long40 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) 10);
        org.joda.time.DateTime dateTime41 = dateTime31.withZone(dateTimeZone36);
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        org.joda.time.DateTime dateTime44 = dateTime41.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtStartOfDay(dateTimeZone50);
        boolean boolean54 = dateTime53.isBeforeNow();
        int int55 = dateTime53.getDayOfYear();
        boolean boolean56 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean57 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property58 = dateTime41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now(dateTimeZone61);
        java.util.Locale locale65 = new java.util.Locale("yearOfCentury");
        java.lang.String str66 = locale65.getVariant();
        java.lang.String str67 = dateTimeField59.getAsShortText((org.joda.time.ReadablePartial) localDate63, locale65);
        java.lang.String str68 = locale4.getDisplayVariant(locale65);
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale65.getDisplayVariant(locale69);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale2.toString(), "31 dec 1969 18:00:00 gmt");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "31 dec 1969 18:00:00 gmt");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21600000 + "'", int38 == 21600000);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 42 + "'", int55 == 42);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertEquals(locale65.toString(), "yearofcentury");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "42" + "'", str67, "42");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getWeekyear();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime5);
        org.joda.time.DateTime.Property property7 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) 6);
        long long17 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, (long) 10);
        long long19 = dateTimeZone13.nextTransition((long) 'u');
        java.lang.String str20 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime21 = dateTime8.withZone(dateTimeZone13);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate24.toDateTimeAtStartOfDay(dateTimeZone27);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale31.getVariant();
        java.util.Calendar calendar33 = dateTime30.toCalendar(locale31);
        long long34 = dateTime30.getMillis();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = interval38.withChronology(chronology39);
        org.joda.time.Duration duration41 = interval38.toDuration();
        org.joda.time.DateTime dateTime42 = dateTime30.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime43 = dateTime21.plus((org.joda.time.ReadableDuration) duration41);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21600000 + "'", int15 == 21600000);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 117L + "'", long19 == 117L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+06:00" + "'", str20, "+06:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644516000000L + "'", long34 == 1644516000000L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 6);
        long long10 = dateTimeZone3.getMillisKeepLocal(dateTimeZone6, (long) 10);
        org.joda.time.Interval interval11 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtMidnight(dateTimeZone3);
        java.lang.String str13 = dateTimeZone3.toString();
        long long15 = dateTimeZone3.nextTransition((long) 0);
        long long17 = dateTimeZone3.previousTransition((long) '4');
        int int19 = dateTimeZone3.getOffsetFromLocal((long) 42);
        long long22 = dateTimeZone3.adjustOffset((long) 56429, false);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21600000 + "'", int8 == 21600000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+06:00" + "'", str13, "+06:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21600000 + "'", int19 == 21600000);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 56429L + "'", long22 == 56429L);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        int int3 = localDate2.getWeekyear();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate.Property property5 = localDate2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtMidnight(dateTimeZone12);
        int int14 = dateTime13.getMonthOfYear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        boolean boolean27 = dateTime26.isBeforeNow();
        int int28 = dateTime26.getDayOfYear();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime26);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = locale30.getCountry();
        java.util.Locale locale32 = locale30.stripExtensions();
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.lang.String str34 = locale30.getScript();
        java.util.Calendar calendar35 = dateTime26.toCalendar(locale30);
        boolean boolean36 = localDate2.equals((java.lang.Object) calendar35);
        org.joda.time.DateMidnight dateMidnight37 = localDate2.toDateMidnight();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 42 + "'", int28 == 42);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FR" + "'", str31, "FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = interval17.withChronology(chronology18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime29.year();
        boolean boolean31 = interval19.contains((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime33 = dateTime29.withWeekyear(2848);
        int int34 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = dateTime11.minusMonths(6);
        org.joda.time.DateTime dateTime38 = dateTime36.plusDays(21597);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str28 = dateTimeFieldType27.getName();
        org.joda.time.DateTime.Property property29 = dateTime26.property(dateTimeFieldType27);
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        org.joda.time.DateTime dateTime33 = property29.addToCopy(5);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = interval39.withChronology(chronology40);
        org.joda.time.Duration duration42 = interval39.toDuration();
        org.joda.time.DateTime dateTime43 = dateTime33.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval44 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone47);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTime dateTime52 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withMillis((long) 32772);
        org.joda.time.DateTime dateTime56 = dateTime54.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime58 = dateTime56.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = interval62.withChronology(chronology63);
        org.joda.time.Duration duration65 = interval62.toDuration();
        org.joda.time.DateTime dateTime66 = dateTime58.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval67 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.yearOfCentury();
        org.joda.time.LocalDate localDate70 = property69.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean74 = dateTimeZone73.isFixed();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone73);
        org.joda.time.DateTime dateTime76 = localDate70.toDateTimeAtStartOfDay(dateTimeZone73);
        org.joda.time.DateTime dateTime77 = dateTime76.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str79 = dateTimeFieldType78.getName();
        org.joda.time.DateTime.Property property80 = dateTime77.property(dateTimeFieldType78);
        org.joda.time.Interval interval81 = property80.toInterval();
        org.joda.time.DateTimeField dateTimeField82 = property80.getField();
        int int83 = property80.getMaximumValueOverall();
        org.joda.time.DateTime dateTime84 = property80.getDateTime();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = interval85.isBefore(32400000L);
        org.joda.time.ReadableInstant readableInstant88 = null;
        boolean boolean89 = interval85.isBefore(readableInstant88);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "weekyear" + "'", str79, "weekyear");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 292278993 + "'", int83 == 292278993);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(32770);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone6);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 6);
        long long22 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 10);
        org.joda.time.DateTime dateTime23 = dateTime13.withZone(dateTimeZone18);
        org.joda.time.DateTime.Property property24 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((long) 935);
        org.joda.time.DateTime dateTime27 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime28 = property24.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) 'u');
        java.lang.String str34 = localDate31.toString();
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getName(10L);
        java.util.Locale locale44 = new java.util.Locale("70", "hi!");
        java.lang.String str45 = dateTimeZone38.getName((long) '4', locale44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(12L, dateTimeZone38);
        long long49 = dateTimeZone38.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime51 = localDate31.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) dateTime28, dateTimeZone38);
        org.joda.time.DateTime dateTime53 = localDate3.toDateTimeAtMidnight(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = localDate3.withDayOfWeek(94987);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 94987 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21600000 + "'", int20 == 21600000);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11" + "'", str34, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+06:00" + "'", str40, "+06:00");
        org.junit.Assert.assertEquals(locale44.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+06:00" + "'", str45, "+06:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-31467224657L) + "'", long49 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime9.era();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime9.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime9.plusMinutes(2000);
        org.joda.time.DateTime dateTime37 = dateTime9.withDurationAdded(0L, 56384);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(locale6);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth11.toInterval(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonth11.getFieldTypes();
        org.joda.time.YearMonth.Property property15 = yearMonth11.year();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = locale16.stripExtensions();
        int int19 = property15.getMaximumTextLength(locale18);
        java.lang.String str20 = locale6.getDisplayName(locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone5, locale18);
        java.util.Locale locale25 = new java.util.Locale("zho", "1970-01-01T00:00:00.000+06:00", "Chinese");
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone5, locale25);
        int int28 = calendar26.get(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FR" + "'", str17, "FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "allemand" + "'", str20, "allemand");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572632345,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=52,MILLISECOND=345,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale25.toString(), "zho_1970-01-01T00:00:00.000+06:00_Chinese");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572632345,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=52,MILLISECOND=345,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime12 = localDate2.toDateTimeAtStartOfDay();
        int int13 = localDate2.getYear();
        org.joda.time.LocalDate localDate15 = localDate2.plusYears(625);
        org.joda.time.Chronology chronology16 = localDate2.getChronology();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property23.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate26 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDate26.getFields();
        org.joda.time.DateTime dateTime28 = dateTime20.withFields((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.DurationField durationField33 = chronology31.seconds();
        org.joda.time.DurationField durationField34 = chronology31.years();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.millisOfDay();
        org.joda.time.DateTime dateTime36 = dateTime20.toDateTime(chronology31);
        org.joda.time.DateTime dateTime38 = dateTime20.minusWeeks(35005);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-03-11" + "'", str11, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears(2022);
        long long13 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        int int14 = dateTime10.getYear();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfWeek();
        int int16 = property15.getLeapAmount();
        java.util.Locale.LanguageRange languageRange18 = new java.util.Locale.LanguageRange("KR");
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] { languageRange18 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getCountry();
        java.lang.String str24 = locale22.getDisplayCountry();
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap32);
        java.util.Collection<java.lang.String> strCollection34 = null;
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList33, strCollection34, filteringMode35);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList36);
        boolean boolean38 = property15.equals((java.lang.Object) strList36);
        org.joda.time.DateTime dateTime39 = property15.roundHalfEvenCopy();
        int int40 = dateTime39.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 19 + "'", int40 == 19);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        int int11 = property10.getMinimumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = localDate16.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = dateTime26.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property30 = dateTime26.monthOfYear();
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        int int32 = dateTime26.getDayOfYear();
        int int33 = property10.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime35 = dateTime26.withCenturyOfEra(28797);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        java.lang.String str4 = yearMonth2.toString("1970-01");
        int int5 = yearMonth2.getMonthOfYear();
        java.lang.String str6 = yearMonth2.toString();
        org.joda.time.YearMonth yearMonth8 = yearMonth2.minusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology9 = yearMonth8.getChronology();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01" + "'", str4, "1970-01");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01" + "'", str6, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate2.weekyear();
        org.joda.time.LocalDate localDate14 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.Chronology chronology15 = localDate2.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        int int19 = localDate18.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str21 = dateTimeFieldType20.getName();
        int int22 = localDate18.get(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        int int25 = localDate18.indexOf(dateTimeFieldType23);
        int int26 = localDate2.get(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        org.joda.time.Chronology chronology38 = dateTime36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.halfdays();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.monthOfYear();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property42 = localDate41.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property42.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate43.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime49.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str52 = dateTimeFieldType51.getName();
        org.joda.time.DateTime.Property property53 = dateTime50.property(dateTimeFieldType51);
        org.joda.time.DateTime dateTime54 = property53.roundFloorCopy();
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime54.getZone();
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        org.joda.time.Chronology chronology58 = chronology38.withZone(dateTimeZone56);
        org.joda.time.DurationField durationField59 = chronology38.seconds();
        org.joda.time.Chronology chronology60 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.era();
        boolean boolean62 = durationFieldType27.isSupported(chronology60);
        java.lang.String str63 = durationFieldType27.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekyear" + "'", str21, "weekyear");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weekyear" + "'", str52, "weekyear");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "centuries" + "'", str63, "centuries");
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        int int23 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        int int25 = dateTime22.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTime dateTime33 = localDate30.toDateTimeAtMidnight(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateMidnight dateMidnight35 = dateTime33.toDateMidnight();
        org.joda.time.DateTime.Property property36 = dateTime33.weekOfWeekyear();
        boolean boolean38 = dateTime33.equals((java.lang.Object) "1970-01");
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate.Property property41 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate43 = property41.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = property41.getField();
        int int46 = dateTimeField44.get((long) 'u');
        long long49 = dateTimeField44.addWrapField((long) (short) -1, 1);
        int int51 = dateTimeField44.get((long) (byte) 100);
        int int52 = dateTime33.get(dateTimeField44);
        boolean boolean53 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property54 = dateTime33.dayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str34, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 70 + "'", int46 == 70);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 31535999999L + "'", long49 == 31535999999L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 69 + "'", int52 == 69);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology20);
        boolean boolean23 = dateTimeFormatter22.isParser();
        boolean boolean24 = dateTimeFormatter22.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withZoneUTC();
        java.util.Date date29 = new java.util.Date(56156, (int) '#', 42);
        org.joda.time.YearMonth yearMonth30 = org.joda.time.YearMonth.fromDateFields(date29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusMonths(42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) yearMonth32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 11 00:00:00 UTC 58059");
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        org.joda.time.DateTime dateTime11 = localDate5.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType2.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfHour();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(366, 68520000, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68520000 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        int int12 = calendar3.getFirstDayOfWeek();
        boolean boolean13 = calendar3.isWeekDateSupported();
        calendar3.roll((int) (short) 1, true);
        java.lang.String str17 = calendar3.getCalendarType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2742,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime9.minusDays(32772);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillis((long) 32772);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.withDurationAdded(readableDuration41, 292278994);
        org.joda.time.DateTime dateTime45 = dateTime43.minusSeconds(8);
        org.joda.time.DateTime dateTime47 = dateTime43.withMinuteOfHour(16);
        boolean boolean48 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime9.plusYears(1439);
        int int51 = dateTime50.getHourOfDay();
        org.joda.time.DateTime.Property property52 = dateTime50.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        java.util.Locale locale0 = java.util.Locale.UK;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = yearMonth2.toInterval(dateTimeZone3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonth2.getFieldTypes();
        org.joda.time.YearMonth.Property property6 = yearMonth2.year();
        java.lang.String str7 = property6.toString();
        org.joda.time.YearMonth yearMonth8 = property6.getYearMonth();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = yearMonth10.toInterval(dateTimeZone11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = yearMonth10.getFieldTypes();
        org.joda.time.YearMonth.Property property14 = yearMonth10.year();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getCountry();
        int int17 = property14.getMaximumShortTextLength(locale15);
        java.lang.String str18 = property6.getAsShortText(locale15);
        java.util.Locale locale22 = new java.util.Locale("hi!", "2022-02-11", "2022-02-11");
        java.lang.String str23 = locale22.getScript();
        java.lang.String str24 = locale15.getDisplayScript(locale22);
        java.lang.String str25 = locale0.getDisplayVariant(locale15);
        java.lang.String str26 = locale15.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[year]" + "'", str7, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FR" + "'", str16, "FR");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_2022-02-11_2022-02-11");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        int int25 = dateTime20.getHourOfDay();
        boolean boolean26 = dateTime20.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime20.toYearMonthDay();
        org.joda.time.DateTime dateTime29 = dateTime20.minus(1050308164619000L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int34 = dateTimeZone32.getOffset((long) 2022);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 32770, dateTimeZone32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime44.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str47 = dateTimeFieldType46.getName();
        org.joda.time.DateTime.Property property48 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime49 = property48.roundFloorCopy();
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime49.getZone();
        long long53 = dateTimeZone32.getMillisKeepLocal(dateTimeZone51, (long) 9);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) dateTime29, dateTimeZone51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDate54.getFieldTypes();
        int int56 = localDate54.getDayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21600000 + "'", int34 == 21600000);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 9L + "'", long53 == 9L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.Interval interval7 = interval3.withStartMillis((long) 32772);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval11.withPeriodAfterStart(readablePeriod12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval13.toPeriod(periodType14);
        boolean boolean17 = interval13.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval18 = interval13.toMutableInterval();
        long long19 = interval13.getEndMillis();
        org.joda.time.MutableInterval mutableInterval20 = interval13.toMutableInterval();
        boolean boolean21 = interval13.isAfterNow();
        java.lang.String str22 = interval13.toString();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = yearMonth24.toInterval(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval26.withPeriodAfterStart(readablePeriod27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval29.toMutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonth33.toInterval(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Interval interval37 = interval35.withPeriodAfterStart(readablePeriod36);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        boolean boolean39 = mutableInterval30.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Interval interval41 = interval37.gap(readableInterval40);
        org.joda.time.Duration duration42 = interval37.toDuration();
        org.joda.time.Interval interval43 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        boolean boolean44 = interval7.isAfter((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 20, (long) 86397);
        org.joda.time.Period period48 = interval47.toPeriod();
        boolean boolean50 = interval47.isBefore(755922022L);
        org.joda.time.Interval interval52 = interval47.withStartMillis((long) 42);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = interval56.withChronology(chronology57);
        boolean boolean60 = interval56.isAfter(10L);
        boolean boolean62 = interval56.isAfter(24332133632770L);
        long long63 = interval56.getStartMillis();
        long long64 = interval56.getEndMillis();
        boolean boolean65 = interval47.isBefore((org.joda.time.ReadableInterval) interval56);
        boolean boolean66 = interval13.isAfter((org.joda.time.ReadableInterval) interval56);
        long long67 = interval56.getEndMillis();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-21600000L) + "'", long19 == (-21600000L));
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000+06:00/1970-01-01T00:00:00.000+06:00" + "'", str22, "1970-01-01T00:00:00.000+06:00/1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 12L + "'", long64 == 12L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 12L + "'", long67 == 12L);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime.Property property10 = dateTime8.year();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = localDate18.toDateTimeAtMidnight(dateTimeZone24);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone24, (long) 9);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone12);
        long long33 = dateTimeZone12.nextTransition(0L);
        org.joda.time.DateTime dateTime34 = dateTime8.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(63397318);
        org.joda.time.DateTime.Property property37 = dateTime36.centuryOfEra();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-31517624657L));
        java.lang.String str40 = dateTime39.toString();
        int int41 = property37.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1969-01-01T11:06:15.343+06:00" + "'", str40, "1969-01-01T11:06:15.343+06:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        long long12 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar3.setTimeZone(timeZone29);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.time.Instant instant33 = calendar32.toInstant();
        int int34 = calendar32.getMinimalDaysInFirstWeek();
        calendar32.setLenient(true);
        java.util.Calendar.Builder builder37 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder39 = builder37.setInstant((long) 32770);
        java.util.Calendar calendar40 = builder39.build();
        java.util.Date date41 = calendar40.getTime();
        calendar40.setLenient(false);
        java.util.TimeZone timeZone44 = calendar40.getTimeZone();
        calendar32.setTimeZone(timeZone44);
        int int46 = calendar32.getWeeksInWeekYear();
        java.lang.String str47 = calendar32.getCalendarType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24332133632770L + "'", long12 == 24332133632770L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572632942,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=52,MILLISECOND=942,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "gregory" + "'", str47, "gregory");
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = dateTimeFormatter4.parseLocalDate("Wed Apr 03 23:38:59 UTC 1918");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        boolean boolean17 = dateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = interval21.withChronology(chronology22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        boolean boolean35 = interval23.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = interval23.toPeriod();
        org.joda.time.DateTime dateTime38 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 360240000);
        org.joda.time.LocalDate localDate39 = localDate4.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval40 = localDate4.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.DateTime dateTime43 = dateTime41.plus((-21599958L));
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks(9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int10 = dateTimeZone8.getOffset((long) 2022);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 32770, dateTimeZone8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime25.getZone();
        long long29 = dateTimeZone8.getMillisKeepLocal(dateTimeZone27, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int36 = dateTimeZone34.getOffsetFromLocal((long) 6);
        long long38 = dateTimeZone31.getMillisKeepLocal(dateTimeZone34, (long) 10);
        long long40 = dateTimeZone8.getMillisKeepLocal(dateTimeZone34, (long) 1970);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter3.withZone(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter41.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth43 = org.joda.time.YearMonth.parse("Taiwan", dateTimeFormatter42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21600000 + "'", int10 == 21600000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21600000 + "'", int36 == 21600000);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1970L + "'", long40 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(17);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(99, 10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        java.lang.String str14 = localDate12.toString();
        org.joda.time.LocalDate localDate16 = localDate12.minusYears(0);
        org.joda.time.LocalDate.Property property17 = localDate12.year();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(4);
        org.joda.time.DurationField durationField20 = property17.getLeapDurationField();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property23.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        long long29 = dateTimeField26.addWrapField((long) 2, (int) (byte) 10);
        int int31 = dateTimeField26.getMaximumValue((long) (-1));
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate.Property property35 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property35.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate38 = property35.roundHalfCeilingCopy();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale39);
        int int41 = property35.getMaximumShortTextLength(locale39);
        java.lang.String str42 = dateTimeField26.getAsText((long) 7, locale39);
        java.lang.String str43 = locale39.getVariant();
        int int44 = property17.getMaximumShortTextLength(locale39);
        java.lang.String str45 = locale39.getISO3Country();
        java.lang.String str46 = dateTimeZone9.getShortName((-72000000L), locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter6.withZone(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = dateTimeFormatter47.print(82768L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 315532800002L + "'", long29 == 315532800002L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "70" + "'", str42, "70");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CAN" + "'", str45, "CAN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+99:10" + "'", str46, "+99:10");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = yearMonth7.toInterval(dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Interval interval11 = interval9.withPeriodAfterStart(readablePeriod10);
        org.joda.time.Interval interval13 = interval9.withStartMillis((long) 32772);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean16 = dateTimeFormatter15.isOffsetParsed();
        java.util.Locale locale17 = dateTimeFormatter15.getLocale();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(locale17);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.util.Date date8 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = localDate13.toDateTimeAtMidnight(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateMidnight dateMidnight18 = dateTime16.toDateMidnight();
        java.util.Date date19 = dateMidnight18.toDate();
        boolean boolean20 = date8.before(date19);
        java.time.Instant instant21 = date8.toInstant();
        boolean boolean22 = date6.before(date8);
        int int23 = date8.getHours();
        date8.setMonth(6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 10 10:00:01 UTC 1910");
        org.junit.Assert.assertEquals(date8.toString(), "Wed Jul 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str17, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.monthOfYear();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime42.getZone();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.Chronology chronology46 = chronology26.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfHalfday();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfDay();
        long long53 = chronology46.add((long) 42, (long) 39, 1970);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.weekyearOfCentury();
        org.joda.time.DateTime dateTime55 = dateTime15.withChronology(chronology46);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime.Property property57 = dateTime55.secondOfDay();
        long long58 = property57.remainder();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone61);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTime dateTime66 = localDate63.toDateTimeAtMidnight(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone65.isLocalDateTimeGap(localDateTime67);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean76 = dateTimeZone75.isFixed();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone75);
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.DateTime dateTime80 = localDate77.toDateTimeAtCurrentTime(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.withMillis((long) 32772);
        org.joda.time.DateTime dateTime84 = dateTime82.minusSeconds((int) '#');
        org.joda.time.DateTime.Property property85 = dateTime84.year();
        long long86 = property85.remainder();
        org.joda.time.DurationField durationField87 = property85.getDurationField();
        java.util.Locale locale88 = java.util.Locale.FRANCE;
        java.lang.String str89 = locale88.getCountry();
        java.util.Locale locale90 = locale88.stripExtensions();
        java.lang.String str91 = property85.getAsText(locale88);
        java.lang.String str92 = locale70.getDisplayCountry(locale88);
        java.lang.String str93 = dateTimeZone65.getShortName((-280800000L), locale70);
        int int94 = property57.getMaximumTextLength(locale70);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "weekyear" + "'", str40, "weekyear");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 76872L + "'", long53 == 76872L);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-9223372016892000000L) + "'", long56 == (-9223372016892000000L));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 21597772L + "'", long86 == 21597772L);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "FR" + "'", str89, "FR");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970" + "'", str91, "1970");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+06:00" + "'", str93, "+06:00");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        java.util.Date date6 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, (int) (byte) 10, 0, (int) (byte) 1);
        java.util.Date date8 = new java.util.Date((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = localDate13.toDateTimeAtMidnight(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateMidnight dateMidnight18 = dateTime16.toDateMidnight();
        java.util.Date date19 = dateMidnight18.toDate();
        boolean boolean20 = date8.before(date19);
        java.time.Instant instant21 = date8.toInstant();
        boolean boolean22 = date6.before(date8);
        date6.setHours(292278994);
        boolean boolean26 = date6.equals((java.lang.Object) "PROPERTY[YEAROFERA]");
        org.junit.Assert.assertEquals(date6.toString(), "Wed Feb 19 10:00:01 UTC 35253");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str17, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 18:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = property3.getDifference(readableInstant5);
        org.joda.time.LocalDate localDate7 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths(32772);
        org.joda.time.LocalDate localDate15 = localDate7.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTime dateTime16 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property17 = localDate7.yearOfEra();
        int int18 = localDate7.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.minutes();
        boolean boolean25 = localDate23.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate27 = localDate23.minusDays(57);
        org.joda.time.LocalDate localDate29 = localDate23.plusYears((int) (byte) 10);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        boolean boolean31 = localDate7.isAfter((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate29.toDateTime(localTime32, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property50 = dateTime49.year();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime59.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str62 = dateTimeFieldType61.getName();
        org.joda.time.DateTime.Property property63 = dateTime60.property(dateTimeFieldType61);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime66 = dateTime60.plusMillis((int) (byte) 0);
        boolean boolean67 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.yearOfCentury();
        org.joda.time.LocalDate.Property property70 = localDate68.yearOfCentury();
        org.joda.time.LocalDate localDate72 = property70.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str73 = property70.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property70.getFieldType();
        int int75 = dateTime39.get(dateTimeFieldType74);
        boolean boolean76 = dateTime34.isSupported(dateTimeFieldType74);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType74.getDurationType();
        int int78 = localDate1.indexOf(dateTimeFieldType74);
        java.lang.String str80 = localDate1.toString("1950-03");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2099 + "'", int18 == 2099);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "weekyear" + "'", str62, "weekyear");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "22" + "'", str73, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 22 + "'", int75 == 22);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1950-03" + "'", str80, "1950-03");
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 2000);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        org.joda.time.DateTime dateTime11 = localDate5.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.LocalDate localDate26 = localDate18.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property27 = localDate18.dayOfMonth();
        org.joda.time.LocalDate.Property property28 = localDate18.weekyear();
        int int29 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate18);
        int int30 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology31 = localDate2.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property33.getDifference(readableInstant35);
        org.joda.time.LocalDate localDate37 = property33.withMaximumValue();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property41.getDifference(readableInstant43);
        org.joda.time.LocalDate localDate45 = property41.withMaximumValue();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property47.getLocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate52 = localDate50.plusMonths(32772);
        org.joda.time.LocalDate localDate53 = localDate45.withFields((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.DateTime dateTime54 = localDate45.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property55 = localDate45.yearOfEra();
        int int56 = localDate45.getYearOfEra();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        java.lang.String str60 = localDate58.toString();
        boolean boolean61 = localDate45.isAfter((org.joda.time.ReadablePartial) localDate58);
        boolean boolean62 = localDate39.isBefore((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate localDate64 = localDate39.withYearOfEra(1);
        int int65 = localDate39.getEra();
        int[] intArray67 = chronology31.get((org.joda.time.ReadablePartial) localDate39, (long) (-7));
        org.joda.time.DurationField durationField68 = durationFieldType0.getField(chronology31);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2099 + "'", int56 == 2099);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01" + "'", str60, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1969, 12, 31]");
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("107");
        java.util.Locale.Builder builder6 = builder2.addUnicodeLocaleAttribute("107");
        java.util.Locale.Builder builder7 = builder2.clearExtensions();
        java.util.Locale.Builder builder9 = builder2.setLanguageTag("Englisch");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder2.setRegion("1 Jan 1970 01:00:32 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1 Jan 1970 01:00:32 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(42);
        org.joda.time.Interval interval17 = property14.toInterval();
        org.joda.time.Interval interval19 = interval17.withStartMillis(345600000L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        java.util.Date date1 = new java.util.Date((long) 1978);
        date1.setMonth(34655543);
        java.time.Instant instant4 = date1.toInstant();
        java.util.Date date5 = java.util.Date.from(instant4);
        org.junit.Assert.assertEquals(date1.toString(), "Tue Dec 01 00:00:01 UTC 2889931");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Dec 01 00:00:01 UTC 2889931");
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        int int4 = localDate3.getWeekyear();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra(309);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime9.minusDays(32772);
        org.joda.time.DateTime.Property property27 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime9.plusSeconds(13);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(20);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone34);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateTime dateTime39 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int48 = dateTimeZone46.getOffsetFromLocal((long) 6);
        long long50 = dateTimeZone43.getMillisKeepLocal(dateTimeZone46, (long) 10);
        org.joda.time.DateTime dateTime51 = dateTime41.withZone(dateTimeZone46);
        org.joda.time.DateTime.Property property52 = dateTime51.weekOfWeekyear();
        org.joda.time.DateTime dateTime54 = dateTime51.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime56 = dateTime51.plusMillis(6);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property58 = localDate57.yearOfCentury();
        org.joda.time.LocalDate localDate59 = property58.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean63 = dateTimeZone62.isFixed();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone62);
        org.joda.time.DateTime dateTime65 = localDate59.toDateTimeAtStartOfDay(dateTimeZone62);
        boolean boolean66 = dateTime65.isBeforeNow();
        int int67 = dateTime65.getDayOfMonth();
        org.joda.time.DateTime dateTime69 = dateTime65.minusYears(48);
        int int70 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = dateTime51.withMillis((long) 86397);
        boolean boolean73 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime.Property property74 = dateTime51.era();
        java.util.Locale locale77 = new java.util.Locale("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z", "5 jun 798307 11:57:00 gmt (PT0S,1969)");
        java.lang.String str78 = property74.getAsShortText(locale77);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 21600000 + "'", int48 == 21600000);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 11 + "'", int67 == 11);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertEquals(locale77.toString(), "1970-01-01t00:00:00.000z/1970-01-01t00:00:00.000z_5 JUN 798307 11:57:00 GMT (PT0S,1969)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "AD" + "'", str78, "AD");
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        int int12 = calendar3.getMinimalDaysInFirstWeek();
        int int13 = calendar3.getFirstDayOfWeek();
        long long14 = calendar3.getTimeInMillis();
        boolean boolean15 = calendar3.isWeekDateSupported();
        calendar3.clear();
        boolean boolean17 = calendar3.isWeekDateSupported();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        calendar3.set(21597, 56406, (-18), 1929, 48, 56171);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=21597,MONTH=56406,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-18,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=1929,MINUTE=48,SECOND=56171,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 24332133632770L + "'", long14 == 24332133632770L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.plusWeeks(32770);
        int int4 = localDate3.size();
        org.joda.time.LocalDate localDate6 = localDate3.withEra((int) (short) 0);
        int int7 = localDate3.getDayOfWeek();
        org.joda.time.LocalDate localDate9 = localDate3.plusMonths(63397318);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property12.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate15 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtMidnight(dateTimeZone22);
        int int24 = dateTime23.getMonthOfYear();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate15.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight30 = localDate9.toDateMidnight(dateTimeZone26);
        org.joda.time.LocalDate.Property property31 = localDate9.year();
        org.joda.time.LocalDate localDate33 = property31.addWrapFieldToCopy(48);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1969);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(57);
        int int9 = localDate4.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        long long6 = calendar3.getTimeInMillis();
        calendar3.set(9, 56172, 21632, 8, 0);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        java.util.Date date14 = calendar3.getTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=87706742432770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4749,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=116,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32770L + "'", long6 == 32770L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Apr 26 08:00:32 UTC 4749");
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 20, (long) 86397);
        org.joda.time.Period period3 = interval2.toPeriod();
        boolean boolean5 = interval2.isBefore(755922022L);
        org.joda.time.Interval interval7 = interval2.withStartMillis((long) 42);
        boolean boolean8 = interval7.isAfterNow();
        boolean boolean9 = interval7.isBeforeNow();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth14.getFieldTypes();
        org.joda.time.YearMonth.Property property18 = yearMonth14.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = yearMonth14.toString(dateTimeFormatter19);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth22.toInterval(dateTimeZone23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth22.getFieldTypes();
        org.joda.time.YearMonth.Property property26 = yearMonth22.year();
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = yearMonth30.toInterval(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Interval interval34 = interval32.withPeriodAfterStart(readablePeriod33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval34.toPeriod(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean38 = period36.isSupported(durationFieldType37);
        org.joda.time.YearMonth yearMonth40 = yearMonth28.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 32770);
        org.joda.time.YearMonth yearMonth41 = yearMonth22.minus((org.joda.time.ReadablePeriod) period36);
        boolean boolean42 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology43 = yearMonth41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter12.withChronology(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.months();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.minuteOfHour();
        org.joda.time.DurationField durationField49 = chronology43.months();
        org.joda.time.DurationField durationField50 = chronology43.hours();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.dayOfYear();
        org.joda.time.Interval interval52 = interval7.withChronology(chronology43);
        org.joda.time.DurationField durationField53 = chronology43.millis();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01" + "'", str20, "1970-01");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(12);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 48);
        long long5 = dateTimeZone1.nextTransition((-31445624657L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-31445624657L) + "'", long5 == (-31445624657L));
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((int) 'a');
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronolgy();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.LocalDate localDate18 = localDate10.plusMonths((int) (short) 1);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = localDate24.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate18.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withPivotYear(32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withDefaultYear(25);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-03-11" + "'", str19, "2022-03-11");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime.Property property23 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime9.minusDays(32772);
        org.joda.time.DateTime.Property property27 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime9.plusSeconds(13);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(20);
        org.joda.time.DateTime dateTime33 = dateTime31.minusHours(86397);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime33.plusMinutes(70);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = property38.getDifference(readableInstant40);
        org.joda.time.LocalDate localDate42 = property38.withMaximumValue();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths(32772);
        org.joda.time.LocalDate localDate50 = localDate42.withFields((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.Chronology chronology51 = localDate49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean55 = dateTimeZone54.isFixed();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone54);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 32772);
        org.joda.time.DateTime dateTime63 = dateTime61.minusSeconds((int) '#');
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone66);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateTime dateTime71 = localDate68.toDateTimeAtCurrentTime(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withMillis((long) 32772);
        boolean boolean74 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = localDate49.equals((java.lang.Object) boolean74);
        org.joda.time.DateTime dateTime76 = dateTime36.withFields((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.DateTime dateTime77 = localDate49.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis(1910);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis((long) 32772);
        org.joda.time.DateTime dateTime23 = dateTime21.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime25 = dateTime21.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime7.toMutableDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime7.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.DateTime.Property property17 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        long long22 = dateTimeField19.add((long) (byte) 10, (-1));
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        int int26 = localDate25.getWeekyear();
        java.lang.String str27 = localDate25.toString();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTime(localTime28);
        java.util.Locale locale32 = new java.util.Locale("");
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate.Property property35 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property35.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        int int40 = dateTimeField38.get((long) 'u');
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = dateTimeField38.getAsText((long) 5, locale42);
        java.lang.String str44 = locale32.getDisplayVariant(locale42);
        java.lang.String str45 = locale42.getDisplayLanguage();
        java.lang.String str46 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDate25, (int) (byte) 100, locale42);
        java.util.Locale.Builder builder47 = builder2.setLocale(locale42);
        java.util.Locale locale48 = builder47.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyear" + "'", str16, "weekyear");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-31449599990L) + "'", long22 == (-31449599990L));
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11" + "'", str27, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "70" + "'", str43, "70");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese" + "'", str45, "Chinese");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        int int2 = yearMonth1.size();
        org.joda.time.YearMonth yearMonth4 = yearMonth1.minusMonths(3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.plusYears(48);
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval14.withPeriodAfterStart(readablePeriod15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval16.toPeriod(periodType17);
        org.joda.time.YearMonth yearMonth19 = yearMonth8.plus((org.joda.time.ReadablePeriod) period18);
        java.lang.String str20 = period18.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth4.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = yearMonth21.getFieldType(0);
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth25.toInterval(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval27.withPeriodAfterStart(readablePeriod28);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        boolean boolean31 = interval29.containsNow();
        org.joda.time.DateTime dateTime32 = interval29.getStart();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 20, (long) 86397);
        boolean boolean36 = interval29.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = yearMonth39.toInterval(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Interval interval43 = interval41.withPeriodAfterStart(readablePeriod42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.PeriodType periodType46 = period45.getPeriodType();
        java.util.Date date52 = new java.util.Date((int) (short) 0, (-1), (-292275054), (int) (byte) 10, (int) 'u');
        boolean boolean53 = period45.equals((java.lang.Object) (-292275054));
        org.joda.time.Period period54 = period45.toPeriod();
        org.joda.time.Interval interval55 = interval35.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        org.joda.time.YearMonth yearMonth56 = yearMonth21.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.YearMonth.Property property57 = yearMonth21.monthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals(date52.toString(), "Mon Jun 05 11:57:00 UTC 798307");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getCountry();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FR" + "'", str1, "FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "France" + "'", str4, "France");
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime8.plusMillis(935);
        int int13 = dateTime8.getMillisOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate.Property property18 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property18.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str21 = property18.getAsString();
        org.joda.time.LocalDate localDate22 = property18.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        boolean boolean29 = localDate27.isSupported(durationFieldType28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTime();
        boolean boolean40 = dateTime38.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property57 = dateTime56.year();
        boolean boolean58 = interval46.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period59 = interval46.toPeriod();
        org.joda.time.DateTime dateTime61 = dateTime38.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 360240000);
        org.joda.time.LocalDate localDate62 = localDate27.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.LocalDate localDate63 = localDate22.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.PeriodType periodType64 = period59.getPeriodType();
        org.joda.time.LocalDate localDate65 = localDate15.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime67 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 201122);
        org.joda.time.MutablePeriod mutablePeriod68 = period59.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod69 = mutablePeriod68.toMutablePeriod();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        java.lang.String str3 = property1.getName();
        long long4 = property1.remainder();
        org.joda.time.LocalDate localDate6 = property1.addToCopy((-3599));
        org.joda.time.LocalDate.Property property7 = localDate6.year();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withDefaultYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int22 = dateTimeZone20.getOffset((long) 2022);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 32770, dateTimeZone20);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str35 = dateTimeFieldType34.getName();
        org.joda.time.DateTime.Property property36 = dateTime33.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = property36.roundFloorCopy();
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime37.getZone();
        long long41 = dateTimeZone20.getMillisKeepLocal(dateTimeZone39, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int48 = dateTimeZone46.getOffsetFromLocal((long) 6);
        long long50 = dateTimeZone43.getMillisKeepLocal(dateTimeZone46, (long) 10);
        long long52 = dateTimeZone20.getMillisKeepLocal(dateTimeZone46, (long) 1970);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter15.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime54 = localDate12.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.DateTime dateTime55 = localDate6.toDateTimeAtCurrentTime(dateTimeZone46);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfCentury" + "'", str3, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3542400000L + "'", long4 == 3542400000L);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 21600000 + "'", int22 == 21600000);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weekyear" + "'", str35, "weekyear");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 9L + "'", long41 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 21600000 + "'", int48 == 21600000);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1970L + "'", long52 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology3.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset(18L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        int int15 = property12.getMaximumValueOverall();
        org.joda.time.DateTime dateTime16 = property12.withMinimumValue();
        boolean boolean18 = dateTime16.isEqual((long) 292278994);
        int int19 = dateTime16.getMillisOfSecond();
        org.joda.time.LocalDate localDate20 = dateTime16.toLocalDate();
        int int21 = localDate20.getYearOfCentury();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54 + "'", int21 == 54);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(2022, 86397772, 7);
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(360240000, 2741, 98);
        java.util.Calendar.Builder builder12 = builder6.setLenient(true);
        java.util.Calendar.Builder builder16 = builder12.setTimeOfDay(1980, 25156829, (int) 'u');
        java.util.Calendar.Builder builder20 = builder16.setWeekDate(117, 1518171, (-34));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder23 = builder16.set((-52), 693);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean14 = localDate5.equals((java.lang.Object) dateTime13);
        java.util.Date date15 = localDate5.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean18 = localDate5.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate35 = localDate23.minusYears(10);
        boolean boolean36 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDate localDate39 = localDate35.withFieldAdded(durationFieldType37, 70);
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = interval44.withChronology(chronology45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property57 = dateTime56.year();
        boolean boolean58 = interval46.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period59 = interval46.toPeriod();
        org.joda.time.LocalDate localDate60 = localDate39.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = localDate39.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime63 = dateTime61.minusMonths(21600000);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(10, 1970);
        java.util.Calendar.Builder builder7 = builder0.setDate((int) 'u', 22, 2011);
        java.util.Calendar.Builder builder9 = builder0.setLenient(false);
        java.util.Calendar.Builder builder13 = builder9.setDate(69, 99, (int) 'u');
        java.util.Calendar.Builder builder15 = builder9.setLenient(false);
        java.util.Calendar.Builder builder20 = builder9.setTimeOfDay(1969, 6, (-3599), (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder23 = builder20.setWeekDefinition(252600000, 56165);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(2022);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        int int13 = gregorianCalendar12.getWeekYear();
        gregorianCalendar12.roll(0, false);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 32770);
        java.util.Calendar calendar20 = builder19.build();
        java.util.Date date21 = calendar20.getTime();
        java.util.TimeZone timeZone22 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillis((long) 32772);
        org.joda.time.DateTime dateTime34 = dateTime32.minusSeconds((int) '#');
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        long long36 = property35.remainder();
        org.joda.time.DurationField durationField37 = property35.getDurationField();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = locale38.stripExtensions();
        java.lang.String str41 = property35.getAsText(locale38);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone22, locale38);
        gregorianCalendar12.setTimeZone(timeZone22);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-52) + "'", int13 == (-52));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 21597772L + "'", long36 == 21597772L);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FR" + "'", str39, "FR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970" + "'", str41, "1970");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644572634133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=54,MILLISECOND=133,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572634133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=54,MILLISECOND=133,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        int int18 = dateTime11.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime11.plusHours((int) 'a');
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) 'u');
        java.lang.String str26 = localDate23.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getName(10L);
        java.util.Locale locale36 = new java.util.Locale("70", "hi!");
        java.lang.String str37 = dateTimeZone30.getName((long) '4', locale36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(12L, dateTimeZone30);
        long long41 = dateTimeZone30.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime43 = localDate23.toDateTimeAtStartOfDay(dateTimeZone30);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone30.getShortName(120L, locale45);
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Chronology chronology51 = dateTimeFormatter50.getChronology();
        boolean boolean52 = dateTimeFormatter50.isParser();
        java.util.Locale locale53 = dateTimeFormatter50.getLocale();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone56);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateTime dateTime61 = localDate58.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withMillis((long) 32772);
        org.joda.time.DateTime dateTime65 = dateTime63.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime67 = dateTime63.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter50.withChronology(chronology68);
        org.joda.time.Chronology chronology71 = dateTimeFormatter70.getChronolgy();
        org.joda.time.DurationField durationField72 = chronology71.halfdays();
        long long76 = chronology71.add((long) 4, (long) (byte) 10, (int) '#');
        org.joda.time.DateTimeField dateTimeField77 = chronology71.hourOfDay();
        java.util.Locale locale78 = java.util.Locale.TAIWAN;
        int int79 = dateTimeField77.getMaximumTextLength(locale78);
        java.lang.String str80 = dateTimeZone30.getName(146817598379000L, locale78);
        org.joda.time.DateTime dateTime81 = dateTime11.withZone(dateTimeZone30);
        org.joda.time.DateTime.Property property82 = dateTime81.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21597772 + "'", int18 == 21597772);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11" + "'", str26, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+06:00" + "'", str32, "+06:00");
        org.junit.Assert.assertEquals(locale36.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+06:00" + "'", str37, "+06:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-31467224657L) + "'", long41 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+06:00" + "'", str46, "+06:00");
        org.junit.Assert.assertNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 354L + "'", long76 == 354L);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+06:00" + "'", str80, "+06:00");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.era();
        org.joda.time.DurationField durationField17 = chronology14.millis();
        org.joda.time.DurationField durationField18 = chronology14.millis();
        org.joda.time.DurationField durationField19 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.year();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate25 = dateTime23.toLocalDate();
        org.joda.time.Interval interval26 = localDate25.toInterval();
        boolean boolean27 = interval26.isAfterNow();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate34 = localDate32.plusMonths(32772);
        org.joda.time.LocalDate localDate36 = localDate32.minusYears((int) (short) 10);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getName(10L);
        org.joda.time.Interval interval41 = localDate32.toInterval(dateTimeZone38);
        boolean boolean42 = interval26.isAfter((org.joda.time.ReadableInterval) interval41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone48);
        org.joda.time.DateTime dateTime51 = localDate45.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        boolean boolean53 = dateTime51.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = interval57.withChronology(chronology58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate62 = property61.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDate62.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property70 = dateTime69.year();
        boolean boolean71 = interval59.contains((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period72 = interval59.toPeriod();
        org.joda.time.DateTime dateTime74 = dateTime51.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 360240000);
        org.joda.time.Interval interval75 = interval41.withPeriodAfterStart((org.joda.time.ReadablePeriod) period72);
        org.joda.time.MutablePeriod mutablePeriod76 = period72.toMutablePeriod();
        org.joda.time.DateTime dateTime77 = dateTime14.minus((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateTime dateTime79 = dateTime14.plusMillis(56489);
        org.joda.time.LocalDate localDate80 = dateTime14.toLocalDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+06:00" + "'", str40, "+06:00");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDate80);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.LocalDate localDate16 = localDate4.minusYears(10);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale18.getDisplayVariant();
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale locale21 = locale18.stripExtensions();
        int int22 = property17.getMaximumShortTextLength(locale21);
        java.lang.String str23 = locale21.getDisplayName();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate.Property property26 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property26.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDate localDate29 = property26.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtMidnight(dateTimeZone36);
        int int38 = dateTime37.getMonthOfYear();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTime dateTime41 = dateTime37.toDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate29.toDateTimeAtStartOfDay(dateTimeZone40);
        java.util.Locale locale48 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str49 = locale48.getCountry();
        java.util.Locale locale51 = new java.util.Locale("");
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property53 = localDate52.yearOfCentury();
        org.joda.time.LocalDate.Property property54 = localDate52.yearOfCentury();
        org.joda.time.LocalDate localDate56 = property54.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        int int59 = dateTimeField57.get((long) 'u');
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = dateTimeField57.getAsText((long) 5, locale61);
        java.lang.String str63 = locale51.getDisplayVariant(locale61);
        java.lang.String str64 = locale61.getDisplayLanguage();
        java.lang.String str65 = locale48.getDisplayName(locale61);
        java.lang.String str66 = dateTimeZone40.getName((long) (short) 10, locale48);
        java.lang.String str67 = locale21.getDisplayName(locale48);
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale locale69 = builder68.build();
        java.util.Locale locale70 = builder68.build();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder71.removeUnicodeLocaleAttribute("eras");
        java.util.Locale.Builder builder74 = builder71.clear();
        java.util.Locale locale75 = builder74.build();
        java.lang.String str76 = locale70.getDisplayName(locale75);
        java.lang.String str77 = locale48.getDisplayVariant(locale70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinesisch (Taiwan)" + "'", str23, "Chinesisch (Taiwan)");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals(locale48.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969-12" + "'", str49, "1969-12");
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 70 + "'", int59 == 70);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "70" + "'", str62, "70");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinesisch" + "'", str64, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekofweekyear (1969-12)" + "'", str65, "weekofweekyear (1969-12)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+06:00" + "'", str66, "+06:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Chinese (Taiwan)" + "'", str67, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField14 = chronology12.seconds();
        org.joda.time.DurationField durationField15 = chronology12.years();
        boolean boolean16 = localDate4.equals((java.lang.Object) chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        java.lang.String str19 = dateTimeField17.toString();
        long long21 = dateTimeField17.roundCeiling(25193556234015770L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DateTimeField[monthOfYear]" + "'", str19, "DateTimeField[monthOfYear]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 25193558390400000L + "'", long21 == 25193558390400000L);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(1970L);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = yearMonth3.toInterval(dateTimeZone4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property7 = yearMonth3.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = yearMonth3.toString(dateTimeFormatter8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth11.toInterval(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonth11.getFieldTypes();
        org.joda.time.YearMonth.Property property15 = yearMonth11.year();
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval21.withPeriodAfterStart(readablePeriod22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.YearMonth yearMonth29 = yearMonth17.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 32770);
        org.joda.time.YearMonth yearMonth30 = yearMonth11.minus((org.joda.time.ReadablePeriod) period25);
        boolean boolean31 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonth33.toInterval(dateTimeZone34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = yearMonth33.getFieldTypes();
        org.joda.time.YearMonth.Property property37 = yearMonth33.year();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = locale38.getCountry();
        int int40 = property37.getMaximumShortTextLength(locale38);
        int int41 = property37.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth44.toInterval(dateTimeZone45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = yearMonth44.getFieldTypes();
        org.joda.time.YearMonth.Property property48 = yearMonth44.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = yearMonth44.toString(dateTimeFormatter49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = yearMonth52.toInterval(dateTimeZone53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = yearMonth52.getFieldTypes();
        org.joda.time.YearMonth.Property property56 = yearMonth52.year();
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Interval interval62 = yearMonth60.toInterval(dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Interval interval64 = interval62.withPeriodAfterStart(readablePeriod63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = interval64.toPeriod(periodType65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean68 = period66.isSupported(durationFieldType67);
        org.joda.time.YearMonth yearMonth70 = yearMonth58.withPeriodAdded((org.joda.time.ReadablePeriod) period66, 32770);
        org.joda.time.YearMonth yearMonth71 = yearMonth52.minus((org.joda.time.ReadablePeriod) period66);
        boolean boolean72 = yearMonth44.isAfter((org.joda.time.ReadablePartial) yearMonth71);
        org.joda.time.Chronology chronology73 = yearMonth71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.monthOfYear();
        org.joda.time.DurationField durationField76 = chronology73.hours();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.yearOfEra();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType42.getField(chronology73);
        org.joda.time.YearMonth.Property property79 = yearMonth3.property(dateTimeFieldType42);
        org.joda.time.YearMonth yearMonth81 = yearMonth1.withField(dateTimeFieldType42, 9);
        java.lang.String str82 = yearMonth1.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = yearMonth1.getFieldTypes();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01" + "'", str9, "1970-01");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FR" + "'", str39, "FR");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-292275054) + "'", int41 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01" + "'", str50, "1970-01");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970-01" + "'", str82, "1970-01");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.millisOfDay();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Locale.setDefault(locale11);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth16.toInterval(dateTimeZone17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth16.getFieldTypes();
        org.joda.time.YearMonth.Property property20 = yearMonth16.year();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = locale21.getCountry();
        java.util.Locale locale23 = locale21.stripExtensions();
        int int24 = property20.getMaximumTextLength(locale23);
        java.lang.String str25 = locale11.getDisplayName(locale23);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.lang.String str30 = locale11.getDisplayLanguage(locale26);
        boolean boolean31 = locale26.hasExtensions();
        java.util.Locale.setDefault(locale26);
        java.lang.String str33 = locale8.getDisplayCountry(locale26);
        java.lang.String str34 = dateTimeField5.getAsShortText(2922750, locale26);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FR" + "'", str22, "FR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "allemand" + "'", str25, "allemand");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Deutsch" + "'", str30, "Deutsch");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2922750" + "'", str34, "2922750");
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime11.minuteOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str36 = dateTimeFieldType35.getName();
        org.joda.time.DateTime.Property property37 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime39 = dateTime11.withField(dateTimeFieldType35, 1978);
        org.joda.time.DateTime.Property property40 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime42 = property40.addWrapFieldToCopy((-625));
        org.joda.time.DateTime dateTime44 = property40.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weekyear" + "'", str36, "weekyear");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setScript("");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder6.setExtension('x', "2022-03-12");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder6.setVariant("1970-01-01T00:00:00.000+08:00/1970-01-01T00:00:00.000+08:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1970-01-01T00:00:00.000+08:00/1970-01-01T00:00:00.000+08:00 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 32770);
        java.util.Calendar calendar5 = builder4.build();
        boolean boolean7 = calendar5.after((java.lang.Object) 70);
        long long8 = calendar5.getTimeInMillis();
        java.time.Instant instant9 = calendar5.toInstant();
        calendar5.set(16, 479, 0);
        boolean boolean14 = locale1.equals((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=16,MONTH=479,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32770L + "'", long8 == 32770L);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology10.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField31 = chronology10.seconds();
        org.joda.time.Chronology chronology32 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology10.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        boolean boolean38 = dateTimeField36.isLenient();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.minutes();
        boolean boolean45 = localDate43.isSupported(durationFieldType44);
        org.joda.time.LocalDate localDate47 = localDate43.minusDays(57);
        int int48 = localDate47.getEra();
        int int49 = localDate47.getDayOfYear();
        int int50 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.yearOfCentury();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate57 = localDate55.plusMonths(32772);
        org.joda.time.LocalDate localDate59 = localDate57.withWeekyear(32769);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfCentury();
        org.joda.time.LocalDate.Property property63 = localDate61.yearOfCentury();
        org.joda.time.LocalDate localDate65 = property63.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField66 = property63.getField();
        int int68 = dateTimeField66.get((long) 'u');
        int int70 = dateTimeField66.getMinimumValue((long) 42);
        java.util.Locale locale75 = new java.util.Locale("Property[yearOfEra]", "70", "2022");
        java.lang.String str76 = dateTimeField66.getAsShortText((long) 131, locale75);
        java.lang.String str77 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDate59, 43200000, locale75);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 309 + "'", int49 == 309);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 70 + "'", int68 == 70);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals(locale75.toString(), "property[yearofera]_70_2022");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "70" + "'", str76, "70");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "43200000" + "'", str77, "43200000");
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        long long6 = calendar3.getTimeInMillis();
        calendar3.setTimeInMillis(0L);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 32770);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean14 = calendar12.after((java.lang.Object) (byte) 10);
        java.util.Date date15 = calendar12.getTime();
        long long16 = date15.getTime();
        calendar3.setTime(date15);
        calendar3.add(14, 2000);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = calendar3.getMinimum(56335);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56335");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=34770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=34,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32770L + "'", long6 == 32770L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32770L + "'", long16 == 32770L);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.minuteOfHour();
        org.joda.time.DurationField durationField39 = chronology33.months();
        org.joda.time.DurationField durationField40 = chronology33.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology33.monthOfYear();
        org.joda.time.DurationField durationField42 = chronology33.hours();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("KR");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property6.getDifference(readableInstant8);
        org.joda.time.LocalDate localDate10 = property6.withMaximumValue();
        java.util.Locale locale13 = new java.util.Locale("70", "hi!");
        int int14 = property6.getMaximumShortTextLength(locale13);
        int int15 = property6.getMinimumValueOverall();
        org.joda.time.LocalDate localDate16 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate18 = localDate16.withEra(0);
        boolean boolean19 = languageRange1.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kr" + "'", str3, "kr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kr" + "'", str4, "kr");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals(locale13.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField21.set(681630699657600000L, "2022-03-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-03-11\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.minuteOfHour();
        org.joda.time.DurationField durationField39 = chronology33.months();
        org.joda.time.DurationField durationField40 = chronology33.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology33.monthOfYear();
        java.lang.String str42 = chronology33.toString();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        boolean boolean32 = dateTime31.isBeforeNow();
        int int33 = dateTime31.getDayOfYear();
        boolean boolean34 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property35 = dateTime19.millisOfSecond();
        boolean boolean36 = dateTime19.isBeforeNow();
        org.joda.time.DateTime.Property property37 = dateTime19.era();
        org.joda.time.DurationField durationField38 = property37.getLeapDurationField();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime47.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property49 = dateTime48.year();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean56 = dateTimeZone55.isFixed();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone55);
        org.joda.time.DateTime dateTime58 = localDate52.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime59 = dateTime58.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str61 = dateTimeFieldType60.getName();
        org.joda.time.DateTime.Property property62 = dateTime59.property(dateTimeFieldType60);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime59);
        int int64 = dateTime59.getHourOfDay();
        boolean boolean65 = dateTime59.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay66 = dateTime59.toYearMonthDay();
        org.joda.time.DateTime dateTime69 = dateTime59.withDurationAdded((long) 2000, 42);
        boolean boolean71 = dateTime69.isBefore((long) 3891223);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = property37.getDifference((org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 42 + "'", int33 == 42);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "weekyear" + "'", str61, "weekyear");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.util.Calendar calendar11 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTime dateTime13 = dateTime8.plusYears(56316);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("+15:38:17.158");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime13.getZone();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property17.getDifference(readableInstant19);
        org.joda.time.LocalDate localDate21 = property17.withMaximumValue();
        java.util.Locale locale24 = new java.util.Locale("70", "hi!");
        int int25 = property17.getMaximumShortTextLength(locale24);
        org.joda.time.LocalDate localDate26 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate27 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate28 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate29 = property17.withMaximumValue();
        boolean boolean30 = dateTime13.equals((java.lang.Object) localDate29);
        org.joda.time.DateTime.Property property31 = dateTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertEquals(locale24.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        java.lang.String str3 = localDate1.toString();
        org.joda.time.LocalDate localDate5 = localDate1.minusYears(0);
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(4);
        org.joda.time.DurationField durationField9 = property6.getLeapDurationField();
        org.joda.time.DurationField durationField10 = property6.getLeapDurationField();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate17 = localDate15.plusMonths(32772);
        org.joda.time.LocalDate localDate19 = localDate15.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property20 = localDate15.weekyear();
        org.joda.time.LocalDate localDate22 = localDate15.withCenturyOfEra(42);
        int int23 = property6.compareTo((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate25 = property6.addWrapFieldToCopy((int) (short) -1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (short) 1, chronology1);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.minusMonths(2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((long) (short) 1, chronology6);
        org.joda.time.Chronology chronology8 = yearMonth7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = yearMonth4.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Interval interval18 = interval16.withPeriodAfterStart(readablePeriod17);
        org.joda.time.Interval interval20 = interval16.withStartMillis((long) 32772);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfWeek();
        java.lang.String str24 = chronology21.toString();
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = yearMonth26.toInterval(dateTimeZone27);
        org.joda.time.YearMonth yearMonth30 = yearMonth26.minusMonths((int) (short) 1);
        java.lang.String str31 = yearMonth30.toString();
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonth33.toInterval(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Interval interval37 = interval35.withPeriodAfterStart(readablePeriod36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        org.joda.time.YearMonth yearMonth40 = yearMonth30.minus((org.joda.time.ReadablePeriod) period39);
        int[] intArray43 = chronology21.get((org.joda.time.ReadablePeriod) period39, 11L, 315705600011L);
        org.joda.time.YearMonth yearMonth44 = yearMonth4.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.YearMonth yearMonth46 = yearMonth4.plusYears((-11865376));
        org.joda.time.YearMonth.Property property47 = yearMonth46.year();
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+06:00]" + "'", str24, "ISOChronology[+06:00]");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-12" + "'", str31, "1969-12");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 0, 0, 2, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.000Z");
        org.joda.time.DateTime dateTime4 = dateTime1.withDurationAdded((-1L), (int) (byte) -1);
        org.joda.time.DateTime dateTime6 = dateTime1.withMinuteOfHour(6);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.DateTime.Property property18 = dateTime16.year();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.getLocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = localDate26.toDateTimeAtMidnight(dateTimeZone32);
        long long38 = dateTimeZone20.getMillisKeepLocal(dateTimeZone32, (long) 9);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone20);
        long long41 = dateTimeZone20.nextTransition(0L);
        org.joda.time.DateTime dateTime42 = dateTime16.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        boolean boolean44 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9L + "'", long38 == 9L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.minutes();
        boolean boolean23 = localDate21.isSupported(durationFieldType22);
        org.joda.time.LocalDate localDate25 = localDate21.minusDays(57);
        org.joda.time.LocalDate localDate27 = localDate21.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getRangeDurationType();
        int int31 = localDate27.indexOf(dateTimeFieldType29);
        boolean boolean32 = localDate16.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property34.getDifference(readableInstant36);
        org.joda.time.LocalDate localDate38 = property34.withMaximumValue();
        java.util.Locale locale41 = new java.util.Locale("70", "hi!");
        int int42 = property34.getMaximumShortTextLength(locale41);
        org.joda.time.LocalDate localDate43 = property34.withMaximumValue();
        org.joda.time.LocalDate localDate44 = property34.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate45 = localDate16.withFields((org.joda.time.ReadablePartial) localDate44);
        int int46 = localDate44.getWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertEquals(locale41.toString(), "70_HI!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2021 + "'", int46 == 2021);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 6);
        long long10 = dateTimeZone3.getMillisKeepLocal(dateTimeZone6, (long) 10);
        org.joda.time.Interval interval11 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = localDate0.toDateTimeAtMidnight(dateTimeZone3);
        java.lang.String str13 = dateTimeZone3.toString();
        long long15 = dateTimeZone3.nextTransition((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21600000 + "'", int8 == 21600000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+06:00" + "'", str13, "+06:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        org.joda.time.YearMonth yearMonth7 = property5.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property5.setCopy(2022);
        org.joda.time.YearMonth yearMonth11 = property5.addToCopy(4);
        org.joda.time.YearMonth yearMonth13 = property5.addWrapFieldToCopy(63397318);
        java.util.Locale locale16 = new java.util.Locale("117");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = yearMonth13.toString("16-Feb-1910 10:00:00 AM", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals(locale16.toString(), "117");
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.withMaximumValue();
        org.joda.time.LocalDate localDate4 = property2.roundHalfFloorCopy();
        java.lang.String str5 = property2.getAsShortText();
        java.lang.String str6 = property2.getAsText();
        org.joda.time.DurationField durationField7 = property2.getLeapDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "22" + "'", str6, "22");
        org.junit.Assert.assertNull(durationField7);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        boolean boolean14 = dateTime13.isEqualNow();
        org.joda.time.DateTime.Property property15 = dateTime13.monthOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str5 = property2.getAsString();
        org.joda.time.LocalDate localDate6 = property2.withMinimumValue();
        org.joda.time.LocalDate localDate7 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField11.getType();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property14.getDifference(readableInstant16);
        org.joda.time.LocalDate localDate18 = property14.withMaximumValue();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate25 = localDate23.plusMonths(32772);
        org.joda.time.LocalDate localDate26 = localDate18.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = localDate32.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis((long) 32772);
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds((int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withMillis((long) 32772);
        boolean boolean50 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = localDate25.equals((java.lang.Object) boolean50);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = locale53.getDisplayVariant();
        java.lang.String str55 = locale53.getDisplayCountry();
        java.util.Locale locale56 = locale53.stripExtensions();
        java.lang.String str57 = locale53.toLanguageTag();
        java.lang.String str58 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDate25, 0, locale53);
        org.joda.time.LocalDate localDate59 = localDate7.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology60);
        int int62 = localDate61.size();
        org.joda.time.LocalTime localTime63 = null;
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int72 = dateTimeZone70.getOffsetFromLocal((long) 6);
        long long74 = dateTimeZone67.getMillisKeepLocal(dateTimeZone70, (long) 10);
        org.joda.time.Interval interval75 = localDate65.toInterval(dateTimeZone67);
        org.joda.time.DateTime dateTime76 = localDate64.toDateTimeAtMidnight(dateTimeZone67);
        java.lang.String str77 = dateTimeZone67.toString();
        long long79 = dateTimeZone67.nextTransition((long) 0);
        boolean boolean81 = dateTimeZone67.isStandardOffset(31535997772L);
        long long84 = dateTimeZone67.convertLocalToUTC((long) 22, true);
        org.joda.time.DateTime dateTime85 = localDate61.toDateTime(localTime63, dateTimeZone67);
        org.joda.time.LocalDate localDate87 = localDate61.plusDays(56172);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology89 = null;
        boolean boolean90 = dateTimeFieldType88.isSupported(chronology89);
        boolean boolean91 = localDate87.isSupported(dateTimeFieldType88);
        int int92 = localDate59.get(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Taiwan" + "'", str55, "Taiwan");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-TW" + "'", str57, "zh-TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 21600000 + "'", int72 == 21600000);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10L + "'", long74 == 10L);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+06:00" + "'", str77, "+06:00");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-21599978L) + "'", long84 == (-21599978L));
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 48 + "'", int92 == 48);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.util.Calendar calendar11 = dateTime8.toCalendar(locale9);
        boolean boolean12 = dateTime8.isEqualNow();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths(32772);
        org.joda.time.LocalDate localDate21 = localDate17.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property22 = localDate17.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone25);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtMidnight(dateTimeZone29);
        int int31 = dateTime30.getMonthOfYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = localDate17.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime8.withZone(dateTimeZone33);
        int int39 = dateTime38.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644516000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        int int15 = dateTime13.getYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) 6);
        long long34 = dateTimeZone27.getMillisKeepLocal(dateTimeZone30, (long) 10);
        org.joda.time.DateTime dateTime35 = dateTime25.withZone(dateTimeZone30);
        org.joda.time.DateTime.Property property36 = dateTime35.weekOfWeekyear();
        org.joda.time.DateTime dateTime38 = dateTime35.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        boolean boolean48 = dateTime47.isBeforeNow();
        int int49 = dateTime47.getDayOfYear();
        boolean boolean50 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property51 = dateTime35.millisOfSecond();
        boolean boolean52 = dateTime35.isBeforeNow();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight54 = dateTime35.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21600000 + "'", int32 == 21600000);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 42 + "'", int49 == 42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = interval17.withChronology(chronology18);
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime13.plus((org.joda.time.ReadableDuration) duration20);
        int int22 = dateTime13.getMinuteOfHour();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str34 = dateTimeFieldType33.getName();
        org.joda.time.DateTime.Property property35 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = property35.roundFloorCopy();
        org.joda.time.DateTime dateTime37 = dateTime36.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime39 = dateTime36.plusDays((int) (short) 0);
        int int40 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime41 = dateTime36.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime36.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str11 = dateTimeFieldType10.getName();
        org.joda.time.DateTime.Property property12 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate25 = dateTime23.toLocalDate();
        org.joda.time.Interval interval26 = localDate25.toInterval();
        boolean boolean27 = interval26.isAfterNow();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate34 = localDate32.plusMonths(32772);
        org.joda.time.LocalDate localDate36 = localDate32.minusYears((int) (short) 10);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getName(10L);
        org.joda.time.Interval interval41 = localDate32.toInterval(dateTimeZone38);
        boolean boolean42 = interval26.isAfter((org.joda.time.ReadableInterval) interval41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone48);
        org.joda.time.DateTime dateTime51 = localDate45.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        boolean boolean53 = dateTime51.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = interval57.withChronology(chronology58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.yearOfCentury();
        org.joda.time.LocalDate localDate62 = property61.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDate62.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property70 = dateTime69.year();
        boolean boolean71 = interval59.contains((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period72 = interval59.toPeriod();
        org.joda.time.DateTime dateTime74 = dateTime51.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 360240000);
        org.joda.time.Interval interval75 = interval41.withPeriodAfterStart((org.joda.time.ReadablePeriod) period72);
        org.joda.time.MutablePeriod mutablePeriod76 = period72.toMutablePeriod();
        org.joda.time.DateTime dateTime77 = dateTime14.minus((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateTime dateTime79 = dateTime14.plusMillis(56489);
        org.joda.time.DateTime.Property property80 = dateTime14.centuryOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+06:00" + "'", str40, "+06:00");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        java.util.Date date4 = calendar3.getTime();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        org.joda.time.YearMonth yearMonth7 = org.joda.time.YearMonth.fromCalendarFields(calendar6);
        calendar6.setFirstDayOfWeek(412);
        calendar6.setFirstDayOfWeek(34628);
        int int12 = calendar6.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572635300,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34628,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=300,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone3);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 32772);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = interval17.withChronology(chronology18);
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime13.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded((long) ' ', (int) (byte) 100);
        int int25 = dateTime21.getSecondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime21.plusMonths(57);
        org.joda.time.DateTime dateTime29 = dateTime21.plusMinutes(16);
        boolean boolean30 = dateTime21.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime21.withWeekyear(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone35);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTime dateTime40 = localDate37.toDateTimeAtMidnight(dateTimeZone39);
        int int41 = dateTime40.getMonthOfYear();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int51 = dateTimeZone49.getOffsetFromLocal((long) 6);
        long long53 = dateTimeZone46.getMillisKeepLocal(dateTimeZone49, (long) 10);
        long long55 = dateTimeZone43.getMillisKeepLocal(dateTimeZone49, (-57L));
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) dateTime21, dateTimeZone49);
        long long58 = dateTimeZone49.previousTransition((-21599943L));
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21597 + "'", int25 == 21597);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 21600000 + "'", int51 == 21600000);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-57L) + "'", long55 == (-57L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-21599943L) + "'", long58 == (-21599943L));
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = property1.getDifference(readableInstant3);
        org.joda.time.LocalDate localDate5 = property1.withMaximumValue();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int23 = dateTimeZone21.getOffset((long) 2022);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 32770, dateTimeZone21);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str36 = dateTimeFieldType35.getName();
        org.joda.time.DateTime.Property property37 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime38 = property37.roundFloorCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime38.getZone();
        long long42 = dateTimeZone21.getMillisKeepLocal(dateTimeZone40, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) 6);
        long long51 = dateTimeZone44.getMillisKeepLocal(dateTimeZone47, (long) 10);
        long long53 = dateTimeZone21.getMillisKeepLocal(dateTimeZone47, (long) 1970);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone21);
        long long56 = dateTimeZone21.nextTransition((long) '4');
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(0L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight58 = localDate5.toDateMidnight(dateTimeZone21);
        org.joda.time.LocalDate.Property property59 = localDate5.centuryOfEra();
        int int60 = property59.getLeapAmount();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21600000 + "'", int23 == 21600000);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weekyear" + "'", str36, "weekyear");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 9L + "'", long42 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 21600000 + "'", int49 == 21600000);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1970L + "'", long53 == 1970L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = yearMonth3.toInterval(dateTimeZone4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth8.toInterval(dateTimeZone9);
        org.joda.time.YearMonth yearMonth12 = yearMonth8.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = yearMonth12.withChronologyRetainFields(chronology13);
        int int15 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth14.minus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = yearMonth14.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = yearMonth14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.minuteOfHour();
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(693, 3, chronology22);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        java.util.Locale locale3 = new java.util.Locale("Canada", "years", "months");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "canada_YEARS_months");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "canada_YEARS_months");
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth1.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = yearMonth9.toInterval(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonth9.getFieldTypes();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = yearMonth17.toInterval(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval19.withPeriodAfterStart(readablePeriod20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean25 = period23.isSupported(durationFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth15.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 32770);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean29 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology30 = yearMonth28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField31.getType();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01" + "'", str7, "1970-01");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(11);
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(365);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate.Property property10 = localDate8.dayOfYear();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        org.joda.time.DurationField durationField12 = property10.getLeapDurationField();
        java.lang.String str13 = property10.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfYear" + "'", str13, "dayOfYear");
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("22");
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime1.withWeekyear(28800);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 32772);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime14.withSecondOfMinute((int) (short) 10);
        org.joda.time.DateTime dateTime20 = dateTime14.minusHours(32772);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = interval24.withChronology(chronology25);
        boolean boolean28 = interval24.isAfter(10L);
        boolean boolean30 = interval24.isAfter(24332133632770L);
        long long31 = interval24.getStartMillis();
        org.joda.time.Duration duration32 = interval24.toDuration();
        org.joda.time.DateTime dateTime34 = dateTime14.withDurationAdded((org.joda.time.ReadableDuration) duration32, 131);
        org.joda.time.DateTime dateTime36 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration32, 366);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.LocalDate localDate47 = localDate39.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property48 = localDate39.dayOfMonth();
        org.joda.time.LocalDate.Property property49 = localDate39.weekyear();
        org.joda.time.LocalDate localDate51 = localDate39.minusWeeks((int) (short) 0);
        org.joda.time.Chronology chronology52 = localDate39.getChronology();
        org.joda.time.LocalDate.Property property53 = localDate39.era();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(0L);
        int int56 = property53.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDate localDate57 = dateTime55.toLocalDate();
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale58.getDisplayLanguage(locale59);
        java.util.Set<java.lang.Character> charSet62 = locale58.getExtensionKeys();
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale63.getCountry();
        java.lang.String str65 = locale58.getDisplayScript(locale63);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale63);
        java.util.Calendar calendar67 = dateTime55.toCalendar(locale63);
        org.joda.time.Chronology chronology68 = dateTime55.getChronology();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime55);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.lang.String str74 = dateTimeZone72.getName(10L);
        java.util.Locale locale78 = new java.util.Locale("70", "hi!");
        java.lang.String str79 = dateTimeZone72.getName((long) '4', locale78);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(12L, dateTimeZone72);
        long long83 = dateTimeZone72.convertLocalToUTC((-1889963999000L), false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((java.lang.Object) duration32, dateTimeZone72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese" + "'", str61, "Chinese");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "KR" + "'", str64, "KR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644572635560,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=560,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+06:00" + "'", str74, "+06:00");
        org.junit.Assert.assertEquals(locale78.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+06:00" + "'", str79, "+06:00");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1889985599000L) + "'", long83 == (-1889985599000L));
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths(99);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getMonthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        boolean boolean33 = dateTime32.isBeforeNow();
        int int34 = dateTime32.getDayOfYear();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.plusSeconds(0);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        boolean boolean39 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime37);
        java.lang.String str40 = dateTime37.toString();
        int int41 = dateTime37.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T00:00:00.000+06:00" + "'", str40, "2022-02-11T00:00:00.000+06:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(localTime13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(360000000);
        int int17 = dateTime16.getDayOfWeek();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.Interval interval16 = property15.toInterval();
        int int17 = property15.getMaximumValueOverall();
        org.joda.time.DateTime dateTime18 = property15.roundFloorCopy();
        int int19 = dateTime18.getYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        java.util.Calendar.Builder builder26 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder28 = builder26.setInstant((long) 32770);
        java.util.Calendar calendar29 = builder28.build();
        boolean boolean31 = calendar29.after((java.lang.Object) 70);
        calendar29.set(10, 32772, (int) (byte) 1, 22, 0);
        long long38 = calendar29.getTimeInMillis();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime47.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str50 = dateTimeFieldType49.getName();
        org.joda.time.DateTime.Property property51 = dateTime48.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime52 = property51.roundFloorCopy();
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime52.getZone();
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        calendar29.setTimeZone(timeZone55);
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55, locale57);
        java.lang.String str59 = property24.getAsShortText(locale57);
        org.joda.time.DateTime dateTime60 = property24.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate61 = dateTime60.toLocalDate();
        boolean boolean63 = dateTime60.isAfter((-31467224657L));
        org.joda.time.DateTime dateTime65 = dateTime60.withWeekyear(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=24332133632770,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2741,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 24332133632770L + "'", long38 == 24332133632770L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "weekyear" + "'", str50, "weekyear");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+06:00");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644572635675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=43,SECOND=55,MILLISECOND=675,ZONE_OFFSET=21600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime24 = dateTime19.plusMillis(6);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        boolean boolean34 = dateTime33.isBeforeNow();
        int int35 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime33.minusYears(48);
        int int38 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        org.joda.time.DateTime.Property property41 = dateTime37.monthOfYear();
        org.joda.time.DateTime dateTime43 = dateTime37.plusSeconds(56360);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtMidnight(dateTimeZone13);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, (long) 9);
        java.lang.String str21 = dateTimeZone13.getName((long) (-1));
        long long25 = dateTimeZone13.convertLocalToUTC(9223371985593600000L, false, 34561882L);
        long long27 = dateTimeZone13.convertUTCToLocal(63399288L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+06:00" + "'", str21, "+06:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 9223371985572000000L + "'", long25 == 9223371985572000000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 84999288L + "'", long27 == 84999288L);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.lang.String str4 = locale2.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsText();
        org.joda.time.DurationField durationField8 = property5.getRangeDurationField();
        java.lang.String str9 = property5.getName();
        int int10 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970" + "'", str7, "1970");
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "year" + "'", str9, "year");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        java.util.Locale locale2 = new java.util.Locale("31-Jan-1910 10:00:01 AM", "31-Dec-1969 4:04:00 AM");
        java.lang.String str3 = locale2.getVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "31-jan-1910 10:00:01 am_31-DEC-1969 4:04:00 AM");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str5 = property2.getAsString();
        org.joda.time.LocalDate localDate6 = property2.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        boolean boolean13 = localDate11.isSupported(durationFieldType12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        boolean boolean24 = dateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = interval28.withChronology(chronology29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property41 = dateTime40.year();
        boolean boolean42 = interval30.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period43 = interval30.toPeriod();
        org.joda.time.DateTime dateTime45 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 360240000);
        org.joda.time.LocalDate localDate46 = localDate11.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.LocalDate localDate47 = localDate6.plus((org.joda.time.ReadablePeriod) period43);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str52 = dateTimeZone50.getName(10L);
        java.util.Locale locale56 = new java.util.Locale("70", "hi!");
        java.lang.String str57 = dateTimeZone50.getName((long) '4', locale56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(12L, dateTimeZone50);
        long long61 = dateTimeZone50.convertLocalToUTC((-31445624657L), true);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) localDate6, dateTimeZone50);
        int int63 = localDate6.size();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int71 = dateTimeZone69.getOffsetFromLocal((long) 6);
        long long73 = dateTimeZone66.getMillisKeepLocal(dateTimeZone69, (long) 10);
        org.joda.time.Interval interval74 = localDate64.toInterval(dateTimeZone66);
        long long76 = dateTimeZone66.convertUTCToLocal((long) 3);
        org.joda.time.DateTime dateTime77 = localDate6.toDateTimeAtMidnight(dateTimeZone66);
        long long80 = dateTimeZone66.adjustOffset(18021597L, false);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+06:00" + "'", str52, "+06:00");
        org.junit.Assert.assertEquals(locale56.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+06:00" + "'", str57, "+06:00");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-31467224657L) + "'", long61 == (-31467224657L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 21600000 + "'", int71 == 21600000);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10L + "'", long73 == 10L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 21600003L + "'", long76 == 21600003L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 18021597L + "'", long80 == 18021597L);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property17.getLocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate22 = localDate20.plusMonths(32772);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtStartOfDay();
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePartial) localDate22, (long) 15);
        org.joda.time.DateTimeField dateTimeField26 = chronology14.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField26.set((-21600057L), "+00:00:01.980");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00:01.980\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth4.getFieldTypes();
        org.joda.time.YearMonth.Property property8 = yearMonth4.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth4.toString(dateTimeFormatter9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = yearMonth12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth12.getFieldTypes();
        org.joda.time.YearMonth.Property property16 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodAfterStart(readablePeriod23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = period26.isSupported(durationFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 32770);
        org.joda.time.YearMonth yearMonth31 = yearMonth12.minus((org.joda.time.ReadablePeriod) period26);
        boolean boolean32 = yearMonth4.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology33 = yearMonth31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withChronology(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.months();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = yearMonth38.toInterval(dateTimeZone39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = yearMonth38.getFieldTypes();
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = yearMonth38.toString(dateTimeFormatter43);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth46.toInterval(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = yearMonth46.getFieldTypes();
        org.joda.time.YearMonth.Property property50 = yearMonth46.year();
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = yearMonth54.toInterval(dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Interval interval58 = interval56.withPeriodAfterStart(readablePeriod57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval58.toPeriod(periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean62 = period60.isSupported(durationFieldType61);
        org.joda.time.YearMonth yearMonth64 = yearMonth52.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 32770);
        org.joda.time.YearMonth yearMonth65 = yearMonth46.minus((org.joda.time.ReadablePeriod) period60);
        boolean boolean66 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth65);
        org.joda.time.Chronology chronology67 = yearMonth65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.year();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology67.getZone();
        org.joda.time.Chronology chronology70 = chronology33.withZone(dateTimeZone69);
        long long74 = chronology70.add((-31449599990L), (long) 19, (int) 'a');
        org.joda.time.DateTimeField dateTimeField75 = chronology70.halfdayOfDay();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((long) (short) 1, chronology78);
        org.joda.time.Chronology chronology80 = yearMonth79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.weekyear();
        java.util.Locale locale83 = java.util.Locale.ITALY;
        java.lang.String str84 = dateTimeField81.getAsShortText((long) 12, locale83);
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str87 = dateTimeField81.getAsShortText((long) 5, locale86);
        java.lang.String str88 = dateTimeField75.getAsShortText(9L, locale86);
        long long91 = dateTimeField75.getDifferenceAsLong((-1871L), 1644600996275L);
        int int93 = dateTimeField75.getLeapAmount(35318625L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01" + "'", str10, "1970-01");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01" + "'", str44, "1970-01");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-31449598147L) + "'", long74 == (-31449598147L));
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970" + "'", str84, "1970");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970" + "'", str87, "1970");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u4e0a\u5348" + "'", str88, "\u4e0a\u5348");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-38069L) + "'", long91 == (-38069L));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        java.lang.String str8 = property5.getAsText();
        org.joda.time.YearMonth yearMonth10 = property5.addToCopy(2922789);
        int int11 = property5.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property5.getField();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[year]" + "'", str6, "Property[year]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean21 = dateTime20.isBeforeNow();
        int int22 = dateTime20.getDayOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        org.joda.time.DateTime dateTime26 = property24.roundHalfCeilingCopy();
        java.lang.String str27 = property24.getAsText();
        org.joda.time.DateTime dateTime28 = property24.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillis((long) 32772);
        org.joda.time.DateTime dateTime40 = dateTime38.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.withDurationAdded(readableDuration43, 292278994);
        java.util.Date date46 = dateTime40.toDate();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property53 = localDate52.yearOfCentury();
        org.joda.time.LocalDate localDate54 = property53.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean58 = dateTimeZone57.isFixed();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDate54.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.DateTime dateTime61 = localDate51.toDateTimeAtMidnight(dateTimeZone57);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property63 = localDate62.yearOfCentury();
        org.joda.time.LocalDate localDate64 = property63.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone67);
        org.joda.time.DateTime dateTime70 = localDate64.toDateTimeAtStartOfDay(dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime70.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str73 = dateTimeFieldType72.getName();
        org.joda.time.DateTime.Property property74 = dateTime71.property(dateTimeFieldType72);
        org.joda.time.DateTime dateTime75 = property74.roundFloorCopy();
        org.joda.time.DateTime.Property property76 = dateTime75.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime75.getZone();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean81 = dateTimeZone80.isFixed();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone80);
        java.util.TimeZone timeZone83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        org.joda.time.DateTime dateTime85 = localDate82.toDateTimeAtMidnight(dateTimeZone84);
        int int86 = dateTime85.getMonthOfYear();
        java.util.TimeZone timeZone87 = null;
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        org.joda.time.DateTime dateTime89 = dateTime85.toDateTime(dateTimeZone88);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone88);
        long long92 = dateTimeZone77.getMillisKeepLocal(dateTimeZone88, (long) 7);
        org.joda.time.DateTime dateTime93 = dateTime61.toDateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime94 = dateTime40.toDateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime95 = dateTime28.withZone(dateTimeZone88);
        org.joda.time.DateTime dateTime96 = org.joda.time.DateTime.now(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "weekyear" + "'", str73, "weekyear");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 7L + "'", long92 == 7L);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.withMaximumValue();
        org.joda.time.LocalDate localDate4 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate5 = property2.withMinimumValue();
        org.joda.time.LocalDate localDate6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        org.joda.time.LocalDate localDate9 = localDate6.plusYears(292275055);
        int int10 = localDate6.getWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2021 + "'", int10 == 2021);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillis((long) 32772);
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime11.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj1, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int26 = dateTimeZone24.getOffset((long) 2022);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 32770, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime36.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str39 = dateTimeFieldType38.getName();
        org.joda.time.DateTime.Property property40 = dateTime37.property(dateTimeFieldType38);
        org.joda.time.DateTime dateTime41 = property40.roundFloorCopy();
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime41.getZone();
        long long45 = dateTimeZone24.getMillisKeepLocal(dateTimeZone43, (long) 9);
        long long48 = dateTimeZone24.convertLocalToUTC(146817598379000L, false);
        org.joda.time.Chronology chronology49 = chronology16.withZone(dateTimeZone24);
        long long51 = dateTimeZone24.nextTransition((-50399993L));
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 64800000, dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21600000 + "'", int26 == 21600000);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "weekyear" + "'", str39, "weekyear");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 9L + "'", long45 == 9L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 146817576779000L + "'", long48 == 146817576779000L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-50399993L) + "'", long51 == (-50399993L));
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Interval interval16 = interval14.withChronology(chronology15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        boolean boolean28 = interval16.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = interval16.toPeriod();
        org.joda.time.DateTime dateTime31 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period29, 360240000);
        org.joda.time.DateTime.Property property32 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime34 = property32.addToCopy(4);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfCentury();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate37.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime43.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str46 = dateTimeFieldType45.getName();
        org.joda.time.DateTime.Property property47 = dateTime44.property(dateTimeFieldType45);
        org.joda.time.DateTime dateTime49 = property47.addToCopy((-292275054));
        java.util.GregorianCalendar gregorianCalendar50 = dateTime49.toGregorianCalendar();
        long long51 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime49);
        java.lang.String str52 = dateTime49.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean56 = dateTimeZone55.isFixed();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone55);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withMillis((long) 32772);
        org.joda.time.DateTime dateTime64 = dateTime62.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime66 = dateTime62.withSecondOfMinute((int) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime62.minusHours(32772);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours(20);
        java.lang.Object obj71 = null;
        boolean boolean72 = dateTimeZone70.equals(obj71);
        org.joda.time.DateTime dateTime73 = dateTime62.withZoneRetainFields(dateTimeZone70);
        long long75 = dateTimeZone70.nextTransition(52L);
        org.joda.time.DateTime dateTime76 = dateTime49.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime78 = dateTime76.withCenturyOfEra(1980);
        org.joda.time.DateTime.Property property79 = dateTime76.millisOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "weekyear" + "'", str46, "weekyear");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(gregorianCalendar50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 153721830830400L + "'", long51 == 153721830830400L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-292273032-02-12T00:00:00.000+06:00" + "'", str52, "-292273032-02-12T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.Interval interval7 = interval3.withStartMillis((long) 32772);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.minuteOfDay();
        int int11 = dateTimeField9.getMaximumValue(120L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1439 + "'", int11 == 1439);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfMinute();
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTimeISO();
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder14 = builder12.setInstant((long) 32770);
        java.util.Calendar calendar15 = builder14.build();
        boolean boolean17 = calendar15.after((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) 'u');
        boolean boolean23 = calendar15.after((java.lang.Object) localDate20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = localDate20.toDateTimeAtCurrentTime(dateTimeZone30);
        java.util.Locale locale38 = new java.util.Locale("ko", "dayOfWeek");
        java.lang.String str39 = dateTimeZone30.getShortName(208814213392000L, locale38);
        int int41 = dateTimeZone30.getStandardOffset(34647122L);
        org.joda.time.DateTime dateTime42 = dateTime9.withZoneRetainFields(dateTimeZone30);
        java.lang.String str44 = dateTimeZone30.getShortName(777600000L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_DAYOFWEEK");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+06:00" + "'", str39, "+06:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 21600000 + "'", int41 == 21600000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+06:00" + "'", str44, "+06:00");
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int7 = dateTimeZone5.getOffsetFromLocal((long) 6);
        long long9 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        org.joda.time.Interval interval10 = localDate0.toInterval(dateTimeZone2);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        boolean boolean21 = dateTime19.isAfterNow();
        int int22 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone2);
        java.lang.String str25 = dateTimeZone2.getName((-21599989L));
        long long27 = dateTimeZone2.convertUTCToLocal((long) 456809);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = localDate32.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis((long) 32772);
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds((int) '#');
        org.joda.time.DateTime.Property property40 = dateTime39.year();
        long long41 = property40.remainder();
        org.joda.time.DateTime dateTime43 = property40.setCopy(21600000);
        org.joda.time.DateTime dateTime44 = property40.withMinimumValue();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate51 = localDate49.plusMonths(32772);
        org.joda.time.DateMidnight dateMidnight52 = localDate51.toDateMidnight();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property54.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str64 = dateTimeFieldType63.getName();
        org.joda.time.DateTime.Property property65 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.Interval interval66 = property65.toInterval();
        org.joda.time.DateTimeField dateTimeField67 = property65.getField();
        org.joda.time.DateTime dateTime69 = property65.setCopy((int) (byte) 10);
        int int70 = dateTime69.getYearOfCentury();
        org.joda.time.DateTime.Property property71 = dateTime69.millisOfDay();
        int int72 = dateMidnight52.compareTo((org.joda.time.ReadableInstant) dateTime69);
        int int73 = property40.getDifference((org.joda.time.ReadableInstant) dateMidnight52);
        int int74 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21600000 + "'", int7 == 21600000);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 21600000 + "'", int22 == 21600000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+06:00" + "'", str25, "+06:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 22056809L + "'", long27 == 22056809L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 21597772L + "'", long41 == 21597772L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyear" + "'", str64, "weekyear");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-878) + "'", int73 == (-878));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 21600000 + "'", int74 == 21600000);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate3 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.halfdays();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology14);
        long long17 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDate localDate19 = property1.addWrapFieldToCopy(122);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = localDate24.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone26);
        org.joda.time.Interval interval30 = localDate19.toInterval(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = localDate19.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(2022);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getMonthOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone30);
        boolean boolean34 = dateTime33.isBeforeNow();
        int int35 = dateTime33.getDayOfYear();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone39);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTime dateTime44 = localDate41.toDateTimeAtMidnight(dateTimeZone43);
        int int45 = dateTime44.getMonthOfYear();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTime dateTime48 = dateTime44.toDateTime(dateTimeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate51 = property50.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean55 = dateTimeZone54.isFixed();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone54);
        org.joda.time.DateTime dateTime57 = localDate51.toDateTimeAtStartOfDay(dateTimeZone54);
        boolean boolean58 = dateTime57.isBeforeNow();
        int int59 = dateTime57.getDayOfYear();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = dateTime33.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.YearMonthDay yearMonthDay62 = dateTime33.toYearMonthDay();
        org.joda.time.LocalDate localDate63 = dateTime33.toLocalDate();
        boolean boolean64 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(57);
        long long70 = dateTimeZone66.convertLocalToUTC((long) ' ', false, 1L);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        java.util.TimeZone timeZone72 = dateTimeZone66.toTimeZone();
        boolean boolean73 = dateTimeZone66.isFixed();
        org.joda.time.DateTime dateTime74 = dateTime9.toDateTime(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 42 + "'", int35 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 42 + "'", int59 == 42);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-25L) + "'", long70 == (-25L));
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        boolean boolean8 = localDate6.equals((java.lang.Object) durationFieldType7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDate11.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str20 = dateTimeFieldType19.getName();
        org.joda.time.DateTime.Property property21 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = property21.roundFloorCopy();
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime22.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime22.minusMinutes((int) (short) 0);
        boolean boolean35 = localDate6.equals((java.lang.Object) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime34.getZone();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekyear" + "'", str20, "weekyear");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((int) 'u');
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale14);
        java.util.Calendar calendar16 = dateTime13.toCalendar(locale14);
        // The following exception was thrown during execution in test generation
        try {
            calendar16.roll(938, 1978);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58474483202228,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+06:00\",offset=21600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=117,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=8,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=57,MILLISECOND=772,ZONE_OFFSET=21600000,DST_OFFSET=0]");
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((int) 'a');
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        int int14 = dateTimeField12.get((long) 'u');
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = dateTimeField12.getAsText((long) 5, locale16);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeField12.getAsShortText(100, locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withLocale(locale19);
        java.lang.String str22 = locale19.getDisplayLanguage();
        java.lang.String str23 = locale19.getCountry();
        java.lang.String str24 = locale19.getISO3Language();
        java.lang.String str25 = locale19.getDisplayCountry();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "70" + "'", str17, "70");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FR" + "'", str23, "FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "France" + "'", str25, "France");
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.roundFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate4.plusDays(56170);
        int int8 = localDate4.getMonthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Interval interval5 = interval3.withPeriodAfterStart(readablePeriod4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        boolean boolean9 = interval5.contains((long) 2);
        org.joda.time.MutableInterval mutableInterval10 = interval5.toMutableInterval();
        long long11 = interval5.getEndMillis();
        org.joda.time.MutableInterval mutableInterval12 = interval5.toMutableInterval();
        org.joda.time.Interval interval13 = interval5.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth16.toInterval(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Interval interval20 = interval18.withPeriodAfterStart(readablePeriod19);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        boolean boolean22 = interval20.containsNow();
        org.joda.time.DateTime dateTime23 = interval20.getStart();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 20, (long) 86397);
        boolean boolean27 = interval20.isBefore((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = yearMonth30.toInterval(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Interval interval34 = interval32.withPeriodAfterStart(readablePeriod33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval34.toPeriod(periodType35);
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        java.util.Date date43 = new java.util.Date((int) (short) 0, (-1), (-292275054), (int) (byte) 10, (int) 'u');
        boolean boolean44 = period36.equals((java.lang.Object) (-292275054));
        org.joda.time.Period period45 = period36.toPeriod();
        org.joda.time.Interval interval46 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = period45.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod48 = period45.toMutablePeriod();
        org.joda.time.PeriodType periodType49 = mutablePeriod48.getPeriodType();
        int[] intArray51 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod48, 20L);
        org.joda.time.DurationField durationField52 = chronology14.weekyears();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology14);
        int int54 = yearMonth53.getYear();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-21600000L) + "'", long11 == (-21600000L));
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals(date43.toString(), "Mon Jun 05 11:57:00 UTC 798307");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 20]");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        long long6 = calendar3.getTimeInMillis();
        calendar3.setTimeInMillis(0L);
        boolean boolean9 = calendar3.isWeekDateSupported();
        int int10 = calendar3.getFirstDayOfWeek();
        org.joda.time.YearMonth yearMonth11 = org.joda.time.YearMonth.fromCalendarFields(calendar3);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonth13.toInterval(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = interval15.withPeriodAfterStart(readablePeriod16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = interval17.toPeriod(periodType18);
        org.joda.time.PeriodType periodType20 = period19.getPeriodType();
        int int21 = period19.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth11.plus((org.joda.time.ReadablePeriod) period19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = yearMonth11.getFieldType(98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32770L + "'", long6 == 32770L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        java.lang.String str10 = dateTimeZone6.getName(57L);
        long long13 = dateTimeZone6.adjustOffset((long) 9, false);
        int int15 = dateTimeZone6.getStandardOffset(536457600013L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((-878));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+06:00" + "'", str10, "+06:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9L + "'", long13 == 9L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21600000 + "'", int15 == 21600000);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = yearMonth6.toInterval(dateTimeZone7);
        org.joda.time.YearMonth yearMonth10 = yearMonth6.minusMonths((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = yearMonth10.withChronologyRetainFields(chronology11);
        int int13 = yearMonth1.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth12.minus(readablePeriod14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = yearMonth12.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = yearMonth12.getChronology();
        int int19 = yearMonth12.size();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.LocalDate localDate16 = localDate8.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property17 = localDate8.dayOfMonth();
        int int18 = localDate8.getYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str30 = dateTimeFieldType29.getName();
        org.joda.time.DateTime.Property property31 = dateTime28.property(dateTimeFieldType29);
        org.joda.time.DateTime dateTime32 = property31.roundFloorCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime32.getZone();
        org.joda.time.DateTime dateTime35 = localDate8.toDateTimeAtMidnight(dateTimeZone34);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getName(10L);
        java.util.Locale locale44 = new java.util.Locale("70", "hi!");
        java.lang.String str45 = dateTimeZone38.getName((long) '4', locale44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(12L, dateTimeZone38);
        long long49 = dateTimeZone38.convertLocalToUTC((-31445624657L), true);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone38);
        long long54 = dateTimeZone38.convertLocalToUTC(442143330606L, false, (-1843200000L));
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone38);
        org.joda.time.DateTime dateTime56 = localDate8.toDateTimeAtCurrentTime(dateTimeZone38);
        java.util.TimeZone timeZone57 = dateTimeZone38.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(1439, 2922789, 201122, 752, 56316, 2011, dateTimeZone38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 752 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekyear" + "'", str30, "weekyear");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+06:00" + "'", str40, "+06:00");
        org.junit.Assert.assertEquals(locale44.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+06:00" + "'", str45, "+06:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-31467224657L) + "'", long49 == (-31467224657L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 442121730606L + "'", long54 == 442121730606L);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+06:00");
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder2.build();
        boolean boolean5 = calendar3.after((java.lang.Object) 70);
        calendar3.set(10, 32772, (int) (byte) 1, 22, 0);
        calendar3.roll(0, false);
        calendar3.setMinimalDaysInFirstWeek(772);
        int int17 = calendar3.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=772,ERA=0,YEAR=2741,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=20,DAY_OF_YEAR=20,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str3 = locale0.getExtension('a');
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis(4);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = localDate25.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.DateTime.Property property36 = dateTime35.year();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean44 = dateTimeZone43.isFixed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str49 = dateTimeFieldType48.getName();
        org.joda.time.DateTime.Property property50 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        org.joda.time.DateTime dateTime54 = property50.addToCopy(5);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 12, dateTimeZone59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = interval60.withChronology(chronology61);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.DateTime dateTime64 = dateTime54.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval65 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime66 = dateTime16.minus((org.joda.time.ReadableDuration) duration63);
        int int67 = dateTime16.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyear" + "'", str49, "weekyear");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(32772);
        int int19 = dateTime16.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        int int11 = dateTime7.getMinuteOfHour();
        int int12 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime7.minusHours((-52));
        org.joda.time.DateTime dateTime16 = dateTime7.minus((-4006L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000+06:00" + "'", str8, "1970-01-01T00:00:00.000+06:00");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        java.lang.Object obj5 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone8);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 32772);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(obj5, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology20.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-456825), 79, 68520000, 1284, 61, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1284 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime9.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.withDayOfMonth(3);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone19);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int33 = dateTimeZone31.getOffsetFromLocal((long) 6);
        long long35 = dateTimeZone28.getMillisKeepLocal(dateTimeZone31, (long) 10);
        org.joda.time.DateTime dateTime36 = dateTime26.withZone(dateTimeZone31);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime36.withMinuteOfHour(7);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        boolean boolean49 = dateTime48.isBeforeNow();
        int int50 = dateTime48.getDayOfYear();
        boolean boolean51 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean52 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property53 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime56 = property53.setCopy(107);
        int int57 = dateTime56.getYearOfCentury();
        int int58 = dateTime56.getMillisOfDay();
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21600000 + "'", int33 == 21600000);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 42 + "'", int50 == 42);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 70 + "'", int57 == 70);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 21632772 + "'", int58 == 21632772);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        java.util.Locale locale2 = new java.util.Locale("70", "hi!");
        java.lang.String str3 = locale2.getDisplayCountry();
        java.lang.String str4 = locale2.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 70");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "70_HI!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!" + "'", str3, "HI!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(42);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 292278994);
        java.util.Date date17 = dateTime11.toDate();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime11.toGregorianCalendar();
        gregorianCalendar18.set((int) (byte) 0, 32769, 70, (int) (byte) -1, 2);
        gregorianCalendar18.roll(12, (int) (short) 1);
        gregorianCalendar18.set(56213, 8771, 935, 35435, 1056, 7);
        boolean boolean35 = gregorianCalendar18.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:59:57 UTC 1969");
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(2022);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight11 = dateTime9.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        int int14 = gregorianCalendar12.getMinimum(15);
        java.time.Instant instant15 = gregorianCalendar12.toInstant();
        int int16 = gregorianCalendar12.getFirstDayOfWeek();
        java.util.Date date17 = gregorianCalendar12.getTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-46800000) + "'", int14 == (-46800000));
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 03 09:43:56 UTC 53");
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        java.util.Locale locale3 = new java.util.Locale("weekOfWeekyear", "1969-12", "");
        java.lang.String str4 = locale3.getCountry();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "weekofweekyear_1969-12");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12" + "'", str4, "1969-12");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: dayOfMonth");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.joda.time.YearMonth.Property property5 = yearMonth1.year();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getCountry();
        java.util.Locale locale8 = locale6.stripExtensions();
        int int9 = property5.getMaximumTextLength(locale8);
        java.lang.String str10 = property5.toString();
        org.joda.time.YearMonth yearMonth12 = property5.addToCopy(201122);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[year]" + "'", str10, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 32770);
        java.util.Calendar calendar3 = builder0.build();
        int int4 = calendar3.getWeekYear();
        java.lang.String str5 = calendar3.getCalendarType();
        java.lang.String str6 = calendar3.getCalendarType();
        java.util.Date date7 = calendar3.getTime();
        boolean boolean8 = calendar3.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar3.getMaximum(22596);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22596");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=32770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gregory" + "'", str5, "gregory");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gregory" + "'", str6, "gregory");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32772);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        long long9 = dateTimeField6.set((long) 7, "1970");
        java.lang.String str10 = dateTimeField6.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1970L + "'", long9 == 1970L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[millisOfDay]" + "'", str10, "DateTimeField[millisOfDay]");
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(32772);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        int int11 = property9.getMaximumTextLength(locale10);
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property15.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        int int20 = dateTimeField18.get((long) 'u');
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = dateTimeField18.getAsText((long) 5, locale22);
        java.lang.String str24 = locale22.getISO3Language();
        java.lang.String str25 = property9.getAsShortText(locale22);
        org.joda.time.LocalDate localDate26 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate27 = property9.roundCeilingCopy();
        org.joda.time.LocalDate localDate29 = property9.setCopy(752);
        org.joda.time.LocalDate localDate30 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zho" + "'", str24, "zho");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "117" + "'", str25, "117");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setLenient(false);
        int int3 = calendar0.getWeekYear();
        java.util.Date date4 = new java.util.Date();
        calendar0.setTime(date4);
        calendar0.roll(0, 0);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 32770);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean14 = calendar12.after((java.lang.Object) 70);
        calendar12.set(10, 32772, (int) (byte) 1, 22, 0);
        int int21 = calendar12.getMinimalDaysInFirstWeek();
        int int22 = calendar12.getFirstDayOfWeek();
        long long23 = calendar12.getTimeInMillis();
        boolean boolean24 = calendar12.isWeekDateSupported();
        calendar12.clear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone28);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTime dateTime33 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean38 = dateTimeZone37.isFixed();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) 6);
        long long44 = dateTimeZone37.getMillisKeepLocal(dateTimeZone40, (long) 10);
        org.joda.time.DateTime dateTime45 = dateTime35.withZone(dateTimeZone40);
        org.joda.time.DateTime.Property property46 = dateTime35.era();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime55.toMutableDateTime();
        org.joda.time.Chronology chronology57 = dateTime55.getChronology();
        org.joda.time.DateTime dateTime58 = dateTime35.toDateTime(chronology57);
        java.util.Date date59 = dateTime58.toDate();
        date59.setYear((int) (short) 0);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.fromDateFields(date59);
        java.time.Instant instant63 = date59.toInstant();
        calendar12.setTime(date59);
        calendar0.setTime(date59);
        calendar0.setTimeInMillis(280800100L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=280800100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:43:57 UTC 2022");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-2208988767228,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=772,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24332133632770L + "'", long23 == 24332133632770L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 21600000 + "'", int42 == 21600000);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Mon Jan 01 00:00:32 UTC 1900");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(instant63);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(850667341626915000L);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int7 = dateTimeField5.get((long) 'u');
        long long10 = dateTimeField5.addWrapField((long) (short) -1, 1);
        org.joda.time.DurationField durationField11 = dateTimeField5.getDurationField();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property13.getDifference(readableInstant15);
        org.joda.time.LocalDate localDate17 = property13.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone20);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTime dateTime25 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        boolean boolean26 = localDate17.equals((java.lang.Object) dateTime25);
        java.util.Date date27 = localDate17.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getRangeDurationType();
        boolean boolean30 = localDate17.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property37 = localDate36.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate35.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.LocalDate localDate47 = localDate35.minusYears(10);
        boolean boolean48 = localDate17.isAfter((org.joda.time.ReadablePartial) localDate47);
        int int49 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property51.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean56 = dateTimeZone55.isFixed();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone55);
        org.joda.time.DateTime dateTime58 = localDate52.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.LocalDate localDate60 = localDate52.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property61 = localDate52.dayOfMonth();
        int int62 = localDate52.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean64 = localDate52.isSupported(dateTimeFieldType63);
        int int65 = localDate47.compareTo((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.DateTime dateTime66 = localDate47.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property68 = localDate67.yearOfCentury();
        org.joda.time.LocalDate localDate69 = property68.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean73 = dateTimeZone72.isFixed();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone72);
        org.joda.time.DateTime dateTime75 = localDate69.toDateTimeAtStartOfDay(dateTimeZone72);
        org.joda.time.LocalDate localDate77 = localDate69.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property78 = localDate69.dayOfMonth();
        org.joda.time.LocalDate localDate79 = property78.withMaximumValue();
        org.joda.time.LocalDate localDate80 = property78.roundCeilingCopy();
        org.joda.time.LocalDate localDate81 = property78.roundCeilingCopy();
        org.joda.time.LocalDate localDate82 = property78.getLocalDate();
        int int83 = localDate47.compareTo((org.joda.time.ReadablePartial) localDate82);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 31535999999L + "'", long10 == 31535999999L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Feb 11 00:00:00 UTC 2099");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        java.util.Date date6 = new java.util.Date(10, 99, 1, 70, 99, (int) (byte) -1);
        date6.setMonth(48);
        date6.setSeconds((int) 'a');
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 03 23:39:37 UTC 1922");
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime.Property property10 = dateTime8.year();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) 'u');
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = localDate18.toDateTimeAtMidnight(dateTimeZone24);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone24, (long) 9);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone12);
        long long33 = dateTimeZone12.nextTransition(0L);
        org.joda.time.DateTime dateTime34 = dateTime8.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(63397318);
        org.joda.time.DateTime.Property property37 = dateTime36.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime36.withWeekOfWeekyear((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+06:00" + "'", str3, "+06:00");
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32772);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(6);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 6);
        long long18 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        org.joda.time.DateTime dateTime19 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.DateTime.Property property20 = dateTime9.era();
        org.joda.time.DateTime dateTime21 = property20.roundFloorCopy();
        int int22 = property20.getMaximumValue();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = yearMonth24.toInterval(dateTimeZone25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonth24.getFieldTypes();
        org.joda.time.YearMonth.Property property28 = yearMonth24.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = yearMonth24.toString(dateTimeFormatter29);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = yearMonth32.toInterval(dateTimeZone33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonth32.getFieldTypes();
        org.joda.time.YearMonth.Property property36 = yearMonth32.year();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(0L);
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(0L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = yearMonth40.toInterval(dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Interval interval44 = interval42.withPeriodAfterStart(readablePeriod43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval44.toPeriod(periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean48 = period46.isSupported(durationFieldType47);
        org.joda.time.YearMonth yearMonth50 = yearMonth38.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 32770);
        org.joda.time.YearMonth yearMonth51 = yearMonth32.minus((org.joda.time.ReadablePeriod) period46);
        boolean boolean52 = yearMonth24.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        java.lang.String str53 = yearMonth51.toString();
        int int54 = yearMonth51.getYear();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21600000 + "'", int16 == 21600000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01" + "'", str30, "1970-01");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01" + "'", str53, "1970-01");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(32772L);
        int int2 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate4 = localDate1.minusWeeks(32772);
        int int5 = localDate1.getYearOfEra();
        org.joda.time.LocalDate localDate7 = localDate1.plusDays(24);
        org.joda.time.LocalDate.Property property8 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 70 + "'", int2 == 70);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate10 = localDate2.plusMonths((int) (short) 1);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate2.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(6);
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) 0L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        int int28 = property12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDate localDate30 = property12.addWrapFieldToCopy(32770);
        org.joda.time.LocalDate localDate31 = property12.withMinimumValue();
        int int32 = property12.getMinimumValueOverall();
        org.joda.time.DurationField durationField33 = property12.getRangeDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-292275054) + "'", int32 == (-292275054));
        org.junit.Assert.assertNull(durationField33);
    }
}
